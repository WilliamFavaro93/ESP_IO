void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t transferDirection, uint16_t addressMatchCode)
{
	if(hi2c == &hi2c1)
	{
		if (transferDirection == I2C_DIRECTION_RECEIVE)
		{
			//STATO_3: [SLAVE] READ: READ_DATA
			if(HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &CONTROL[i2c1_Data], 1, I2C_LAST_FRAME) != HAL_OK)
			{
				MX_I2C1_Init();
				i2c1_Register 	= 0;
				i2c1_Data 		= 0;
				i2c1_IsWriting	= 0;
			}
			else
			{
				i2c1_Register 	= 0;
				i2c1_Data 		= 0;
				i2c1_IsWriting	= 0;
			}
		}
		else
		{
			//STATO_1: [SLAVE] WRITE: READ_REGISTER + [SLAVE] READ: NONE
			if(!i2c1_IsWriting)
			{
				if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c1_Register, 1, I2C_LAST_FRAME) != HAL_OK)
				{
					MX_I2C1_Init();
					i2c1_Register 	= 0;
					i2c1_Data 		= 0;
					i2c1_IsWriting	= 0;
				}
				else
				{
					i2c1_IsWriting	= 1;
				}
			}
			else
			{
				//STATO_2: [SLAVE] WRITE: READ_REGISTER + [SLAVE] READ: READ_DATA
				if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c1_Data, 1, I2C_LAST_FRAME) != HAL_OK)
				{
					MX_I2C1_Init();
					i2c1_Register 	= 0;
					i2c1_Data 		= 0;
					i2c1_IsWriting	= 0;
				}
				else
				{
					CONTROL[i2c1_Register] 	= i2c1_Data;

					i2c1_Data 		= 0;
					i2c1_IsWriting	= 0;
				}

			}
		}
	}
}