
STM32L051C8T6TR_IO_32F44_PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc0  08005dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc8  08005dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000000c  08005ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08005ddc  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008426  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c27  00000000  00000000  0002849d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000690  00000000  00000000  0002a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d92  00000000  00000000  0002b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bda3  00000000  00000000  0003bd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00064b00  00000000  00000000  00047b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f54  00000000  00000000  000ac640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000ae594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d0c 	.word	0x08005d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005d0c 	.word	0x08005d0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_f2uiz>:
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	b510      	push	{r4, lr}
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	1c04      	adds	r4, r0, #0
 80002c4:	f000 fd7e 	bl	8000dc4 <__aeabi_fcmpge>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d103      	bne.n	80002d4 <__aeabi_f2uiz+0x18>
 80002cc:	1c20      	adds	r0, r4, #0
 80002ce:	f000 fce1 	bl	8000c94 <__aeabi_f2iz>
 80002d2:	bd10      	pop	{r4, pc}
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	1c20      	adds	r0, r4, #0
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	f000 fb3b 	bl	8000954 <__aeabi_fsub>
 80002de:	f000 fcd9 	bl	8000c94 <__aeabi_f2iz>
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	469c      	mov	ip, r3
 80002e8:	4460      	add	r0, ip
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_f2uiz+0x16>

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 fd82 	bl	8000e14 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 fd7d 	bl	8000e14 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	d434      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000322:	469b      	mov	fp, r3
 8000324:	4653      	mov	r3, sl
 8000326:	465a      	mov	r2, fp
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83b      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e079      	b.n	8000432 <__udivmoddi4+0x146>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e076      	b.n	8000438 <__udivmoddi4+0x14c>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e029      	b.n	80003b8 <__udivmoddi4+0xcc>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	469b      	mov	fp, r3
 8000390:	2320      	movs	r3, #32
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	4652      	mov	r2, sl
 8000396:	40da      	lsrs	r2, r3
 8000398:	4641      	mov	r1, r8
 800039a:	0013      	movs	r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	408a      	lsls	r2, r1
 80003a0:	0017      	movs	r7, r2
 80003a2:	4642      	mov	r2, r8
 80003a4:	431f      	orrs	r7, r3
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	001e      	movs	r6, r3
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d9c3      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003b0:	2200      	movs	r2, #0
 80003b2:	2300      	movs	r3, #0
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	4643      	mov	r3, r8
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0d8      	beq.n	8000370 <__udivmoddi4+0x84>
 80003be:	07fb      	lsls	r3, r7, #31
 80003c0:	0872      	lsrs	r2, r6, #1
 80003c2:	431a      	orrs	r2, r3
 80003c4:	4646      	mov	r6, r8
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	e00e      	b.n	80003e8 <__udivmoddi4+0xfc>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d101      	bne.n	80003d2 <__udivmoddi4+0xe6>
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d80c      	bhi.n	80003ec <__udivmoddi4+0x100>
 80003d2:	1aa4      	subs	r4, r4, r2
 80003d4:	419d      	sbcs	r5, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	1924      	adds	r4, r4, r4
 80003da:	416d      	adcs	r5, r5
 80003dc:	2100      	movs	r1, #0
 80003de:	3e01      	subs	r6, #1
 80003e0:	1824      	adds	r4, r4, r0
 80003e2:	414d      	adcs	r5, r1
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d006      	beq.n	80003f6 <__udivmoddi4+0x10a>
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	d9ee      	bls.n	80003ca <__udivmoddi4+0xde>
 80003ec:	3e01      	subs	r6, #1
 80003ee:	1924      	adds	r4, r4, r4
 80003f0:	416d      	adcs	r5, r5
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d1f8      	bne.n	80003e8 <__udivmoddi4+0xfc>
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	465b      	mov	r3, fp
 80003fc:	1900      	adds	r0, r0, r4
 80003fe:	4169      	adcs	r1, r5
 8000400:	2b00      	cmp	r3, #0
 8000402:	db24      	blt.n	800044e <__udivmoddi4+0x162>
 8000404:	002b      	movs	r3, r5
 8000406:	465a      	mov	r2, fp
 8000408:	4644      	mov	r4, r8
 800040a:	40d3      	lsrs	r3, r2
 800040c:	002a      	movs	r2, r5
 800040e:	40e2      	lsrs	r2, r4
 8000410:	001c      	movs	r4, r3
 8000412:	465b      	mov	r3, fp
 8000414:	0015      	movs	r5, r2
 8000416:	2b00      	cmp	r3, #0
 8000418:	db2a      	blt.n	8000470 <__udivmoddi4+0x184>
 800041a:	0026      	movs	r6, r4
 800041c:	409e      	lsls	r6, r3
 800041e:	0033      	movs	r3, r6
 8000420:	0026      	movs	r6, r4
 8000422:	4647      	mov	r7, r8
 8000424:	40be      	lsls	r6, r7
 8000426:	0032      	movs	r2, r6
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	4199      	sbcs	r1, r3
 800042c:	9000      	str	r0, [sp, #0]
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	e79e      	b.n	8000370 <__udivmoddi4+0x84>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d8bc      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000436:	e782      	b.n	800033e <__udivmoddi4+0x52>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	2100      	movs	r1, #0
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	9201      	str	r2, [sp, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	40da      	lsrs	r2, r3
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	e785      	b.n	800035a <__udivmoddi4+0x6e>
 800044e:	4642      	mov	r2, r8
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4646      	mov	r6, r8
 8000458:	409a      	lsls	r2, r3
 800045a:	0023      	movs	r3, r4
 800045c:	40f3      	lsrs	r3, r6
 800045e:	4644      	mov	r4, r8
 8000460:	4313      	orrs	r3, r2
 8000462:	002a      	movs	r2, r5
 8000464:	40e2      	lsrs	r2, r4
 8000466:	001c      	movs	r4, r3
 8000468:	465b      	mov	r3, fp
 800046a:	0015      	movs	r5, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	dad4      	bge.n	800041a <__udivmoddi4+0x12e>
 8000470:	4642      	mov	r2, r8
 8000472:	002f      	movs	r7, r5
 8000474:	2320      	movs	r3, #32
 8000476:	0026      	movs	r6, r4
 8000478:	4097      	lsls	r7, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	40de      	lsrs	r6, r3
 800047e:	003b      	movs	r3, r7
 8000480:	4333      	orrs	r3, r6
 8000482:	e7cd      	b.n	8000420 <__udivmoddi4+0x134>

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x1c>
 800049e:	e06f      	b.n	8000580 <__aeabi_fdiv+0xfc>
 80004a0:	2fff      	cmp	r7, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fdiv+0x22>
 80004a4:	e074      	b.n	8000590 <__aeabi_fdiv+0x10c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	4699      	mov	r9, r3
 80004ac:	469a      	mov	sl, r3
 80004ae:	00ed      	lsls	r5, r5, #3
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4315      	orrs	r5, r2
 80004b4:	3f7f      	subs	r7, #127	; 0x7f
 80004b6:	0263      	lsls	r3, r4, #9
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	4698      	mov	r8, r3
 80004bc:	0063      	lsls	r3, r4, #1
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	0fe4      	lsrs	r4, r4, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d04d      	beq.n	8000562 <__aeabi_fdiv+0xde>
 80004c6:	2bff      	cmp	r3, #255	; 0xff
 80004c8:	d045      	beq.n	8000556 <__aeabi_fdiv+0xd2>
 80004ca:	4642      	mov	r2, r8
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	04c9      	lsls	r1, r1, #19
 80004d2:	4311      	orrs	r1, r2
 80004d4:	4688      	mov	r8, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	0031      	movs	r1, r6
 80004dc:	1aff      	subs	r7, r7, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d900      	bls.n	80004ea <__aeabi_fdiv+0x66>
 80004e8:	e0b8      	b.n	800065c <__aeabi_fdiv+0x1d8>
 80004ea:	4870      	ldr	r0, [pc, #448]	; (80006ac <__aeabi_fdiv+0x228>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58c3      	ldr	r3, [r0, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4692      	mov	sl, r2
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e08d      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e0a1      	b.n	800064e <__aeabi_fdiv+0x1ca>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d018      	beq.n	8000540 <__aeabi_fdiv+0xbc>
 800050e:	003b      	movs	r3, r7
 8000510:	337f      	adds	r3, #127	; 0x7f
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd6d      	ble.n	80005f2 <__aeabi_fdiv+0x16e>
 8000516:	076a      	lsls	r2, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	220f      	movs	r2, #15
 800051c:	402a      	ands	r2, r5
 800051e:	2a04      	cmp	r2, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012a      	lsls	r2, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <__aeabi_fdiv+0x22c>)
 800052a:	401d      	ands	r5, r3
 800052c:	003b      	movs	r3, r7
 800052e:	3380      	adds	r3, #128	; 0x80
 8000530:	2bfe      	cmp	r3, #254	; 0xfe
 8000532:	dd00      	ble.n	8000536 <__aeabi_fdiv+0xb2>
 8000534:	e074      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000536:	01aa      	lsls	r2, r5, #6
 8000538:	0a52      	lsrs	r2, r2, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e002      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800053e:	000e      	movs	r6, r1
 8000540:	2000      	movs	r0, #0
 8000542:	2200      	movs	r2, #0
 8000544:	05c0      	lsls	r0, r0, #23
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4310      	orrs	r0, r2
 800054a:	4330      	orrs	r0, r6
 800054c:	bce0      	pop	{r5, r6, r7}
 800054e:	46ba      	mov	sl, r7
 8000550:	46b1      	mov	r9, r6
 8000552:	46a8      	mov	r8, r5
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	4643      	mov	r3, r8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13f      	bne.n	80005dc <__aeabi_fdiv+0x158>
 800055c:	2202      	movs	r2, #2
 800055e:	3fff      	subs	r7, #255	; 0xff
 8000560:	e003      	b.n	800056a <__aeabi_fdiv+0xe6>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d12d      	bne.n	80005c4 <__aeabi_fdiv+0x140>
 8000568:	2201      	movs	r2, #1
 800056a:	0031      	movs	r1, r6
 800056c:	464b      	mov	r3, r9
 800056e:	4061      	eors	r1, r4
 8000570:	b2c9      	uxtb	r1, r1
 8000572:	4313      	orrs	r3, r2
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d838      	bhi.n	80005ea <__aeabi_fdiv+0x166>
 8000578:	484e      	ldr	r0, [pc, #312]	; (80006b4 <__aeabi_fdiv+0x230>)
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	58c3      	ldr	r3, [r0, r3]
 800057e:	469f      	mov	pc, r3
 8000580:	2d00      	cmp	r5, #0
 8000582:	d113      	bne.n	80005ac <__aeabi_fdiv+0x128>
 8000584:	2304      	movs	r3, #4
 8000586:	4699      	mov	r9, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2700      	movs	r7, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e792      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d105      	bne.n	80005a0 <__aeabi_fdiv+0x11c>
 8000594:	2308      	movs	r3, #8
 8000596:	4699      	mov	r9, r3
 8000598:	3b06      	subs	r3, #6
 800059a:	27ff      	movs	r7, #255	; 0xff
 800059c:	469a      	mov	sl, r3
 800059e:	e78a      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e784      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005ac:	0028      	movs	r0, r5
 80005ae:	f000 fc13 	bl	8000dd8 <__clzsi2>
 80005b2:	2776      	movs	r7, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409d      	lsls	r5, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	427f      	negs	r7, r7
 80005bc:	4699      	mov	r9, r3
 80005be:	469a      	mov	sl, r3
 80005c0:	1a3f      	subs	r7, r7, r0
 80005c2:	e778      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005c4:	4640      	mov	r0, r8
 80005c6:	f000 fc07 	bl	8000dd8 <__clzsi2>
 80005ca:	4642      	mov	r2, r8
 80005cc:	1f43      	subs	r3, r0, #5
 80005ce:	409a      	lsls	r2, r3
 80005d0:	2376      	movs	r3, #118	; 0x76
 80005d2:	425b      	negs	r3, r3
 80005d4:	4690      	mov	r8, r2
 80005d6:	1a1b      	subs	r3, r3, r0
 80005d8:	2200      	movs	r2, #0
 80005da:	e77e      	b.n	80004da <__aeabi_fdiv+0x56>
 80005dc:	2303      	movs	r3, #3
 80005de:	464a      	mov	r2, r9
 80005e0:	431a      	orrs	r2, r3
 80005e2:	4691      	mov	r9, r2
 80005e4:	33fc      	adds	r3, #252	; 0xfc
 80005e6:	2203      	movs	r2, #3
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x56>
 80005ea:	000e      	movs	r6, r1
 80005ec:	20ff      	movs	r0, #255	; 0xff
 80005ee:	2200      	movs	r2, #0
 80005f0:	e7a8      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dca2      	bgt.n	8000540 <__aeabi_fdiv+0xbc>
 80005fa:	379e      	adds	r7, #158	; 0x9e
 80005fc:	002a      	movs	r2, r5
 80005fe:	40bd      	lsls	r5, r7
 8000600:	40da      	lsrs	r2, r3
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	4315      	orrs	r5, r2
 8000608:	076a      	lsls	r2, r5, #29
 800060a:	d004      	beq.n	8000616 <__aeabi_fdiv+0x192>
 800060c:	220f      	movs	r2, #15
 800060e:	402a      	ands	r2, r5
 8000610:	2a04      	cmp	r2, #4
 8000612:	d000      	beq.n	8000616 <__aeabi_fdiv+0x192>
 8000614:	3504      	adds	r5, #4
 8000616:	016a      	lsls	r2, r5, #5
 8000618:	d544      	bpl.n	80006a4 <__aeabi_fdiv+0x220>
 800061a:	2001      	movs	r0, #1
 800061c:	2200      	movs	r2, #0
 800061e:	e791      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	2200      	movs	r2, #0
 8000624:	e78e      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	2600      	movs	r6, #0
 800062a:	20ff      	movs	r0, #255	; 0xff
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	e789      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000630:	2300      	movs	r3, #0
 8000632:	4698      	mov	r8, r3
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	03d2      	lsls	r2, r2, #15
 8000638:	4215      	tst	r5, r2
 800063a:	d008      	beq.n	800064e <__aeabi_fdiv+0x1ca>
 800063c:	4643      	mov	r3, r8
 800063e:	4213      	tst	r3, r2
 8000640:	d105      	bne.n	800064e <__aeabi_fdiv+0x1ca>
 8000642:	431a      	orrs	r2, r3
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	0026      	movs	r6, r4
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	0a52      	lsrs	r2, r2, #9
 800064c:	e77a      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	432a      	orrs	r2, r5
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e773      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800065c:	4642      	mov	r2, r8
 800065e:	016b      	lsls	r3, r5, #5
 8000660:	0155      	lsls	r5, r2, #5
 8000662:	42ab      	cmp	r3, r5
 8000664:	d21a      	bcs.n	800069c <__aeabi_fdiv+0x218>
 8000666:	201b      	movs	r0, #27
 8000668:	2200      	movs	r2, #0
 800066a:	3f01      	subs	r7, #1
 800066c:	2601      	movs	r6, #1
 800066e:	001c      	movs	r4, r3
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2c00      	cmp	r4, #0
 8000676:	db01      	blt.n	800067c <__aeabi_fdiv+0x1f8>
 8000678:	429d      	cmp	r5, r3
 800067a:	d801      	bhi.n	8000680 <__aeabi_fdiv+0x1fc>
 800067c:	1b5b      	subs	r3, r3, r5
 800067e:	4332      	orrs	r2, r6
 8000680:	3801      	subs	r0, #1
 8000682:	2800      	cmp	r0, #0
 8000684:	d1f3      	bne.n	800066e <__aeabi_fdiv+0x1ea>
 8000686:	1e58      	subs	r0, r3, #1
 8000688:	4183      	sbcs	r3, r0
 800068a:	4313      	orrs	r3, r2
 800068c:	001d      	movs	r5, r3
 800068e:	003b      	movs	r3, r7
 8000690:	337f      	adds	r3, #127	; 0x7f
 8000692:	000e      	movs	r6, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd00      	ble.n	800069a <__aeabi_fdiv+0x216>
 8000698:	e73d      	b.n	8000516 <__aeabi_fdiv+0x92>
 800069a:	e7aa      	b.n	80005f2 <__aeabi_fdiv+0x16e>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e3      	b.n	800066c <__aeabi_fdiv+0x1e8>
 80006a4:	01aa      	lsls	r2, r5, #6
 80006a6:	2000      	movs	r0, #0
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	e74b      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80006ac:	08005d24 	.word	0x08005d24
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	08005d64 	.word	0x08005d64

080006b8 <__aeabi_fmul>:
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	464f      	mov	r7, r9
 80006c0:	4646      	mov	r6, r8
 80006c2:	4699      	mov	r9, r3
 80006c4:	46d6      	mov	lr, sl
 80006c6:	0fc3      	lsrs	r3, r0, #31
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	4698      	mov	r8, r3
 80006cc:	b5c0      	push	{r6, r7, lr}
 80006ce:	464b      	mov	r3, r9
 80006d0:	1c0f      	adds	r7, r1, #0
 80006d2:	0e2d      	lsrs	r5, r5, #24
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fmul+0x20>
 80006d6:	e0cb      	b.n	8000870 <__aeabi_fmul+0x1b8>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fmul+0x26>
 80006dc:	e0cf      	b.n	800087e <__aeabi_fmul+0x1c6>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	04d2      	lsls	r2, r2, #19
 80006e4:	431a      	orrs	r2, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	4691      	mov	r9, r2
 80006ea:	2600      	movs	r6, #0
 80006ec:	469a      	mov	sl, r3
 80006ee:	3d7f      	subs	r5, #127	; 0x7f
 80006f0:	027c      	lsls	r4, r7, #9
 80006f2:	007b      	lsls	r3, r7, #1
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	0fff      	lsrs	r7, r7, #31
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_fmul+0x48>
 80006fe:	e0a9      	b.n	8000854 <__aeabi_fmul+0x19c>
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d011      	beq.n	8000728 <__aeabi_fmul+0x70>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4314      	orrs	r4, r2
 800070c:	4642      	mov	r2, r8
 800070e:	3b7f      	subs	r3, #127	; 0x7f
 8000710:	195b      	adds	r3, r3, r5
 8000712:	407a      	eors	r2, r7
 8000714:	2000      	movs	r0, #0
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	1c5d      	adds	r5, r3, #1
 800071a:	2e0a      	cmp	r6, #10
 800071c:	dd13      	ble.n	8000746 <__aeabi_fmul+0x8e>
 800071e:	003a      	movs	r2, r7
 8000720:	2e0b      	cmp	r6, #11
 8000722:	d047      	beq.n	80007b4 <__aeabi_fmul+0xfc>
 8000724:	4647      	mov	r7, r8
 8000726:	e03f      	b.n	80007a8 <__aeabi_fmul+0xf0>
 8000728:	002b      	movs	r3, r5
 800072a:	33ff      	adds	r3, #255	; 0xff
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11e      	bne.n	800076e <__aeabi_fmul+0xb6>
 8000730:	2202      	movs	r2, #2
 8000732:	4316      	orrs	r6, r2
 8000734:	4642      	mov	r2, r8
 8000736:	3501      	adds	r5, #1
 8000738:	407a      	eors	r2, r7
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	35ff      	adds	r5, #255	; 0xff
 800073e:	2e0a      	cmp	r6, #10
 8000740:	dd00      	ble.n	8000744 <__aeabi_fmul+0x8c>
 8000742:	e0e4      	b.n	800090e <__aeabi_fmul+0x256>
 8000744:	2002      	movs	r0, #2
 8000746:	2e02      	cmp	r6, #2
 8000748:	dc1c      	bgt.n	8000784 <__aeabi_fmul+0xcc>
 800074a:	3e01      	subs	r6, #1
 800074c:	2e01      	cmp	r6, #1
 800074e:	d842      	bhi.n	80007d6 <__aeabi_fmul+0x11e>
 8000750:	2802      	cmp	r0, #2
 8000752:	d03d      	beq.n	80007d0 <__aeabi_fmul+0x118>
 8000754:	2801      	cmp	r0, #1
 8000756:	d166      	bne.n	8000826 <__aeabi_fmul+0x16e>
 8000758:	2000      	movs	r0, #0
 800075a:	2100      	movs	r1, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4308      	orrs	r0, r1
 8000760:	07d2      	lsls	r2, r2, #31
 8000762:	4310      	orrs	r0, r2
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	2203      	movs	r2, #3
 8000770:	4316      	orrs	r6, r2
 8000772:	4642      	mov	r2, r8
 8000774:	3501      	adds	r5, #1
 8000776:	407a      	eors	r2, r7
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	35ff      	adds	r5, #255	; 0xff
 800077c:	2e0a      	cmp	r6, #10
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0xca>
 8000780:	e0e4      	b.n	800094c <__aeabi_fmul+0x294>
 8000782:	2003      	movs	r0, #3
 8000784:	2101      	movs	r1, #1
 8000786:	40b1      	lsls	r1, r6
 8000788:	26a6      	movs	r6, #166	; 0xa6
 800078a:	00f6      	lsls	r6, r6, #3
 800078c:	4231      	tst	r1, r6
 800078e:	d10a      	bne.n	80007a6 <__aeabi_fmul+0xee>
 8000790:	2690      	movs	r6, #144	; 0x90
 8000792:	00b6      	lsls	r6, r6, #2
 8000794:	4231      	tst	r1, r6
 8000796:	d116      	bne.n	80007c6 <__aeabi_fmul+0x10e>
 8000798:	3eb9      	subs	r6, #185	; 0xb9
 800079a:	3eff      	subs	r6, #255	; 0xff
 800079c:	420e      	tst	r6, r1
 800079e:	d01a      	beq.n	80007d6 <__aeabi_fmul+0x11e>
 80007a0:	46a1      	mov	r9, r4
 80007a2:	4682      	mov	sl, r0
 80007a4:	e000      	b.n	80007a8 <__aeabi_fmul+0xf0>
 80007a6:	0017      	movs	r7, r2
 80007a8:	4653      	mov	r3, sl
 80007aa:	003a      	movs	r2, r7
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d00f      	beq.n	80007d0 <__aeabi_fmul+0x118>
 80007b0:	464c      	mov	r4, r9
 80007b2:	4650      	mov	r0, sl
 80007b4:	2803      	cmp	r0, #3
 80007b6:	d1cd      	bne.n	8000754 <__aeabi_fmul+0x9c>
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	03c9      	lsls	r1, r1, #15
 80007bc:	4321      	orrs	r1, r4
 80007be:	0249      	lsls	r1, r1, #9
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	0a49      	lsrs	r1, r1, #9
 80007c4:	e7ca      	b.n	800075c <__aeabi_fmul+0xa4>
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	2200      	movs	r2, #0
 80007ca:	20ff      	movs	r0, #255	; 0xff
 80007cc:	03c9      	lsls	r1, r1, #15
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d0:	20ff      	movs	r0, #255	; 0xff
 80007d2:	2100      	movs	r1, #0
 80007d4:	e7c2      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d6:	0c20      	lsrs	r0, r4, #16
 80007d8:	4649      	mov	r1, r9
 80007da:	0424      	lsls	r4, r4, #16
 80007dc:	0c24      	lsrs	r4, r4, #16
 80007de:	0027      	movs	r7, r4
 80007e0:	0c0e      	lsrs	r6, r1, #16
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	0c09      	lsrs	r1, r1, #16
 80007e6:	4374      	muls	r4, r6
 80007e8:	434f      	muls	r7, r1
 80007ea:	4346      	muls	r6, r0
 80007ec:	4348      	muls	r0, r1
 80007ee:	0c39      	lsrs	r1, r7, #16
 80007f0:	1900      	adds	r0, r0, r4
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	428c      	cmp	r4, r1
 80007f6:	d903      	bls.n	8000800 <__aeabi_fmul+0x148>
 80007f8:	2080      	movs	r0, #128	; 0x80
 80007fa:	0240      	lsls	r0, r0, #9
 80007fc:	4684      	mov	ip, r0
 80007fe:	4466      	add	r6, ip
 8000800:	043f      	lsls	r7, r7, #16
 8000802:	0408      	lsls	r0, r1, #16
 8000804:	0c3f      	lsrs	r7, r7, #16
 8000806:	19c0      	adds	r0, r0, r7
 8000808:	0184      	lsls	r4, r0, #6
 800080a:	1e67      	subs	r7, r4, #1
 800080c:	41bc      	sbcs	r4, r7
 800080e:	0c09      	lsrs	r1, r1, #16
 8000810:	0e80      	lsrs	r0, r0, #26
 8000812:	1989      	adds	r1, r1, r6
 8000814:	4304      	orrs	r4, r0
 8000816:	0189      	lsls	r1, r1, #6
 8000818:	430c      	orrs	r4, r1
 800081a:	0109      	lsls	r1, r1, #4
 800081c:	d571      	bpl.n	8000902 <__aeabi_fmul+0x24a>
 800081e:	2301      	movs	r3, #1
 8000820:	0861      	lsrs	r1, r4, #1
 8000822:	401c      	ands	r4, r3
 8000824:	430c      	orrs	r4, r1
 8000826:	002b      	movs	r3, r5
 8000828:	337f      	adds	r3, #127	; 0x7f
 800082a:	2b00      	cmp	r3, #0
 800082c:	dd51      	ble.n	80008d2 <__aeabi_fmul+0x21a>
 800082e:	0761      	lsls	r1, r4, #29
 8000830:	d004      	beq.n	800083c <__aeabi_fmul+0x184>
 8000832:	210f      	movs	r1, #15
 8000834:	4021      	ands	r1, r4
 8000836:	2904      	cmp	r1, #4
 8000838:	d000      	beq.n	800083c <__aeabi_fmul+0x184>
 800083a:	3404      	adds	r4, #4
 800083c:	0121      	lsls	r1, r4, #4
 800083e:	d503      	bpl.n	8000848 <__aeabi_fmul+0x190>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <__aeabi_fmul+0x298>)
 8000842:	401c      	ands	r4, r3
 8000844:	002b      	movs	r3, r5
 8000846:	3380      	adds	r3, #128	; 0x80
 8000848:	2bfe      	cmp	r3, #254	; 0xfe
 800084a:	dcc1      	bgt.n	80007d0 <__aeabi_fmul+0x118>
 800084c:	01a1      	lsls	r1, r4, #6
 800084e:	0a49      	lsrs	r1, r1, #9
 8000850:	b2d8      	uxtb	r0, r3
 8000852:	e783      	b.n	800075c <__aeabi_fmul+0xa4>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d12c      	bne.n	80008b2 <__aeabi_fmul+0x1fa>
 8000858:	2301      	movs	r3, #1
 800085a:	4642      	mov	r2, r8
 800085c:	431e      	orrs	r6, r3
 800085e:	002b      	movs	r3, r5
 8000860:	407a      	eors	r2, r7
 8000862:	2001      	movs	r0, #1
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	1c5d      	adds	r5, r3, #1
 8000868:	2e0a      	cmp	r6, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_fmul+0x1b6>
 800086c:	e757      	b.n	800071e <__aeabi_fmul+0x66>
 800086e:	e76a      	b.n	8000746 <__aeabi_fmul+0x8e>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d110      	bne.n	8000896 <__aeabi_fmul+0x1de>
 8000874:	2301      	movs	r3, #1
 8000876:	2604      	movs	r6, #4
 8000878:	2500      	movs	r5, #0
 800087a:	469a      	mov	sl, r3
 800087c:	e738      	b.n	80006f0 <__aeabi_fmul+0x38>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <__aeabi_fmul+0x1d4>
 8000882:	2302      	movs	r3, #2
 8000884:	2608      	movs	r6, #8
 8000886:	25ff      	movs	r5, #255	; 0xff
 8000888:	469a      	mov	sl, r3
 800088a:	e731      	b.n	80006f0 <__aeabi_fmul+0x38>
 800088c:	2303      	movs	r3, #3
 800088e:	260c      	movs	r6, #12
 8000890:	25ff      	movs	r5, #255	; 0xff
 8000892:	469a      	mov	sl, r3
 8000894:	e72c      	b.n	80006f0 <__aeabi_fmul+0x38>
 8000896:	4648      	mov	r0, r9
 8000898:	f000 fa9e 	bl	8000dd8 <__clzsi2>
 800089c:	464a      	mov	r2, r9
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	2576      	movs	r5, #118	; 0x76
 80008a2:	409a      	lsls	r2, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	426d      	negs	r5, r5
 80008a8:	4691      	mov	r9, r2
 80008aa:	2600      	movs	r6, #0
 80008ac:	469a      	mov	sl, r3
 80008ae:	1a2d      	subs	r5, r5, r0
 80008b0:	e71e      	b.n	80006f0 <__aeabi_fmul+0x38>
 80008b2:	0020      	movs	r0, r4
 80008b4:	f000 fa90 	bl	8000dd8 <__clzsi2>
 80008b8:	4642      	mov	r2, r8
 80008ba:	1f43      	subs	r3, r0, #5
 80008bc:	409c      	lsls	r4, r3
 80008be:	1a2b      	subs	r3, r5, r0
 80008c0:	3b76      	subs	r3, #118	; 0x76
 80008c2:	407a      	eors	r2, r7
 80008c4:	2000      	movs	r0, #0
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	1c5d      	adds	r5, r3, #1
 80008ca:	2e0a      	cmp	r6, #10
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x218>
 80008ce:	e726      	b.n	800071e <__aeabi_fmul+0x66>
 80008d0:	e739      	b.n	8000746 <__aeabi_fmul+0x8e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	1acb      	subs	r3, r1, r3
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fmul+0x224>
 80008da:	e73d      	b.n	8000758 <__aeabi_fmul+0xa0>
 80008dc:	359e      	adds	r5, #158	; 0x9e
 80008de:	0021      	movs	r1, r4
 80008e0:	40ac      	lsls	r4, r5
 80008e2:	40d9      	lsrs	r1, r3
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4321      	orrs	r1, r4
 80008ea:	074b      	lsls	r3, r1, #29
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008ee:	230f      	movs	r3, #15
 80008f0:	400b      	ands	r3, r1
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008f6:	3104      	adds	r1, #4
 80008f8:	014b      	lsls	r3, r1, #5
 80008fa:	d504      	bpl.n	8000906 <__aeabi_fmul+0x24e>
 80008fc:	2001      	movs	r0, #1
 80008fe:	2100      	movs	r1, #0
 8000900:	e72c      	b.n	800075c <__aeabi_fmul+0xa4>
 8000902:	001d      	movs	r5, r3
 8000904:	e78f      	b.n	8000826 <__aeabi_fmul+0x16e>
 8000906:	0189      	lsls	r1, r1, #6
 8000908:	2000      	movs	r0, #0
 800090a:	0a49      	lsrs	r1, r1, #9
 800090c:	e726      	b.n	800075c <__aeabi_fmul+0xa4>
 800090e:	2302      	movs	r3, #2
 8000910:	2e0f      	cmp	r6, #15
 8000912:	d10c      	bne.n	800092e <__aeabi_fmul+0x276>
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	464b      	mov	r3, r9
 8000918:	03c9      	lsls	r1, r1, #15
 800091a:	420b      	tst	r3, r1
 800091c:	d00d      	beq.n	800093a <__aeabi_fmul+0x282>
 800091e:	420c      	tst	r4, r1
 8000920:	d10b      	bne.n	800093a <__aeabi_fmul+0x282>
 8000922:	4321      	orrs	r1, r4
 8000924:	0249      	lsls	r1, r1, #9
 8000926:	003a      	movs	r2, r7
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	0a49      	lsrs	r1, r1, #9
 800092c:	e716      	b.n	800075c <__aeabi_fmul+0xa4>
 800092e:	2e0b      	cmp	r6, #11
 8000930:	d000      	beq.n	8000934 <__aeabi_fmul+0x27c>
 8000932:	e6f7      	b.n	8000724 <__aeabi_fmul+0x6c>
 8000934:	46a1      	mov	r9, r4
 8000936:	469a      	mov	sl, r3
 8000938:	e736      	b.n	80007a8 <__aeabi_fmul+0xf0>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	464b      	mov	r3, r9
 800093e:	03c9      	lsls	r1, r1, #15
 8000940:	4319      	orrs	r1, r3
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4642      	mov	r2, r8
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	0a49      	lsrs	r1, r1, #9
 800094a:	e707      	b.n	800075c <__aeabi_fmul+0xa4>
 800094c:	2303      	movs	r3, #3
 800094e:	e7df      	b.n	8000910 <__aeabi_fmul+0x258>
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	46c6      	mov	lr, r8
 8000958:	0243      	lsls	r3, r0, #9
 800095a:	0a5b      	lsrs	r3, r3, #9
 800095c:	0045      	lsls	r5, r0, #1
 800095e:	00da      	lsls	r2, r3, #3
 8000960:	0fc4      	lsrs	r4, r0, #31
 8000962:	0248      	lsls	r0, r1, #9
 8000964:	004f      	lsls	r7, r1, #1
 8000966:	4694      	mov	ip, r2
 8000968:	0a42      	lsrs	r2, r0, #9
 800096a:	001e      	movs	r6, r3
 800096c:	4690      	mov	r8, r2
 800096e:	b500      	push	{lr}
 8000970:	0e2d      	lsrs	r5, r5, #24
 8000972:	0e3f      	lsrs	r7, r7, #24
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	0980      	lsrs	r0, r0, #6
 8000978:	2fff      	cmp	r7, #255	; 0xff
 800097a:	d059      	beq.n	8000a30 <__aeabi_fsub+0xdc>
 800097c:	2201      	movs	r2, #1
 800097e:	4051      	eors	r1, r2
 8000980:	428c      	cmp	r4, r1
 8000982:	d039      	beq.n	80009f8 <__aeabi_fsub+0xa4>
 8000984:	1bea      	subs	r2, r5, r7
 8000986:	2a00      	cmp	r2, #0
 8000988:	dd58      	ble.n	8000a3c <__aeabi_fsub+0xe8>
 800098a:	2f00      	cmp	r7, #0
 800098c:	d068      	beq.n	8000a60 <__aeabi_fsub+0x10c>
 800098e:	2dff      	cmp	r5, #255	; 0xff
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x40>
 8000992:	e0d1      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	04db      	lsls	r3, r3, #19
 8000998:	4318      	orrs	r0, r3
 800099a:	2a1b      	cmp	r2, #27
 800099c:	dc00      	bgt.n	80009a0 <__aeabi_fsub+0x4c>
 800099e:	e0e3      	b.n	8000b68 <__aeabi_fsub+0x214>
 80009a0:	2301      	movs	r3, #1
 80009a2:	4662      	mov	r2, ip
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x58>
 80009aa:	e0ac      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	099e      	lsrs	r6, r3, #6
 80009b0:	0030      	movs	r0, r6
 80009b2:	f000 fa11 	bl	8000dd8 <__clzsi2>
 80009b6:	0033      	movs	r3, r6
 80009b8:	3805      	subs	r0, #5
 80009ba:	4083      	lsls	r3, r0
 80009bc:	4285      	cmp	r5, r0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x6e>
 80009c0:	e0c6      	b.n	8000b50 <__aeabi_fsub+0x1fc>
 80009c2:	4ab2      	ldr	r2, [pc, #712]	; (8000c8c <__aeabi_fsub+0x338>)
 80009c4:	1a2d      	subs	r5, r5, r0
 80009c6:	4013      	ands	r3, r2
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009cc:	220f      	movs	r2, #15
 80009ce:	401a      	ands	r2, r3
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009d4:	3304      	adds	r3, #4
 80009d6:	015a      	lsls	r2, r3, #5
 80009d8:	d400      	bmi.n	80009dc <__aeabi_fsub+0x88>
 80009da:	e097      	b.n	8000b0c <__aeabi_fsub+0x1b8>
 80009dc:	1c6a      	adds	r2, r5, #1
 80009de:	2dfe      	cmp	r5, #254	; 0xfe
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x90>
 80009e2:	e084      	b.n	8000aee <__aeabi_fsub+0x19a>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	0a5e      	lsrs	r6, r3, #9
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	05d0      	lsls	r0, r2, #23
 80009ec:	4330      	orrs	r0, r6
 80009ee:	07e4      	lsls	r4, r4, #31
 80009f0:	4320      	orrs	r0, r4
 80009f2:	bc80      	pop	{r7}
 80009f4:	46b8      	mov	r8, r7
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	1bea      	subs	r2, r5, r7
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	dd41      	ble.n	8000a82 <__aeabi_fsub+0x12e>
 80009fe:	2f00      	cmp	r7, #0
 8000a00:	d06b      	beq.n	8000ada <__aeabi_fsub+0x186>
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0xb4>
 8000a06:	e097      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	2a1b      	cmp	r2, #27
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_fsub+0xc0>
 8000a12:	e0cc      	b.n	8000bae <__aeabi_fsub+0x25a>
 8000a14:	2301      	movs	r3, #1
 8000a16:	4463      	add	r3, ip
 8000a18:	015a      	lsls	r2, r3, #5
 8000a1a:	d574      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000a1c:	3501      	adds	r5, #1
 8000a1e:	2dff      	cmp	r5, #255	; 0xff
 8000a20:	d065      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000a22:	2201      	movs	r2, #1
 8000a24:	499a      	ldr	r1, [pc, #616]	; (8000c90 <__aeabi_fsub+0x33c>)
 8000a26:	401a      	ands	r2, r3
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	e7cb      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d01f      	beq.n	8000a74 <__aeabi_fsub+0x120>
 8000a34:	428c      	cmp	r4, r1
 8000a36:	d022      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a38:	002a      	movs	r2, r5
 8000a3a:	3aff      	subs	r2, #255	; 0xff
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	d035      	beq.n	8000aac <__aeabi_fsub+0x158>
 8000a40:	1b7a      	subs	r2, r7, r5
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_fsub+0xf4>
 8000a46:	e099      	b.n	8000b7c <__aeabi_fsub+0x228>
 8000a48:	4663      	mov	r3, ip
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0xfc>
 8000a4e:	e0dd      	b.n	8000c0c <__aeabi_fsub+0x2b8>
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	2a01      	cmp	r2, #1
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x104>
 8000a56:	e105      	b.n	8000c64 <__aeabi_fsub+0x310>
 8000a58:	2aff      	cmp	r2, #255	; 0xff
 8000a5a:	d06b      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	e094      	b.n	8000b8a <__aeabi_fsub+0x236>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d073      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000a64:	1e51      	subs	r1, r2, #1
 8000a66:	2a01      	cmp	r2, #1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x118>
 8000a6a:	e0df      	b.n	8000c2c <__aeabi_fsub+0x2d8>
 8000a6c:	2aff      	cmp	r2, #255	; 0xff
 8000a6e:	d063      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a70:	000a      	movs	r2, r1
 8000a72:	e792      	b.n	800099a <__aeabi_fsub+0x46>
 8000a74:	2201      	movs	r2, #1
 8000a76:	4051      	eors	r1, r2
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a7c:	e782      	b.n	8000984 <__aeabi_fsub+0x30>
 8000a7e:	002a      	movs	r2, r5
 8000a80:	3aff      	subs	r2, #255	; 0xff
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d036      	beq.n	8000af4 <__aeabi_fsub+0x1a0>
 8000a86:	1b7a      	subs	r2, r7, r5
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fsub+0x13a>
 8000a8c:	e0aa      	b.n	8000be4 <__aeabi_fsub+0x290>
 8000a8e:	2fff      	cmp	r7, #255	; 0xff
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x140>
 8000a92:	e0da      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	4661      	mov	r1, ip
 8000a98:	04db      	lsls	r3, r3, #19
 8000a9a:	4319      	orrs	r1, r3
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2a1b      	cmp	r2, #27
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_fsub+0x150>
 8000aa2:	e0d4      	b.n	8000c4e <__aeabi_fsub+0x2fa>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	003d      	movs	r5, r7
 8000aa8:	181b      	adds	r3, r3, r0
 8000aaa:	e7b5      	b.n	8000a18 <__aeabi_fsub+0xc4>
 8000aac:	27fe      	movs	r7, #254	; 0xfe
 8000aae:	1c6a      	adds	r2, r5, #1
 8000ab0:	4217      	tst	r7, r2
 8000ab2:	d171      	bne.n	8000b98 <__aeabi_fsub+0x244>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x166>
 8000ab8:	e09e      	b.n	8000bf8 <__aeabi_fsub+0x2a4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fsub+0x16e>
 8000ac0:	e0d5      	b.n	8000c6e <__aeabi_fsub+0x31a>
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x176>
 8000ac8:	e78f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000aca:	1a1b      	subs	r3, r3, r0
 8000acc:	015e      	lsls	r6, r3, #5
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_fsub+0x17e>
 8000ad0:	e0d6      	b.n	8000c80 <__aeabi_fsub+0x32c>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1ac3      	subs	r3, r0, r3
 8000ad8:	e776      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d036      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000ade:	1e51      	subs	r1, r2, #1
 8000ae0:	2a01      	cmp	r2, #1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x192>
 8000ae4:	e09a      	b.n	8000c1c <__aeabi_fsub+0x2c8>
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d026      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e78f      	b.n	8000a0e <__aeabi_fsub+0xba>
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	2600      	movs	r6, #0
 8000af2:	e77a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000af4:	27fe      	movs	r7, #254	; 0xfe
 8000af6:	1c6a      	adds	r2, r5, #1
 8000af8:	4217      	tst	r7, r2
 8000afa:	d062      	beq.n	8000bc2 <__aeabi_fsub+0x26e>
 8000afc:	2aff      	cmp	r2, #255	; 0xff
 8000afe:	d0f6      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b00:	0015      	movs	r5, r2
 8000b02:	4460      	add	r0, ip
 8000b04:	0843      	lsrs	r3, r0, #1
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fsub+0x1b8>
 8000b0a:	e75f      	b.n	80009cc <__aeabi_fsub+0x78>
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d012      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b12:	025b      	lsls	r3, r3, #9
 8000b14:	0a5e      	lsrs	r6, r3, #9
 8000b16:	b2ea      	uxtb	r2, r5
 8000b18:	e767      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b1a:	4662      	mov	r2, ip
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000b20:	e093      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d008      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	03d2      	lsls	r2, r2, #15
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	d004      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b2e:	4640      	mov	r0, r8
 8000b30:	4210      	tst	r0, r2
 8000b32:	d101      	bne.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b34:	000c      	movs	r4, r1
 8000b36:	4643      	mov	r3, r8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0d8      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b3c:	2680      	movs	r6, #128	; 0x80
 8000b3e:	03f6      	lsls	r6, r6, #15
 8000b40:	431e      	orrs	r6, r3
 8000b42:	0276      	lsls	r6, r6, #9
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	0a76      	lsrs	r6, r6, #9
 8000b48:	e74f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	e7de      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000b50:	2220      	movs	r2, #32
 8000b52:	1b40      	subs	r0, r0, r5
 8000b54:	3001      	adds	r0, #1
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	40c1      	lsrs	r1, r0
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	4193      	sbcs	r3, r2
 8000b62:	2500      	movs	r5, #0
 8000b64:	430b      	orrs	r3, r1
 8000b66:	e72f      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000b68:	2320      	movs	r3, #32
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	4098      	lsls	r0, r3
 8000b70:	0003      	movs	r3, r0
 8000b72:	40d1      	lsrs	r1, r2
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	4193      	sbcs	r3, r2
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	e712      	b.n	80009a2 <__aeabi_fsub+0x4e>
 8000b7c:	2fff      	cmp	r7, #255	; 0xff
 8000b7e:	d0d9      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	4664      	mov	r4, ip
 8000b84:	04db      	lsls	r3, r3, #19
 8000b86:	431c      	orrs	r4, r3
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	2a1b      	cmp	r2, #27
 8000b8c:	dd52      	ble.n	8000c34 <__aeabi_fsub+0x2e0>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	000c      	movs	r4, r1
 8000b92:	003d      	movs	r5, r7
 8000b94:	1ac3      	subs	r3, r0, r3
 8000b96:	e706      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000b98:	4663      	mov	r3, ip
 8000b9a:	1a1e      	subs	r6, r3, r0
 8000b9c:	0173      	lsls	r3, r6, #5
 8000b9e:	d439      	bmi.n	8000c14 <__aeabi_fsub+0x2c0>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000ba4:	e704      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2600      	movs	r6, #0
 8000bac:	e71d      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bae:	2320      	movs	r3, #32
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	0001      	movs	r1, r0
 8000bb4:	4098      	lsls	r0, r3
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	40d1      	lsrs	r1, r2
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	4193      	sbcs	r3, r2
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	e729      	b.n	8000a16 <__aeabi_fsub+0xc2>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d1a9      	bne.n	8000b1a <__aeabi_fsub+0x1c6>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d056      	beq.n	8000c7a <__aeabi_fsub+0x326>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x280>
 8000bd2:	e70a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	4463      	add	r3, ip
 8000bd8:	015a      	lsls	r2, r3, #5
 8000bda:	d594      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <__aeabi_fsub+0x338>)
 8000bde:	3501      	adds	r5, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	e790      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000be4:	4663      	mov	r3, ip
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0af      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000bea:	1e53      	subs	r3, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d015      	beq.n	8000c1c <__aeabi_fsub+0x2c8>
 8000bf0:	2aff      	cmp	r2, #255	; 0xff
 8000bf2:	d02a      	beq.n	8000c4a <__aeabi_fsub+0x2f6>
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	e752      	b.n	8000a9e <__aeabi_fsub+0x14a>
 8000bf8:	4662      	mov	r2, ip
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d191      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d198      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000c02:	2680      	movs	r6, #128	; 0x80
 8000c04:	2400      	movs	r4, #0
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	03f6      	lsls	r6, r6, #15
 8000c0a:	e6ee      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c0c:	000c      	movs	r4, r1
 8000c0e:	4643      	mov	r3, r8
 8000c10:	0015      	movs	r5, r2
 8000c12:	e77c      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000c14:	4663      	mov	r3, ip
 8000c16:	000c      	movs	r4, r1
 8000c18:	1ac6      	subs	r6, r0, r3
 8000c1a:	e6c9      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	4463      	add	r3, ip
 8000c20:	2501      	movs	r5, #1
 8000c22:	015a      	lsls	r2, r3, #5
 8000c24:	d400      	bmi.n	8000c28 <__aeabi_fsub+0x2d4>
 8000c26:	e76e      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c28:	2502      	movs	r5, #2
 8000c2a:	e6fa      	b.n	8000a22 <__aeabi_fsub+0xce>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	2501      	movs	r5, #1
 8000c30:	1a1b      	subs	r3, r3, r0
 8000c32:	e6b8      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c34:	4664      	mov	r4, ip
 8000c36:	2320      	movs	r3, #32
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4193      	sbcs	r3, r2
 8000c46:	4323      	orrs	r3, r4
 8000c48:	e7a2      	b.n	8000b90 <__aeabi_fsub+0x23c>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	e774      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000c4e:	4661      	mov	r1, ip
 8000c50:	2320      	movs	r3, #32
 8000c52:	40d1      	lsrs	r1, r2
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4662      	mov	r2, ip
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	4193      	sbcs	r3, r2
 8000c60:	430b      	orrs	r3, r1
 8000c62:	e720      	b.n	8000aa6 <__aeabi_fsub+0x152>
 8000c64:	4663      	mov	r3, ip
 8000c66:	000c      	movs	r4, r1
 8000c68:	2501      	movs	r5, #1
 8000c6a:	1ac3      	subs	r3, r0, r3
 8000c6c:	e69b      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d099      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000c72:	000c      	movs	r4, r1
 8000c74:	4646      	mov	r6, r8
 8000c76:	2200      	movs	r2, #0
 8000c78:	e6b7      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c7a:	4646      	mov	r6, r8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e6b4      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0x332>
 8000c84:	e73f      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c86:	2400      	movs	r4, #0
 8000c88:	2600      	movs	r6, #0
 8000c8a:	e6ae      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c8c:	fbffffff 	.word	0xfbffffff
 8000c90:	7dffffff 	.word	0x7dffffff

08000c94 <__aeabi_f2iz>:
 8000c94:	0241      	lsls	r1, r0, #9
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	0fc3      	lsrs	r3, r0, #31
 8000c9a:	0a49      	lsrs	r1, r1, #9
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	0e12      	lsrs	r2, r2, #24
 8000ca0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ca2:	dd03      	ble.n	8000cac <__aeabi_f2iz+0x18>
 8000ca4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ca6:	dd02      	ble.n	8000cae <__aeabi_f2iz+0x1a>
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <__aeabi_f2iz+0x3c>)
 8000caa:	1898      	adds	r0, r3, r2
 8000cac:	4770      	bx	lr
 8000cae:	2080      	movs	r0, #128	; 0x80
 8000cb0:	0400      	lsls	r0, r0, #16
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	2a95      	cmp	r2, #149	; 0x95
 8000cb6:	dc07      	bgt.n	8000cc8 <__aeabi_f2iz+0x34>
 8000cb8:	2096      	movs	r0, #150	; 0x96
 8000cba:	1a82      	subs	r2, r0, r2
 8000cbc:	40d1      	lsrs	r1, r2
 8000cbe:	4248      	negs	r0, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f3      	bne.n	8000cac <__aeabi_f2iz+0x18>
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	e7f1      	b.n	8000cac <__aeabi_f2iz+0x18>
 8000cc8:	3a96      	subs	r2, #150	; 0x96
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	e7f7      	b.n	8000cbe <__aeabi_f2iz+0x2a>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	7fffffff 	.word	0x7fffffff

08000cd4 <__aeabi_ui2f>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	1e04      	subs	r4, r0, #0
 8000cd8:	d00e      	beq.n	8000cf8 <__aeabi_ui2f+0x24>
 8000cda:	f000 f87d 	bl	8000dd8 <__clzsi2>
 8000cde:	239e      	movs	r3, #158	; 0x9e
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	1a1b      	subs	r3, r3, r0
 8000ce4:	2b96      	cmp	r3, #150	; 0x96
 8000ce6:	dc0c      	bgt.n	8000d02 <__aeabi_ui2f+0x2e>
 8000ce8:	2808      	cmp	r0, #8
 8000cea:	d02c      	beq.n	8000d46 <__aeabi_ui2f+0x72>
 8000cec:	3908      	subs	r1, #8
 8000cee:	408c      	lsls	r4, r1
 8000cf0:	0264      	lsls	r4, r4, #9
 8000cf2:	0a64      	lsrs	r4, r4, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e001      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2400      	movs	r4, #0
 8000cfc:	05c0      	lsls	r0, r0, #23
 8000cfe:	4320      	orrs	r0, r4
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
 8000d02:	2b99      	cmp	r3, #153	; 0x99
 8000d04:	dd0a      	ble.n	8000d1c <__aeabi_ui2f+0x48>
 8000d06:	0002      	movs	r2, r0
 8000d08:	0020      	movs	r0, r4
 8000d0a:	321b      	adds	r2, #27
 8000d0c:	4090      	lsls	r0, r2
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1e50      	subs	r0, r2, #1
 8000d12:	4182      	sbcs	r2, r0
 8000d14:	2005      	movs	r0, #5
 8000d16:	1a40      	subs	r0, r0, r1
 8000d18:	40c4      	lsrs	r4, r0
 8000d1a:	4314      	orrs	r4, r2
 8000d1c:	2905      	cmp	r1, #5
 8000d1e:	dc16      	bgt.n	8000d4e <__aeabi_ui2f+0x7a>
 8000d20:	0022      	movs	r2, r4
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d24:	4002      	ands	r2, r0
 8000d26:	0765      	lsls	r5, r4, #29
 8000d28:	d009      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d2a:	250f      	movs	r5, #15
 8000d2c:	402c      	ands	r4, r5
 8000d2e:	2c04      	cmp	r4, #4
 8000d30:	d005      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d32:	3204      	adds	r2, #4
 8000d34:	0154      	lsls	r4, r2, #5
 8000d36:	d502      	bpl.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d38:	239f      	movs	r3, #159	; 0x9f
 8000d3a:	4002      	ands	r2, r0
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	0192      	lsls	r2, r2, #6
 8000d40:	0a54      	lsrs	r4, r2, #9
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	e7da      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d46:	0264      	lsls	r4, r4, #9
 8000d48:	2096      	movs	r0, #150	; 0x96
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	e7d6      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d4e:	1f4a      	subs	r2, r1, #5
 8000d50:	4094      	lsls	r4, r2
 8000d52:	0022      	movs	r2, r4
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d56:	4002      	ands	r2, r0
 8000d58:	0765      	lsls	r5, r4, #29
 8000d5a:	d0f0      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d5c:	e7e5      	b.n	8000d2a <__aeabi_ui2f+0x56>
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	fbffffff 	.word	0xfbffffff

08000d64 <__aeabi_cfrcmple>:
 8000d64:	4684      	mov	ip, r0
 8000d66:	0008      	movs	r0, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e7ff      	b.n	8000d6c <__aeabi_cfcmpeq>

08000d6c <__aeabi_cfcmpeq>:
 8000d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d6e:	f000 f8c9 	bl	8000f04 <__lesf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d401      	bmi.n	8000d7a <__aeabi_cfcmpeq+0xe>
 8000d76:	2100      	movs	r1, #0
 8000d78:	42c8      	cmn	r0, r1
 8000d7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d7c <__aeabi_fcmpeq>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	f000 f855 	bl	8000e2c <__eqsf2>
 8000d82:	4240      	negs	r0, r0
 8000d84:	3001      	adds	r0, #1
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <__aeabi_fcmplt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f8bb 	bl	8000f04 <__lesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	db01      	blt.n	8000d96 <__aeabi_fcmplt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__aeabi_fcmple>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f8b1 	bl	8000f04 <__lesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	dd01      	ble.n	8000daa <__aeabi_fcmple+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <__aeabi_fcmpgt>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	f000 f861 	bl	8000e78 <__gesf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	dc01      	bgt.n	8000dbe <__aeabi_fcmpgt+0xe>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	bd10      	pop	{r4, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)

08000dc4 <__aeabi_fcmpge>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	f000 f857 	bl	8000e78 <__gesf2>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	da01      	bge.n	8000dd2 <__aeabi_fcmpge+0xe>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)

08000dd8 <__clzsi2>:
 8000dd8:	211c      	movs	r1, #28
 8000dda:	2301      	movs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0xe>
 8000de2:	0c00      	lsrs	r0, r0, #16
 8000de4:	3910      	subs	r1, #16
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d301      	bcc.n	8000df0 <__clzsi2+0x18>
 8000dec:	0a00      	lsrs	r0, r0, #8
 8000dee:	3908      	subs	r1, #8
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d301      	bcc.n	8000dfa <__clzsi2+0x22>
 8000df6:	0900      	lsrs	r0, r0, #4
 8000df8:	3904      	subs	r1, #4
 8000dfa:	a202      	add	r2, pc, #8	; (adr r2, 8000e04 <__clzsi2+0x2c>)
 8000dfc:	5c10      	ldrb	r0, [r2, r0]
 8000dfe:	1840      	adds	r0, r0, r1
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	02020304 	.word	0x02020304
 8000e08:	01010101 	.word	0x01010101
	...

08000e14 <__clzdi2>:
 8000e14:	b510      	push	{r4, lr}
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d103      	bne.n	8000e22 <__clzdi2+0xe>
 8000e1a:	f7ff ffdd 	bl	8000dd8 <__clzsi2>
 8000e1e:	3020      	adds	r0, #32
 8000e20:	e002      	b.n	8000e28 <__clzdi2+0x14>
 8000e22:	0008      	movs	r0, r1
 8000e24:	f7ff ffd8 	bl	8000dd8 <__clzsi2>
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)

08000e2c <__eqsf2>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	0042      	lsls	r2, r0, #1
 8000e30:	0245      	lsls	r5, r0, #9
 8000e32:	024e      	lsls	r6, r1, #9
 8000e34:	004c      	lsls	r4, r1, #1
 8000e36:	0fc3      	lsrs	r3, r0, #31
 8000e38:	0a6d      	lsrs	r5, r5, #9
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	0e12      	lsrs	r2, r2, #24
 8000e3e:	0a76      	lsrs	r6, r6, #9
 8000e40:	0e24      	lsrs	r4, r4, #24
 8000e42:	0fc9      	lsrs	r1, r1, #31
 8000e44:	2aff      	cmp	r2, #255	; 0xff
 8000e46:	d006      	beq.n	8000e56 <__eqsf2+0x2a>
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d003      	beq.n	8000e54 <__eqsf2+0x28>
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d101      	bne.n	8000e54 <__eqsf2+0x28>
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	d006      	beq.n	8000e62 <__eqsf2+0x36>
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d1fc      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5a:	2cff      	cmp	r4, #255	; 0xff
 8000e5c:	d1fa      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d1f8      	bne.n	8000e54 <__eqsf2+0x28>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d006      	beq.n	8000e74 <__eqsf2+0x48>
 8000e66:	2001      	movs	r0, #1
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	d1f3      	bne.n	8000e54 <__eqsf2+0x28>
 8000e6c:	0028      	movs	r0, r5
 8000e6e:	1e43      	subs	r3, r0, #1
 8000e70:	4198      	sbcs	r0, r3
 8000e72:	e7ef      	b.n	8000e54 <__eqsf2+0x28>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7ed      	b.n	8000e54 <__eqsf2+0x28>

08000e78 <__gesf2>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	0042      	lsls	r2, r0, #1
 8000e7c:	0245      	lsls	r5, r0, #9
 8000e7e:	024e      	lsls	r6, r1, #9
 8000e80:	004c      	lsls	r4, r1, #1
 8000e82:	0fc3      	lsrs	r3, r0, #31
 8000e84:	0a6d      	lsrs	r5, r5, #9
 8000e86:	0e12      	lsrs	r2, r2, #24
 8000e88:	0a76      	lsrs	r6, r6, #9
 8000e8a:	0e24      	lsrs	r4, r4, #24
 8000e8c:	0fc8      	lsrs	r0, r1, #31
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d01b      	beq.n	8000eca <__gesf2+0x52>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d00e      	beq.n	8000eb4 <__gesf2+0x3c>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d11b      	bne.n	8000ed2 <__gesf2+0x5a>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d101      	bne.n	8000ea2 <__gesf2+0x2a>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d01c      	beq.n	8000edc <__gesf2+0x64>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d00c      	beq.n	8000ec0 <__gesf2+0x48>
 8000ea6:	4283      	cmp	r3, r0
 8000ea8:	d01c      	beq.n	8000ee4 <__gesf2+0x6c>
 8000eaa:	2102      	movs	r1, #2
 8000eac:	1e58      	subs	r0, r3, #1
 8000eae:	4008      	ands	r0, r1
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d122      	bne.n	8000efe <__gesf2+0x86>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d1f4      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d1f2      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d1f6      	bne.n	8000eb2 <__gesf2+0x3a>
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	e7f3      	b.n	8000eb2 <__gesf2+0x3a>
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d117      	bne.n	8000efe <__gesf2+0x86>
 8000ece:	2cff      	cmp	r4, #255	; 0xff
 8000ed0:	d0f0      	beq.n	8000eb4 <__gesf2+0x3c>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d1e7      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d1e5      	bne.n	8000ea6 <__gesf2+0x2e>
 8000eda:	e7e6      	b.n	8000eaa <__gesf2+0x32>
 8000edc:	2000      	movs	r0, #0
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0e7      	beq.n	8000eb2 <__gesf2+0x3a>
 8000ee2:	e7e2      	b.n	8000eaa <__gesf2+0x32>
 8000ee4:	42a2      	cmp	r2, r4
 8000ee6:	dc05      	bgt.n	8000ef4 <__gesf2+0x7c>
 8000ee8:	dbea      	blt.n	8000ec0 <__gesf2+0x48>
 8000eea:	42b5      	cmp	r5, r6
 8000eec:	d802      	bhi.n	8000ef4 <__gesf2+0x7c>
 8000eee:	d3e7      	bcc.n	8000ec0 <__gesf2+0x48>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7de      	b.n	8000eb2 <__gesf2+0x3a>
 8000ef4:	4243      	negs	r3, r0
 8000ef6:	4158      	adcs	r0, r3
 8000ef8:	0040      	lsls	r0, r0, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7d9      	b.n	8000eb2 <__gesf2+0x3a>
 8000efe:	2002      	movs	r0, #2
 8000f00:	4240      	negs	r0, r0
 8000f02:	e7d6      	b.n	8000eb2 <__gesf2+0x3a>

08000f04 <__lesf2>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0245      	lsls	r5, r0, #9
 8000f0a:	024e      	lsls	r6, r1, #9
 8000f0c:	004c      	lsls	r4, r1, #1
 8000f0e:	0fc3      	lsrs	r3, r0, #31
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a76      	lsrs	r6, r6, #9
 8000f16:	0e24      	lsrs	r4, r4, #24
 8000f18:	0fc8      	lsrs	r0, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	; 0xff
 8000f1c:	d00b      	beq.n	8000f36 <__lesf2+0x32>
 8000f1e:	2cff      	cmp	r4, #255	; 0xff
 8000f20:	d00d      	beq.n	8000f3e <__lesf2+0x3a>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11f      	bne.n	8000f66 <__lesf2+0x62>
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d116      	bne.n	8000f58 <__lesf2+0x54>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d114      	bne.n	8000f58 <__lesf2+0x54>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d010      	beq.n	8000f56 <__lesf2+0x52>
 8000f34:	e009      	b.n	8000f4a <__lesf2+0x46>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d10c      	bne.n	8000f54 <__lesf2+0x50>
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d113      	bne.n	8000f66 <__lesf2+0x62>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d108      	bne.n	8000f54 <__lesf2+0x50>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d008      	beq.n	8000f58 <__lesf2+0x54>
 8000f46:	4283      	cmp	r3, r0
 8000f48:	d012      	beq.n	8000f70 <__lesf2+0x6c>
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	1e58      	subs	r0, r3, #1
 8000f4e:	4008      	ands	r0, r1
 8000f50:	3801      	subs	r0, #1
 8000f52:	e000      	b.n	8000f56 <__lesf2+0x52>
 8000f54:	2002      	movs	r0, #2
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d1f4      	bne.n	8000f46 <__lesf2+0x42>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1fa      	bne.n	8000f56 <__lesf2+0x52>
 8000f60:	2001      	movs	r0, #1
 8000f62:	4240      	negs	r0, r0
 8000f64:	e7f7      	b.n	8000f56 <__lesf2+0x52>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d1ed      	bne.n	8000f46 <__lesf2+0x42>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d1eb      	bne.n	8000f46 <__lesf2+0x42>
 8000f6e:	e7ec      	b.n	8000f4a <__lesf2+0x46>
 8000f70:	42a2      	cmp	r2, r4
 8000f72:	dc05      	bgt.n	8000f80 <__lesf2+0x7c>
 8000f74:	dbf2      	blt.n	8000f5c <__lesf2+0x58>
 8000f76:	42b5      	cmp	r5, r6
 8000f78:	d802      	bhi.n	8000f80 <__lesf2+0x7c>
 8000f7a:	d3ef      	bcc.n	8000f5c <__lesf2+0x58>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	e7ea      	b.n	8000f56 <__lesf2+0x52>
 8000f80:	4243      	negs	r3, r0
 8000f82:	4158      	adcs	r0, r3
 8000f84:	0040      	lsls	r0, r0, #1
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e5      	b.n	8000f56 <__lesf2+0x52>
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <_Conversion>:
	DIVISION = 1
} ArithmeticOperation;
/* Variables -----------------------------------------------------------------*/
/* Private Function definition -----------------------------------------------*/
uint32_t _Conversion(uint32_t ValueToConvert, float ConversionFactor, ArithmeticOperation ArithmeticOperation)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
	float TemporaryResult;

	if(ArithmeticOperation == MULTIPLICATION)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10a      	bne.n	8000fb8 <_Conversion+0x2c>
		TemporaryResult = ValueToConvert * ConversionFactor;
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fe96 	bl	8000cd4 <__aeabi_ui2f>
 8000fa8:	1c03      	adds	r3, r0, #0
 8000faa:	1c19      	adds	r1, r3, #0
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fb83 	bl	80006b8 <__aeabi_fmul>
 8000fb2:	1c03      	adds	r3, r0, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e00d      	b.n	8000fd4 <_Conversion+0x48>
	else if (ArithmeticOperation == DIVISION)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d109      	bne.n	8000fd4 <_Conversion+0x48>
		TemporaryResult = ValueToConvert / ConversionFactor;
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fe87 	bl	8000cd4 <__aeabi_ui2f>
 8000fc6:	1c03      	adds	r3, r0, #0
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	1c18      	adds	r0, r3, #0
 8000fcc:	f7ff fa5a 	bl	8000484 <__aeabi_fdiv>
 8000fd0:	1c03      	adds	r3, r0, #0
 8000fd2:	617b      	str	r3, [r7, #20]

	return TemporaryResult;
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff f971 	bl	80002bc <__aeabi_f2uiz>
 8000fda:	0003      	movs	r3, r0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b006      	add	sp, #24
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <INA233_Init>:

/* Public Function -----------------------------------------------------------*/
void INA233_Init(INA233* Self, uint16_t Address)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	000a      	movs	r2, r1
 8000fee:	1cbb      	adds	r3, r7, #2
 8000ff0:	801a      	strh	r2, [r3, #0]
	Self->Address 		= Address;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1cba      	adds	r2, r7, #2
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	801a      	strh	r2, [r3, #0]
	Self->Calibration 	= 2048;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	805a      	strh	r2, [r3, #2]
	Self->_VIN_LSB_mV 	= 1.25; //=1.25
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <INA233_Init+0x50>)
 8001006:	605a      	str	r2, [r3, #4]
	Self->IIN_LSB_uV 	= 2.50;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <INA233_Init+0x54>)
 800100c:	621a      	str	r2, [r3, #32]

	Self->VIN_OV_mV		= 40960 - 1; //Massimo valore. Se metto 40960 invece di 40959 ottengo 0x8000 invece di 0x7FFF
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <INA233_Init+0x58>)
 8001012:	61da      	str	r2, [r3, #28]
	INA233_VIN_OV_mV_Conversion(Self);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f84e 	bl	80010b8 <INA233_VIN_OV_mV_Conversion>
	Self->IIN_OV_uV		= 81920 - 1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <INA233_Init+0x5c>)
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
	INA233_IIN_OV_uV_Conversion(Self);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f86d 	bl	8001104 <INA233_IIN_OV_uV_Conversion>
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	3fa00000 	.word	0x3fa00000
 8001038:	40200000 	.word	0x40200000
 800103c:	00009fff 	.word	0x00009fff
 8001040:	00013fff 	.word	0x00013fff

08001044 <INA233_WARN_LIMIT_Update>:

void INA233_WARN_LIMIT_Update(INA233* Self)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	INA233_VIN_UV_mV_Conversion(Self);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0018      	movs	r0, r3
 8001050:	f000 f81f 	bl	8001092 <INA233_VIN_UV_mV_Conversion>
	INA233_VIN_OV_mV_Conversion(Self);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f82e 	bl	80010b8 <INA233_VIN_OV_mV_Conversion>
	INA233_IIN_OV_uV_Conversion(Self);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f850 	bl	8001104 <INA233_IIN_OV_uV_Conversion>
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <INA233_VIN_Conversion>:

void INA233_VIN_Conversion(INA233* Self)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	Self->VIN_mV = _Conversion(Self->VIN, Self->_VIN_LSB_mV, MULTIPLICATION);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6898      	ldr	r0, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	1c19      	adds	r1, r3, #0
 8001080:	f7ff ff84 	bl	8000f8c <_Conversion>
 8001084:	0002      	movs	r2, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	615a      	str	r2, [r3, #20]
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <INA233_VIN_UV_mV_Conversion>:

void INA233_VIN_UV_mV_Conversion(INA233* Self)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	Self->VIN_UV = _Conversion(Self->VIN_UV_mV, Self->_VIN_LSB_mV, DIVISION);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6998      	ldr	r0, [r3, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	1c19      	adds	r1, r3, #0
 80010a6:	f7ff ff71 	bl	8000f8c <_Conversion>
 80010aa:	0002      	movs	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <INA233_VIN_OV_mV_Conversion>:

void INA233_VIN_OV_mV_Conversion(INA233* Self)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	Self->VIN_OV = _Conversion(Self->VIN_OV_mV, Self->_VIN_LSB_mV, DIVISION);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d8      	ldr	r0, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	1c19      	adds	r1, r3, #0
 80010cc:	f7ff ff5e 	bl	8000f8c <_Conversion>
 80010d0:	0002      	movs	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}

080010de <INA233_IIN_Conversion>:

void INA233_IIN_Conversion(INA233* Self)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	Self->IIN_uV = _Conversion(Self->IIN, Self->IIN_LSB_uV, MULTIPLICATION);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	2200      	movs	r2, #0
 80010f0:	1c19      	adds	r1, r3, #0
 80010f2:	f7ff ff4b 	bl	8000f8c <_Conversion>
 80010f6:	0002      	movs	r2, r0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <INA233_IIN_OV_uV_Conversion>:

void INA233_IIN_OV_uV_Conversion(INA233* Self)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	Self->IIN_OV = _Conversion(Self->IIN_OV_uV, Self->IIN_LSB_uV, DIVISION);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	2201      	movs	r2, #1
 8001116:	1c19      	adds	r1, r3, #0
 8001118:	f7ff ff38 	bl	8000f8c <_Conversion>
 800111c:	0002      	movs	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f001 f813 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f9ab 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 fa95 	bl	8001668 <MX_GPIO_Init>
  MX_I2C2_Init();
 800113e:	f000 fa53 	bl	80015e8 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001142:	f000 fa11 	bl	8001568 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MYGPIO_ADDRESS_Init((MyGPIO*) ADDRESS);
 8001146:	4bc5      	ldr	r3, [pc, #788]	; (800145c <main+0x330>)
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fbfd 	bl	8001948 <MYGPIO_ADDRESS_Init>
  MYGPIO_ALM_RELE_Init((MyGPIO*) ALM_RELE);
 800114e:	4bc4      	ldr	r3, [pc, #784]	; (8001460 <main+0x334>)
 8001150:	0018      	movs	r0, r3
 8001152:	f000 fb69 	bl	8001828 <MYGPIO_ALM_RELE_Init>
  MYGPIO_CMD_RELE_Init((MyGPIO*) CMD_RELE);
 8001156:	4bc3      	ldr	r3, [pc, #780]	; (8001464 <main+0x338>)
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fb95 	bl	8001888 <MYGPIO_CMD_RELE_Init>
  MYGPIO_FAULT_RELE_Init((MyGPIO*) FAULT_RELE);
 800115e:	4bc2      	ldr	r3, [pc, #776]	; (8001468 <main+0x33c>)
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fbc1 	bl	80018e8 <MYGPIO_FAULT_RELE_Init>
  MYGPIO_EXT_INT_Init((MyGPIO*) &EXT_INT);
 8001166:	4bc1      	ldr	r3, [pc, #772]	; (800146c <main+0x340>)
 8001168:	0018      	movs	r0, r3
 800116a:	f000 fc11 	bl	8001990 <MYGPIO_EXT_INT_Init>

  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e015      	b.n	80011a2 <main+0x76>
	  INA233_Init(&INA[i], (0x40 + i - 1) << 1);
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	435a      	muls	r2, r3
 800117e:	4bbc      	ldr	r3, [pc, #752]	; (8001470 <main+0x344>)
 8001180:	18d2      	adds	r2, r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	333f      	adds	r3, #63	; 0x3f
 800118a:	b29b      	uxth	r3, r3
 800118c:	18db      	adds	r3, r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f7ff ff26 	bl	8000fe4 <INA233_Init>
  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	3201      	adds	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d9e5      	bls.n	8001176 <main+0x4a>

  //Esempio di aggiornamento warn limit
  INA[2].VIN_UV_mV = 1000;
 80011aa:	4bb1      	ldr	r3, [pc, #708]	; (8001470 <main+0x344>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	22fa      	movs	r2, #250	; 0xfa
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	505a      	str	r2, [r3, r1]
  INA[2].VIN_OV_mV = 2000;
 80011b4:	4bae      	ldr	r3, [pc, #696]	; (8001470 <main+0x344>)
 80011b6:	2184      	movs	r1, #132	; 0x84
 80011b8:	22fa      	movs	r2, #250	; 0xfa
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	505a      	str	r2, [r3, r1]
  INA[2].IIN_OV_uV = 80000;
 80011be:	4bac      	ldr	r3, [pc, #688]	; (8001470 <main+0x344>)
 80011c0:	2298      	movs	r2, #152	; 0x98
 80011c2:	49ac      	ldr	r1, [pc, #688]	; (8001474 <main+0x348>)
 80011c4:	5099      	str	r1, [r3, r2]

  INA[1].VIN_UV_mV = 1000;
 80011c6:	4baa      	ldr	r3, [pc, #680]	; (8001470 <main+0x344>)
 80011c8:	22fa      	movs	r2, #250	; 0xfa
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	64da      	str	r2, [r3, #76]	; 0x4c
  INA[1].VIN_OV_mV = 2000;
 80011ce:	4ba8      	ldr	r3, [pc, #672]	; (8001470 <main+0x344>)
 80011d0:	22fa      	movs	r2, #250	; 0xfa
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	651a      	str	r2, [r3, #80]	; 0x50

//  for(uint8_t i = 1; i < INA233_SIZE; i++)
//	  INA233_WARN_LIMIT_Update(&INA[i]);

  for(uint8_t i = 1; i < INA233_SIZE; i++)
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e071      	b.n	80012c2 <main+0x196>
  {
	  INA233_WARN_LIMIT_Update(&INA[i]);
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2234      	movs	r2, #52	; 0x34
 80011e4:	435a      	muls	r2, r3
 80011e6:	4ba2      	ldr	r3, [pc, #648]	; (8001470 <main+0x344>)
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff ff2a 	bl	8001044 <INA233_WARN_LIMIT_Update>

	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, MFR_CALIBRATION, 1, (uint8_t *)&INA[i].Calibration, 2, 1000);
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <main+0x344>)
 80011f6:	2134      	movs	r1, #52	; 0x34
 80011f8:	434a      	muls	r2, r1
 80011fa:	5ad1      	ldrh	r1, [r2, r3]
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2234      	movs	r2, #52	; 0x34
 8001202:	435a      	muls	r2, r3
 8001204:	4b9a      	ldr	r3, [pc, #616]	; (8001470 <main+0x344>)
 8001206:	18d3      	adds	r3, r2, r3
 8001208:	3302      	adds	r3, #2
 800120a:	489b      	ldr	r0, [pc, #620]	; (8001478 <main+0x34c>)
 800120c:	22fa      	movs	r2, #250	; 0xfa
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	9202      	str	r2, [sp, #8]
 8001212:	2202      	movs	r2, #2
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	22d4      	movs	r2, #212	; 0xd4
 800121c:	f001 fcaa 	bl	8002b74 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, VIN_UV_WARN_LIMIT, 1, (uint8_t *)&INA[i].VIN_UV, 2, 1000);
 8001220:	1dbb      	adds	r3, r7, #6
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	4b92      	ldr	r3, [pc, #584]	; (8001470 <main+0x344>)
 8001226:	2134      	movs	r1, #52	; 0x34
 8001228:	434a      	muls	r2, r1
 800122a:	5ad1      	ldrh	r1, [r2, r3]
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2234      	movs	r2, #52	; 0x34
 8001232:	4353      	muls	r3, r2
 8001234:	3308      	adds	r3, #8
 8001236:	001a      	movs	r2, r3
 8001238:	4b8d      	ldr	r3, [pc, #564]	; (8001470 <main+0x344>)
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	3304      	adds	r3, #4
 800123e:	488e      	ldr	r0, [pc, #568]	; (8001478 <main+0x34c>)
 8001240:	22fa      	movs	r2, #250	; 0xfa
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	9202      	str	r2, [sp, #8]
 8001246:	2202      	movs	r2, #2
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	2258      	movs	r2, #88	; 0x58
 8001250:	f001 fc90 	bl	8002b74 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, VIN_OV_WARN_LIMIT, 1, (uint8_t *)&INA[i].VIN_OV, 2, 1000);
 8001254:	1dbb      	adds	r3, r7, #6
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	4b85      	ldr	r3, [pc, #532]	; (8001470 <main+0x344>)
 800125a:	2134      	movs	r1, #52	; 0x34
 800125c:	434a      	muls	r2, r1
 800125e:	5ad1      	ldrh	r1, [r2, r3]
 8001260:	1dbb      	adds	r3, r7, #6
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2234      	movs	r2, #52	; 0x34
 8001266:	4353      	muls	r3, r2
 8001268:	3310      	adds	r3, #16
 800126a:	001a      	movs	r2, r3
 800126c:	4b80      	ldr	r3, [pc, #512]	; (8001470 <main+0x344>)
 800126e:	18d3      	adds	r3, r2, r3
 8001270:	4881      	ldr	r0, [pc, #516]	; (8001478 <main+0x34c>)
 8001272:	22fa      	movs	r2, #250	; 0xfa
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	9202      	str	r2, [sp, #8]
 8001278:	2202      	movs	r2, #2
 800127a:	9201      	str	r2, [sp, #4]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	2257      	movs	r2, #87	; 0x57
 8001282:	f001 fc77 	bl	8002b74 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, IOUT_OC_WARN_LIMIT, 1, (uint8_t *)&INA[i].IIN_OV, 2, 1000);
 8001286:	1dbb      	adds	r3, r7, #6
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b79      	ldr	r3, [pc, #484]	; (8001470 <main+0x344>)
 800128c:	2134      	movs	r1, #52	; 0x34
 800128e:	434a      	muls	r2, r1
 8001290:	5ad1      	ldrh	r1, [r2, r3]
 8001292:	1dbb      	adds	r3, r7, #6
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2234      	movs	r2, #52	; 0x34
 8001298:	4353      	muls	r3, r2
 800129a:	3328      	adds	r3, #40	; 0x28
 800129c:	001a      	movs	r2, r3
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <main+0x344>)
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	4875      	ldr	r0, [pc, #468]	; (8001478 <main+0x34c>)
 80012a4:	22fa      	movs	r2, #250	; 0xfa
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	9202      	str	r2, [sp, #8]
 80012aa:	2202      	movs	r2, #2
 80012ac:	9201      	str	r2, [sp, #4]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	224a      	movs	r2, #74	; 0x4a
 80012b4:	f001 fc5e 	bl	8002b74 <HAL_I2C_Mem_Write>
  for(uint8_t i = 1; i < INA233_SIZE; i++)
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	3201      	adds	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	1dbb      	adds	r3, r7, #6
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d989      	bls.n	80011de <main+0xb2>
  }

  MYTIMELOOP_Init(&INA_TimeLoop, 500, uwTick);
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <main+0x350>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	23fa      	movs	r3, #250	; 0xfa
 80012d0:	0059      	lsls	r1, r3, #1
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <main+0x354>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fdde 	bl	8001e96 <MYTIMELOOP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Address update
	  for(uint8_t i = 1; i < ADDRESS_SIZE; i++)
 80012da:	1d7b      	adds	r3, r7, #5
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e00c      	b.n	80012fc <main+0x1d0>
		  MYGPIO_PinState_Update(&ADDRESS[i]);
 80012e2:	1d7b      	adds	r3, r7, #5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	4b5c      	ldr	r3, [pc, #368]	; (800145c <main+0x330>)
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fdb0 	bl	8001e52 <MYGPIO_PinState_Update>
	  for(uint8_t i = 1; i < ADDRESS_SIZE; i++)
 80012f2:	1d7b      	adds	r3, r7, #5
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	1d7b      	adds	r3, r7, #5
 80012f8:	3201      	adds	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	1d7b      	adds	r3, r7, #5
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d9ee      	bls.n	80012e2 <main+0x1b6>
	  CONTROL_1B[ADDRESS_PinState] = (ADDRESS[1].PinState << 0) + (ADDRESS[2].PinState << 1) + (ADDRESS[3].PinState << 2);
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <main+0x330>)
 8001306:	7bda      	ldrb	r2, [r3, #15]
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <main+0x330>)
 800130a:	7ddb      	ldrb	r3, [r3, #23]
 800130c:	18db      	adds	r3, r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b51      	ldr	r3, [pc, #324]	; (800145c <main+0x330>)
 8001316:	7fdb      	ldrb	r3, [r3, #31]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <main+0x358>)
 8001322:	705a      	strb	r2, [r3, #1]
	  MX_GPIO_I2C_OwnAddress1_Update(&hi2c1, ADDRESS[1].PinState, ADDRESS[2].PinState, ADDRESS[3].PinState);
 8001324:	4b4d      	ldr	r3, [pc, #308]	; (800145c <main+0x330>)
 8001326:	7bd9      	ldrb	r1, [r3, #15]
 8001328:	4b4c      	ldr	r3, [pc, #304]	; (800145c <main+0x330>)
 800132a:	7dda      	ldrb	r2, [r3, #23]
 800132c:	4b4b      	ldr	r3, [pc, #300]	; (800145c <main+0x330>)
 800132e:	7fdb      	ldrb	r3, [r3, #31]
 8001330:	4855      	ldr	r0, [pc, #340]	; (8001488 <main+0x35c>)
 8001332:	f000 fb3f 	bl	80019b4 <MX_GPIO_I2C_OwnAddress1_Update>
	  //Abilita la possibilità di rispondere in I2C
	  HAL_I2C_EnableListen_IT(&hi2c1);
 8001336:	4b54      	ldr	r3, [pc, #336]	; (8001488 <main+0x35c>)
 8001338:	0018      	movs	r0, r3
 800133a:	f001 ffff 	bl	800333c <HAL_I2C_EnableListen_IT>
	  CONTROL_1B[ALM_RELE_PinState] = (ALM_RELE[1].PinState << 0) + (ALM_RELE[2].PinState << 1) + (ALM_RELE[3].PinState << 2) + (ALM_RELE[4].PinState << 3);
	  CONTROL_1B[FAULT_RELE_PinState] = (FAULT_RELE[1].PinState << 0) + (FAULT_RELE[2].PinState << 1) + (FAULT_RELE[3].PinState << 2) + (FAULT_RELE[4].PinState << 3);
#endif

	  //Comando Rele Update
	  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e018      	b.n	8001378 <main+0x24c>
	  {
		  CMD_RELE_Update(&CMD_RELE[i], i, CONTROL_1B[CMD_RELE_PinState]);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	00da      	lsls	r2, r3, #3
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <main+0x338>)
 800134e:	18d0      	adds	r0, r2, r3
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <main+0x358>)
 8001352:	791a      	ldrb	r2, [r3, #4]
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	f000 fb86 	bl	8001a6a <CMD_RELE_Update>
		  MYGPIO_PinState_Update(&CMD_RELE[i]);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <main+0x338>)
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	0018      	movs	r0, r3
 800136a:	f000 fd72 	bl	8001e52 <MYGPIO_PinState_Update>
	  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	3201      	adds	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b04      	cmp	r3, #4
 800137e:	d9e2      	bls.n	8001346 <main+0x21a>
	  }

	  if(MYTIMELOOP_Run(&INA_TimeLoop, uwTick))
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <main+0x350>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <main+0x354>)
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f000 fd9b 	bl	8001ec4 <MYTIMELOOP_Run>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d0a3      	beq.n	80012da <main+0x1ae>
	  {
		  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001392:	1cfb      	adds	r3, r7, #3
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e05a      	b.n	8001450 <main+0x324>
		  {
			  //azzerra i fault
			  i2c2_Data = CLEAR_FAULTS;
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <main+0x360>)
 800139c:	2203      	movs	r2, #3
 800139e:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c2, INA[i].Address, (uint8_t *)&i2c2_Data, 1, 1000);
 80013a0:	1cfb      	adds	r3, r7, #3
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <main+0x344>)
 80013a6:	2134      	movs	r1, #52	; 0x34
 80013a8:	434a      	muls	r2, r1
 80013aa:	5ad1      	ldrh	r1, [r2, r3]
 80013ac:	4a37      	ldr	r2, [pc, #220]	; (800148c <main+0x360>)
 80013ae:	4832      	ldr	r0, [pc, #200]	; (8001478 <main+0x34c>)
 80013b0:	23fa      	movs	r3, #250	; 0xfa
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	f001 fad4 	bl	8002964 <HAL_I2C_Master_Transmit>
			  //interroga l'adc
			  HAL_I2C_Mem_Read(&hi2c2, INA[i].Address, READ_VIN, 1, (uint8_t *)&INA[i].VIN, 2, 1000);
 80013bc:	1cfb      	adds	r3, r7, #3
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <main+0x344>)
 80013c2:	2134      	movs	r1, #52	; 0x34
 80013c4:	434a      	muls	r2, r1
 80013c6:	5ad1      	ldrh	r1, [r2, r3]
 80013c8:	1cfb      	adds	r3, r7, #3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2234      	movs	r2, #52	; 0x34
 80013ce:	4353      	muls	r3, r2
 80013d0:	3308      	adds	r3, #8
 80013d2:	001a      	movs	r2, r3
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <main+0x344>)
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	4827      	ldr	r0, [pc, #156]	; (8001478 <main+0x34c>)
 80013da:	22fa      	movs	r2, #250	; 0xfa
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	9202      	str	r2, [sp, #8]
 80013e0:	2202      	movs	r2, #2
 80013e2:	9201      	str	r2, [sp, #4]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2288      	movs	r2, #136	; 0x88
 80013ea:	f001 fcf1 	bl	8002dd0 <HAL_I2C_Mem_Read>
			  HAL_I2C_Mem_Read(&hi2c2, INA[i].Address, READ_IIN, 1, (uint8_t *)&INA[i].IIN, 2, 1000);
 80013ee:	1cfb      	adds	r3, r7, #3
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <main+0x344>)
 80013f4:	2134      	movs	r1, #52	; 0x34
 80013f6:	434a      	muls	r2, r1
 80013f8:	5ad1      	ldrh	r1, [r2, r3]
 80013fa:	1cfb      	adds	r3, r7, #3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2234      	movs	r2, #52	; 0x34
 8001400:	4353      	muls	r3, r2
 8001402:	3320      	adds	r3, #32
 8001404:	001a      	movs	r2, r3
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <main+0x344>)
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	3304      	adds	r3, #4
 800140c:	481a      	ldr	r0, [pc, #104]	; (8001478 <main+0x34c>)
 800140e:	22fa      	movs	r2, #250	; 0xfa
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	9202      	str	r2, [sp, #8]
 8001414:	2202      	movs	r2, #2
 8001416:	9201      	str	r2, [sp, #4]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	2289      	movs	r2, #137	; 0x89
 800141e:	f001 fcd7 	bl	8002dd0 <HAL_I2C_Mem_Read>
			  //converte i valori ottenuti
			  INA233_VIN_Conversion(&INA[i]);
 8001422:	1cfb      	adds	r3, r7, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2234      	movs	r2, #52	; 0x34
 8001428:	435a      	muls	r2, r3
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <main+0x344>)
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff fe1c 	bl	800106c <INA233_VIN_Conversion>
			  INA233_IIN_Conversion(&INA[i]);
 8001434:	1cfb      	adds	r3, r7, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2234      	movs	r2, #52	; 0x34
 800143a:	435a      	muls	r2, r3
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <main+0x344>)
 800143e:	18d3      	adds	r3, r2, r3
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fe4c 	bl	80010de <INA233_IIN_Conversion>
		  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001446:	1cfb      	adds	r3, r7, #3
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	1cfb      	adds	r3, r7, #3
 800144c:	3201      	adds	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	1cfb      	adds	r3, r7, #3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b04      	cmp	r3, #4
 8001456:	d9a0      	bls.n	800139a <main+0x26e>
	  for(uint8_t i = 1; i < ADDRESS_SIZE; i++)
 8001458:	e73f      	b.n	80012da <main+0x1ae>
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	20000148 	.word	0x20000148
 8001460:	200000d0 	.word	0x200000d0
 8001464:	20000120 	.word	0x20000120
 8001468:	200000f8 	.word	0x200000f8
 800146c:	20000168 	.word	0x20000168
 8001470:	20000170 	.word	0x20000170
 8001474:	00013880 	.word	0x00013880
 8001478:	2000007c 	.word	0x2000007c
 800147c:	20000404 	.word	0x20000404
 8001480:	200003f4 	.word	0x200003f4
 8001484:	20000274 	.word	0x20000274
 8001488:	20000028 	.word	0x20000028
 800148c:	200003fc 	.word	0x200003fc

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b09b      	sub	sp, #108	; 0x6c
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	2434      	movs	r4, #52	; 0x34
 8001498:	193b      	adds	r3, r7, r4
 800149a:	0018      	movs	r0, r3
 800149c:	2334      	movs	r3, #52	; 0x34
 800149e:	001a      	movs	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	f004 fc07 	bl	8005cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a6:	2320      	movs	r3, #32
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	0018      	movs	r0, r3
 80014ac:	2314      	movs	r3, #20
 80014ae:	001a      	movs	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	f004 fbff 	bl	8005cb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	0018      	movs	r0, r3
 80014ba:	231c      	movs	r3, #28
 80014bc:	001a      	movs	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	f004 fbf8 	bl	8005cb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <SystemClock_Config+0xd0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <SystemClock_Config+0xd4>)
 80014ca:	401a      	ands	r2, r3
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <SystemClock_Config+0xd0>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0109      	lsls	r1, r1, #4
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014d6:	0021      	movs	r1, r4
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2210      	movs	r2, #16
 80014dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2201      	movs	r2, #1
 80014e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	22a0      	movs	r2, #160	; 0xa0
 80014ee:	0212      	lsls	r2, r2, #8
 80014f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	0018      	movs	r0, r3
 80014fc:	f003 fd48 	bl	8004f90 <HAL_RCC_OscConfig>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001504:	f000 fc86 	bl	8001e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	2120      	movs	r1, #32
 800150a:	187b      	adds	r3, r7, r1
 800150c:	220f      	movs	r2, #15
 800150e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2100      	movs	r1, #0
 800152c:	0018      	movs	r0, r3
 800152e:	f004 f899 	bl	8005664 <HAL_RCC_ClockConfig>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001536:	f000 fc6d 	bl	8001e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2208      	movs	r2, #8
 800153e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	0018      	movs	r0, r3
 800154a:	f004 fa79 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001552:	f000 fc5f 	bl	8001e14 <Error_Handler>
  }
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b01b      	add	sp, #108	; 0x6c
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	40007000 	.word	0x40007000
 8001564:	ffffe7ff 	.word	0xffffe7ff

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_I2C1_Init+0x78>)
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <MX_I2C1_Init+0x7c>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001574:	22e1      	movs	r2, #225	; 0xe1
 8001576:	00d2      	lsls	r2, r2, #3
 8001578:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 128;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_I2C1_Init+0x78>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001582:	2201      	movs	r2, #1
 8001584:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_I2C1_Init+0x78>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_I2C1_Init+0x78>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 f946 	bl	8002838 <HAL_I2C_Init>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 fc30 	bl	8001e14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 fc51 	bl	8004e60 <HAL_I2CEx_ConfigAnalogFilter>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015c2:	f000 fc27 	bl	8001e14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	0018      	movs	r0, r3
 80015cc:	f003 fc94 	bl	8004ef8 <HAL_I2CEx_ConfigDigitalFilter>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015d4:	f000 fc1e 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	20000028 	.word	0x20000028
 80015e4:	40005400 	.word	0x40005400

080015e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_I2C2_Init+0x78>)
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <MX_I2C2_Init+0x7c>)
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_I2C2_Init+0x78>)
 80015f4:	22e1      	movs	r2, #225	; 0xe1
 80015f6:	00d2      	lsls	r2, r2, #3
 80015f8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 128;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_I2C2_Init+0x78>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_I2C2_Init+0x78>)
 8001602:	2201      	movs	r2, #1
 8001604:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_I2C2_Init+0x78>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_I2C2_Init+0x78>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_I2C2_Init+0x78>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_I2C2_Init+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_I2C2_Init+0x78>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_I2C2_Init+0x78>)
 8001626:	0018      	movs	r0, r3
 8001628:	f001 f906 	bl	8002838 <HAL_I2C_Init>
 800162c:	1e03      	subs	r3, r0, #0
 800162e:	d001      	beq.n	8001634 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001630:	f000 fbf0 	bl	8001e14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_I2C2_Init+0x78>)
 8001636:	2100      	movs	r1, #0
 8001638:	0018      	movs	r0, r3
 800163a:	f003 fc11 	bl	8004e60 <HAL_I2CEx_ConfigAnalogFilter>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001642:	f000 fbe7 	bl	8001e14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_I2C2_Init+0x78>)
 8001648:	2100      	movs	r1, #0
 800164a:	0018      	movs	r0, r3
 800164c:	f003 fc54 	bl	8004ef8 <HAL_I2CEx_ConfigDigitalFilter>
 8001650:	1e03      	subs	r3, r0, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001654:	f000 fbde 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	2000007c 	.word	0x2000007c
 8001664:	40005800 	.word	0x40005800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	240c      	movs	r4, #12
 8001670:	193b      	adds	r3, r7, r4
 8001672:	0018      	movs	r0, r3
 8001674:	2314      	movs	r3, #20
 8001676:	001a      	movs	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	f004 fb1b 	bl	8005cb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <MX_GPIO_Init+0x1ac>)
 8001680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001682:	4b64      	ldr	r3, [pc, #400]	; (8001814 <MX_GPIO_Init+0x1ac>)
 8001684:	2104      	movs	r1, #4
 8001686:	430a      	orrs	r2, r1
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <MX_GPIO_Init+0x1ac>)
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2204      	movs	r2, #4
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <MX_GPIO_Init+0x1ac>)
 8001698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169a:	4b5e      	ldr	r3, [pc, #376]	; (8001814 <MX_GPIO_Init+0x1ac>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <MX_GPIO_Init+0x1ac>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b59      	ldr	r3, [pc, #356]	; (8001814 <MX_GPIO_Init+0x1ac>)
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <MX_GPIO_Init+0x1ac>)
 80016b4:	2102      	movs	r1, #2
 80016b6:	430a      	orrs	r2, r1
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <MX_GPIO_Init+0x1ac>)
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	4853      	ldr	r0, [pc, #332]	; (8001818 <MX_GPIO_Init+0x1b0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	0019      	movs	r1, r3
 80016d0:	f001 f879 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 80016d4:	4951      	ldr	r1, [pc, #324]	; (800181c <MX_GPIO_Init+0x1b4>)
 80016d6:	23a0      	movs	r3, #160	; 0xa0
 80016d8:	05db      	lsls	r3, r3, #23
 80016da:	2200      	movs	r2, #0
 80016dc:	0018      	movs	r0, r3
 80016de:	f001 f872 	bl	80027c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	484e      	ldr	r0, [pc, #312]	; (8001820 <MX_GPIO_Init+0x1b8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	0019      	movs	r1, r3
 80016ec:	f001 f86b 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0192      	lsls	r2, r2, #6
 80016f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	2201      	movs	r2, #1
 80016fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	193b      	adds	r3, r7, r4
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	193b      	adds	r3, r7, r4
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	193b      	adds	r3, r7, r4
 800170c:	4a42      	ldr	r2, [pc, #264]	; (8001818 <MX_GPIO_Init+0x1b0>)
 800170e:	0019      	movs	r1, r3
 8001710:	0010      	movs	r0, r2
 8001712:	f000 fec5 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001716:	193b      	adds	r3, r7, r4
 8001718:	4a40      	ldr	r2, [pc, #256]	; (800181c <MX_GPIO_Init+0x1b4>)
 800171a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	193b      	adds	r3, r7, r4
 800171e:	2201      	movs	r2, #1
 8001720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	193b      	adds	r3, r7, r4
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	193a      	adds	r2, r7, r4
 8001730:	23a0      	movs	r3, #160	; 0xa0
 8001732:	05db      	lsls	r3, r3, #23
 8001734:	0011      	movs	r1, r2
 8001736:	0018      	movs	r0, r3
 8001738:	f000 feb2 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800173c:	193b      	adds	r3, r7, r4
 800173e:	4a39      	ldr	r2, [pc, #228]	; (8001824 <MX_GPIO_Init+0x1bc>)
 8001740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001742:	193b      	adds	r3, r7, r4
 8001744:	22c4      	movs	r2, #196	; 0xc4
 8001746:	0392      	lsls	r2, r2, #14
 8001748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	193a      	adds	r2, r7, r4
 8001752:	23a0      	movs	r3, #160	; 0xa0
 8001754:	05db      	lsls	r3, r3, #23
 8001756:	0011      	movs	r1, r2
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fea1 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800175e:	0021      	movs	r1, r4
 8001760:	187b      	adds	r3, r7, r1
 8001762:	22c0      	movs	r2, #192	; 0xc0
 8001764:	0192      	lsls	r2, r2, #6
 8001766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	000c      	movs	r4, r1
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2201      	movs	r2, #1
 800176e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	193b      	adds	r3, r7, r4
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <MX_GPIO_Init+0x1b8>)
 8001780:	0019      	movs	r1, r3
 8001782:	0010      	movs	r0, r2
 8001784:	f000 fe8c 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	22c0      	movs	r2, #192	; 0xc0
 800178c:	0212      	lsls	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	22c4      	movs	r2, #196	; 0xc4
 8001794:	0392      	lsls	r2, r2, #14
 8001796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	193b      	adds	r3, r7, r4
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <MX_GPIO_Init+0x1b8>)
 80017a2:	0019      	movs	r1, r3
 80017a4:	0010      	movs	r0, r2
 80017a6:	f000 fe7b 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0212      	lsls	r2, r2, #8
 80017b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	193a      	adds	r2, r7, r4
 80017c0:	23a0      	movs	r3, #160	; 0xa0
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fe6a 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	2218      	movs	r2, #24
 80017d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <MX_GPIO_Init+0x1b8>)
 80017e2:	0019      	movs	r1, r3
 80017e4:	0010      	movs	r0, r2
 80017e6:	f000 fe5b 	bl	80024a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2006      	movs	r0, #6
 80017f0:	f000 fdd0 	bl	8002394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80017f4:	2006      	movs	r0, #6
 80017f6:	f000 fde2 	bl	80023be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2007      	movs	r0, #7
 8001800:	f000 fdc8 	bl	8002394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001804:	2007      	movs	r0, #7
 8001806:	f000 fdda 	bl	80023be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b009      	add	sp, #36	; 0x24
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40021000 	.word	0x40021000
 8001818:	50000800 	.word	0x50000800
 800181c:	00000f03 	.word	0x00000f03
 8001820:	50000400 	.word	0x50000400
 8001824:	00001004 	.word	0x00001004

08001828 <MYGPIO_ALM_RELE_Init>:

/* USER CODE BEGIN 4 */
void MYGPIO_ALM_RELE_Init(MyGPIO* Self)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&Self[1], GPIOB, GPIO_PIN_15, INPUT);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3308      	adds	r3, #8
 8001834:	0018      	movs	r0, r3
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	021a      	lsls	r2, r3, #8
 800183a:	4912      	ldr	r1, [pc, #72]	; (8001884 <MYGPIO_ALM_RELE_Init+0x5c>)
 800183c:	2300      	movs	r3, #0
 800183e:	f000 faee 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[2], GPIOA, GPIO_PIN_2, INPUT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3310      	adds	r3, #16
 8001846:	0018      	movs	r0, r3
 8001848:	23a0      	movs	r3, #160	; 0xa0
 800184a:	05d9      	lsls	r1, r3, #23
 800184c:	2300      	movs	r3, #0
 800184e:	2204      	movs	r2, #4
 8001850:	f000 fae5 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[3], GPIOA, GPIO_PIN_12, INPUT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3318      	adds	r3, #24
 8001858:	0018      	movs	r0, r3
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	23a0      	movs	r3, #160	; 0xa0
 8001860:	05d9      	lsls	r1, r3, #23
 8001862:	2300      	movs	r3, #0
 8001864:	f000 fadb 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[4], GPIOB, GPIO_PIN_14, INPUT);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3320      	adds	r3, #32
 800186c:	0018      	movs	r0, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	01da      	lsls	r2, r3, #7
 8001872:	4904      	ldr	r1, [pc, #16]	; (8001884 <MYGPIO_ALM_RELE_Init+0x5c>)
 8001874:	2300      	movs	r3, #0
 8001876:	f000 fad2 	bl	8001e1e <MYGPIO_Init>
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	50000400 	.word	0x50000400

08001888 <MYGPIO_CMD_RELE_Init>:

void MYGPIO_CMD_RELE_Init(MyGPIO* Self)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&Self[1], GPIOA, GPIO_PIN_8, OUTPUT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3308      	adds	r3, #8
 8001894:	0018      	movs	r0, r3
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	005a      	lsls	r2, r3, #1
 800189a:	23a0      	movs	r3, #160	; 0xa0
 800189c:	05d9      	lsls	r1, r3, #23
 800189e:	2301      	movs	r3, #1
 80018a0:	f000 fabd 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[2], GPIOA, GPIO_PIN_1, OUTPUT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3310      	adds	r3, #16
 80018a8:	0018      	movs	r0, r3
 80018aa:	23a0      	movs	r3, #160	; 0xa0
 80018ac:	05d9      	lsls	r1, r3, #23
 80018ae:	2301      	movs	r3, #1
 80018b0:	2202      	movs	r2, #2
 80018b2:	f000 fab4 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[3], GPIOA, GPIO_PIN_11, OUTPUT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3318      	adds	r3, #24
 80018ba:	0018      	movs	r0, r3
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	011a      	lsls	r2, r3, #4
 80018c0:	23a0      	movs	r3, #160	; 0xa0
 80018c2:	05d9      	lsls	r1, r3, #23
 80018c4:	2301      	movs	r3, #1
 80018c6:	f000 faaa 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[4], GPIOB, GPIO_PIN_13, OUTPUT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3320      	adds	r3, #32
 80018ce:	0018      	movs	r0, r3
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	019a      	lsls	r2, r3, #6
 80018d4:	4903      	ldr	r1, [pc, #12]	; (80018e4 <MYGPIO_CMD_RELE_Init+0x5c>)
 80018d6:	2301      	movs	r3, #1
 80018d8:	f000 faa1 	bl	8001e1e <MYGPIO_Init>
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	50000400 	.word	0x50000400

080018e8 <MYGPIO_FAULT_RELE_Init>:

void MYGPIO_FAULT_RELE_Init(MyGPIO* Self)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&Self[1], GPIOA, GPIO_PIN_9, OUTPUT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3308      	adds	r3, #8
 80018f4:	0018      	movs	r0, r3
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	009a      	lsls	r2, r3, #2
 80018fa:	23a0      	movs	r3, #160	; 0xa0
 80018fc:	05d9      	lsls	r1, r3, #23
 80018fe:	2301      	movs	r3, #1
 8001900:	f000 fa8d 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[2], GPIOA, GPIO_PIN_0, OUTPUT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3310      	adds	r3, #16
 8001908:	0018      	movs	r0, r3
 800190a:	23a0      	movs	r3, #160	; 0xa0
 800190c:	05d9      	lsls	r1, r3, #23
 800190e:	2301      	movs	r3, #1
 8001910:	2201      	movs	r2, #1
 8001912:	f000 fa84 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[3], GPIOA, GPIO_PIN_10, OUTPUT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3318      	adds	r3, #24
 800191a:	0018      	movs	r0, r3
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	00da      	lsls	r2, r3, #3
 8001920:	23a0      	movs	r3, #160	; 0xa0
 8001922:	05d9      	lsls	r1, r3, #23
 8001924:	2301      	movs	r3, #1
 8001926:	f000 fa7a 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&Self[4], GPIOB, GPIO_PIN_12, OUTPUT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3320      	adds	r3, #32
 800192e:	0018      	movs	r0, r3
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <MYGPIO_FAULT_RELE_Init+0x5c>)
 8001936:	2301      	movs	r3, #1
 8001938:	f000 fa71 	bl	8001e1e <MYGPIO_Init>
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	50000400 	.word	0x50000400

08001948 <MYGPIO_ADDRESS_Init>:

void MYGPIO_ADDRESS_Init(MyGPIO* ADDRESS)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&ADDRESS[1], GPIOA, GPIO_PIN_15, INPUT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3308      	adds	r3, #8
 8001954:	0018      	movs	r0, r3
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	021a      	lsls	r2, r3, #8
 800195a:	23a0      	movs	r3, #160	; 0xa0
 800195c:	05d9      	lsls	r1, r3, #23
 800195e:	2300      	movs	r3, #0
 8001960:	f000 fa5d 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&ADDRESS[2], GPIOB, GPIO_PIN_3, INPUT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3310      	adds	r3, #16
 8001968:	0018      	movs	r0, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <MYGPIO_ADDRESS_Init+0x44>)
 800196c:	2300      	movs	r3, #0
 800196e:	2208      	movs	r2, #8
 8001970:	f000 fa55 	bl	8001e1e <MYGPIO_Init>
	MYGPIO_Init(&ADDRESS[3], GPIOB, GPIO_PIN_4, INPUT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3318      	adds	r3, #24
 8001978:	0018      	movs	r0, r3
 800197a:	4904      	ldr	r1, [pc, #16]	; (800198c <MYGPIO_ADDRESS_Init+0x44>)
 800197c:	2300      	movs	r3, #0
 800197e:	2210      	movs	r2, #16
 8001980:	f000 fa4d 	bl	8001e1e <MYGPIO_Init>
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	50000400 	.word	0x50000400

08001990 <MYGPIO_EXT_INT_Init>:

void MYGPIO_EXT_INT_Init(MyGPIO* EXT_INT)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(EXT_INT, GPIOC, GPIO_PIN_13, OUTPUT);
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	019a      	lsls	r2, r3, #6
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <MYGPIO_EXT_INT_Init+0x20>)
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	2301      	movs	r3, #1
 80019a2:	f000 fa3c 	bl	8001e1e <MYGPIO_Init>
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	50000800 	.word	0x50000800

080019b4 <MX_GPIO_I2C_OwnAddress1_Update>:

void MX_GPIO_I2C_OwnAddress1_Update(I2C_HandleTypeDef* hi2c, uint8_t ADDRESS1_PinState, uint8_t ADDRESS2_PinState, uint8_t ADDRESS3_PinState)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	000c      	movs	r4, r1
 80019be:	0010      	movs	r0, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	1cfb      	adds	r3, r7, #3
 80019c4:	1c22      	adds	r2, r4, #0
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	1cbb      	adds	r3, r7, #2
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	1c7b      	adds	r3, r7, #1
 80019d0:	1c0a      	adds	r2, r1, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	uint8_t hi2c_Init_OwnAddress1 = 0x40;
 80019d4:	200f      	movs	r0, #15
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 += (ADDRESS1_PinState << 0);
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	1839      	adds	r1, r7, r0
 80019e0:	1cfa      	adds	r2, r7, #3
 80019e2:	7809      	ldrb	r1, [r1, #0]
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	188a      	adds	r2, r1, r2
 80019e8:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 += (ADDRESS2_PinState << 1);
 80019ea:	1cbb      	adds	r3, r7, #2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	18db      	adds	r3, r3, r3
 80019f0:	b2d9      	uxtb	r1, r3
 80019f2:	183b      	adds	r3, r7, r0
 80019f4:	183a      	adds	r2, r7, r0
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	188a      	adds	r2, r1, r2
 80019fa:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 += (ADDRESS3_PinState << 2);
 80019fc:	1c7b      	adds	r3, r7, #1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	183a      	adds	r2, r7, r0
 8001a08:	7812      	ldrb	r2, [r2, #0]
 8001a0a:	188a      	adds	r2, r1, r2
 8001a0c:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 = hi2c_Init_OwnAddress1 << 1;
 8001a0e:	183a      	adds	r2, r7, r0
 8001a10:	0001      	movs	r1, r0
 8001a12:	183b      	adds	r3, r7, r0
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	18db      	adds	r3, r3, r3
 8001a18:	7013      	strb	r3, [r2, #0]

	//Update I2C Slave Address
	if(hi2c->Init.OwnAddress1 != hi2c_Init_OwnAddress1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d01d      	beq.n	8001a62 <MX_GPIO_I2C_OwnAddress1_Update+0xae>
	{
		hi2c->Init.OwnAddress1 = hi2c_Init_OwnAddress1;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
		if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 ff01 	bl	8002838 <HAL_I2C_Init>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <MX_GPIO_I2C_OwnAddress1_Update+0x8a>
		{
		Error_Handler();
 8001a3a:	f000 f9eb 	bl	8001e14 <Error_Handler>
		}

		/** Configure Analogue filter
		*/
		if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2100      	movs	r1, #0
 8001a42:	0018      	movs	r0, r3
 8001a44:	f003 fa0c 	bl	8004e60 <HAL_I2CEx_ConfigAnalogFilter>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_GPIO_I2C_OwnAddress1_Update+0x9c>
		{
		Error_Handler();
 8001a4c:	f000 f9e2 	bl	8001e14 <Error_Handler>
		}

		/** Configure Digital filter
		*/
		if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2100      	movs	r1, #0
 8001a54:	0018      	movs	r0, r3
 8001a56:	f003 fa4f 	bl	8004ef8 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_GPIO_I2C_OwnAddress1_Update+0xae>
		{
		Error_Handler();
 8001a5e:	f000 f9d9 	bl	8001e14 <Error_Handler>
		}
	}
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b005      	add	sp, #20
 8001a68:	bd90      	pop	{r4, r7, pc}

08001a6a <CMD_RELE_Update>:

void CMD_RELE_Update(MyGPIO* Self, uint8_t Rele_IDNumber, uint8_t ReleControl)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	0008      	movs	r0, r1
 8001a74:	0011      	movs	r1, r2
 8001a76:	1cfb      	adds	r3, r7, #3
 8001a78:	1c02      	adds	r2, r0, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	1cbb      	adds	r3, r7, #2
 8001a7e:	1c0a      	adds	r2, r1, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	uint8_t BitPosition = 1 << (Rele_IDNumber - 1);
 8001a82:	1cfb      	adds	r3, r7, #3
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	2201      	movs	r2, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	701a      	strb	r2, [r3, #0]
	Self->PinState = (BitPosition & ReleControl);
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	1cba      	adds	r2, r7, #2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	71da      	strb	r2, [r3, #7]
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_I2C_AddrCallback_Restart>:
#if 1
void HAL_I2C_AddrCallback_Restart()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	i2c1_Register = 0;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_I2C_AddrCallback_Restart+0x34>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	i2c1_Data_1byte = 0;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_I2C_AddrCallback_Restart+0x38>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
	i2c1_Data_2byte = 0;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_I2C_AddrCallback_Restart+0x3c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	i2c1_Data_2byte = 0;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_I2C_AddrCallback_Restart+0x3c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
	i2c1_nData = 0;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_I2C_AddrCallback_Restart+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	i2c1_State = 0;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_I2C_AddrCallback_Restart+0x44>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
	i2c1_Operation = 0;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_I2C_AddrCallback_Restart+0x48>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200003fd 	.word	0x200003fd
 8001ae4:	200003fe 	.word	0x200003fe
 8001ae8:	200003ff 	.word	0x200003ff
 8001aec:	20000400 	.word	0x20000400
 8001af0:	20000401 	.word	0x20000401
 8001af4:	20000402 	.word	0x20000402

08001af8 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t transferDirection, uint16_t addressMatchCode)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	0008      	movs	r0, r1
 8001b02:	0011      	movs	r1, r2
 8001b04:	1cfb      	adds	r3, r7, #3
 8001b06:	1c02      	adds	r2, r0, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	1c0a      	adds	r2, r1, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
	if(hi2c == &hi2c1)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_I2C_AddrCallback+0x1a0>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d000      	beq.n	8001b1a <HAL_I2C_AddrCallback+0x22>
 8001b18:	e0ba      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
	{
		if (transferDirection == I2C_DIRECTION_TRANSMIT)
 8001b1a:	1cfb      	adds	r3, r7, #3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d000      	beq.n	8001b24 <HAL_I2C_AddrCallback+0x2c>
 8001b22:	e084      	b.n	8001c2e <HAL_I2C_AddrCallback+0x136>
		{
			//STATO_1: [SLAVE] WRITE: READ_REGISTER + [SLAVE] READ: NONE
			if(!i2c1_State)
 8001b24:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_I2C_AddrCallback+0x1a4>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d129      	bne.n	8001b80 <HAL_I2C_AddrCallback+0x88>
			{
				if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c1_Register, sizeof(i2c1_Register), I2C_LAST_FRAME) != HAL_OK)
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	049b      	lsls	r3, r3, #18
 8001b30:	495b      	ldr	r1, [pc, #364]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f001 fb3f 	bl	80031b8 <HAL_I2C_Slave_Seq_Receive_IT>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_I2C_AddrCallback+0x4c>
				{
					HAL_I2C_AddrCallback_Restart();
 8001b3e:	f7ff ffb5 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
//				i2c1_Data_1byte 		= 0;
//				i2c1_State	= 0;
//			}
		}
	}
}
 8001b42:	e0a5      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
					i2c1_State	= 1;
 8001b44:	4b55      	ldr	r3, [pc, #340]	; (8001c9c <HAL_I2C_AddrCallback+0x1a4>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
					if(i2c1_Register) //WRITE
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d012      	beq.n	8001b78 <HAL_I2C_AddrCallback+0x80>
						i2c1_Operation = 0;
 8001b52:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <HAL_I2C_AddrCallback+0x1ac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
						i2c1_nData = (i2c1_Register >> 7) + 1;
 8001b58:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	09db      	lsrs	r3, r3, #7
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001b66:	701a      	strb	r2, [r3, #0]
						i2c1_Register = (i2c1_Register & 0x7F);
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	227f      	movs	r2, #127	; 0x7f
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001b74:	701a      	strb	r2, [r3, #0]
}
 8001b76:	e08b      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
						i2c1_Operation = 1;
 8001b78:	4b4a      	ldr	r3, [pc, #296]	; (8001ca4 <HAL_I2C_AddrCallback+0x1ac>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	e087      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
				if(i2c1_Operation)
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <HAL_I2C_AddrCallback+0x1ac>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_I2C_AddrCallback+0xd2>
					if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c1_Register, sizeof(i2c1_Register), I2C_LAST_FRAME) != HAL_OK)
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	049b      	lsls	r3, r3, #18
 8001b8c:	4944      	ldr	r1, [pc, #272]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f001 fb11 	bl	80031b8 <HAL_I2C_Slave_Seq_Receive_IT>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_I2C_AddrCallback+0xac>
						MX_I2C1_Init();
 8001b9a:	f7ff fce5 	bl	8001568 <MX_I2C1_Init>
						HAL_I2C_AddrCallback_Restart();
 8001b9e:	f7ff ff85 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001ba2:	e075      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
						i2c1_State	= 1;
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_I2C_AddrCallback+0x1a4>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
						i2c1_nData = (i2c1_Register >> 7) + 1;
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	09db      	lsrs	r3, r3, #7
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001bb8:	701a      	strb	r2, [r3, #0]
						i2c1_Register = (i2c1_Register & 0x7F);
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	227f      	movs	r2, #127	; 0x7f
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001bc6:	701a      	strb	r2, [r3, #0]
}
 8001bc8:	e062      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
					if(i2c1_nData == 1)
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d117      	bne.n	8001c02 <HAL_I2C_AddrCallback+0x10a>
						if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&i2c1_Data_1byte, sizeof(i2c1_Data_1byte), I2C_LAST_FRAME) != HAL_OK)
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_I2C_AddrCallback+0x1b4>)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f001 faec 	bl	80031b8 <HAL_I2C_Slave_Seq_Receive_IT>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d004      	beq.n	8001bee <HAL_I2C_AddrCallback+0xf6>
							MX_I2C1_Init();
 8001be4:	f7ff fcc0 	bl	8001568 <MX_I2C1_Init>
							HAL_I2C_AddrCallback_Restart();
 8001be8:	f7ff ff60 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001bec:	e050      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
							CONTROL_1B[i2c1_Register] 	= i2c1_Data_1byte;
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	001a      	movs	r2, r3
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_I2C_AddrCallback+0x1b4>)
 8001bf6:	7819      	ldrb	r1, [r3, #0]
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_I2C_AddrCallback+0x1b8>)
 8001bfa:	5499      	strb	r1, [r3, r2]
							HAL_I2C_AddrCallback_Restart();
 8001bfc:	f7ff ff56 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001c00:	e046      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
					else if(i2c1_nData == 2)
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d142      	bne.n	8001c90 <HAL_I2C_AddrCallback+0x198>
						if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&i2c1_Data_2byte, 2, I2C_LAST_FRAME) != HAL_OK)
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	049b      	lsls	r3, r3, #18
 8001c0e:	4929      	ldr	r1, [pc, #164]	; (8001cb4 <HAL_I2C_AddrCallback+0x1bc>)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f001 fad0 	bl	80031b8 <HAL_I2C_Slave_Seq_Receive_IT>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_I2C_AddrCallback+0x12e>
							MX_I2C1_Init();
 8001c1c:	f7ff fca4 	bl	8001568 <MX_I2C1_Init>
							HAL_I2C_AddrCallback_Restart();
 8001c20:	f7ff ff44 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001c24:	e034      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
							i2c1_nData = 1;
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	e030      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
			if(i2c1_nData == 1)
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d114      	bne.n	8001c60 <HAL_I2C_AddrCallback+0x168>
				if(HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &CONTROL_1B[i2c1_Register], 1, I2C_LAST_FRAME) != HAL_OK)
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_I2C_AddrCallback+0x1b8>)
 8001c3e:	18d1      	adds	r1, r2, r3
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	049b      	lsls	r3, r3, #18
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f001 f9f6 	bl	8003038 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_I2C_AddrCallback+0x162>
					MX_I2C1_Init();
 8001c50:	f7ff fc8a 	bl	8001568 <MX_I2C1_Init>
					HAL_I2C_AddrCallback_Restart();
 8001c54:	f7ff ff2a 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001c58:	e01a      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
					HAL_I2C_AddrCallback_Restart();
 8001c5a:	f7ff ff27 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001c5e:	e017      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
			else if(i2c1_nData == 2)
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_I2C_AddrCallback+0x1b0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d113      	bne.n	8001c90 <HAL_I2C_AddrCallback+0x198>
				if(HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &CONTROL_2B[i2c1_Register], 2, I2C_LAST_FRAME) != HAL_OK)
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_I2C_AddrCallback+0x1a8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_I2C_AddrCallback+0x1c0>)
 8001c70:	18d1      	adds	r1, r2, r3
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	049b      	lsls	r3, r3, #18
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f001 f9dd 	bl	8003038 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_I2C_AddrCallback+0x194>
					MX_I2C1_Init();
 8001c82:	f7ff fc71 	bl	8001568 <MX_I2C1_Init>
					HAL_I2C_AddrCallback_Restart();
 8001c86:	f7ff ff11 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001c8a:	e001      	b.n	8001c90 <HAL_I2C_AddrCallback+0x198>
					HAL_I2C_AddrCallback_Restart();
 8001c8c:	f7ff ff0e 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000028 	.word	0x20000028
 8001c9c:	20000401 	.word	0x20000401
 8001ca0:	200003fd 	.word	0x200003fd
 8001ca4:	20000402 	.word	0x20000402
 8001ca8:	20000400 	.word	0x20000400
 8001cac:	200003fe 	.word	0x200003fe
 8001cb0:	20000274 	.word	0x20000274
 8001cb4:	200003ff 	.word	0x200003ff
 8001cb8:	20000374 	.word	0x20000374

08001cbc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&i2c1_Data_2byte, 2, I2C_LAST_FRAME) != HAL_OK)
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	049b      	lsls	r3, r3, #18
 8001cc8:	4909      	ldr	r1, [pc, #36]	; (8001cf0 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f001 fa73 	bl	80031b8 <HAL_I2C_Slave_Seq_Receive_IT>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_I2C_SlaveRxCpltCallback+0x24>
	{
		//RESTART
		MX_I2C1_Init();
 8001cd6:	f7ff fc47 	bl	8001568 <MX_I2C1_Init>
		HAL_I2C_AddrCallback_Restart();
 8001cda:	f7ff fee7 	bl	8001aac <HAL_I2C_AddrCallback_Restart>
	{
		i2c1_nData = 1;
//							HAL_I2C_AddrCallback_Restart();
		//CONTROL_1B[i2c1_Register + 1] 	= i2c1_Data_1byte;
	}
}
 8001cde:	e002      	b.n	8001ce6 <HAL_I2C_SlaveRxCpltCallback+0x2a>
		i2c1_nData = 1;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	200003ff 	.word	0x200003ff
 8001cf4:	20000400 	.word	0x20000400

08001cf8 <HAL_I2C_ListenCpltCallback>:
	}
}
#endif

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f001 fb1a 	bl	800333c <HAL_I2C_EnableListen_IT>
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	0002      	movs	r2, r0
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e02b      	b.n	8001d7e <HAL_GPIO_EXTI_Callback+0x6e>
	{
		MYGPIO_PinState_Update(&ALM_RELE[i]);
 8001d26:	240f      	movs	r4, #15
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00da      	lsls	r2, r3, #3
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 f88d 	bl	8001e52 <MYGPIO_PinState_Update>
		FAULT_RELE[i].PinState = !(ALM_RELE[i].PinState);
 8001d38:	0021      	movs	r1, r4
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	18d3      	adds	r3, r2, r3
 8001d44:	3307      	adds	r3, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	425a      	negs	r2, r3
 8001d4a:	4153      	adcs	r3, r2
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	0008      	movs	r0, r1
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	0011      	movs	r1, r2
 8001d56:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	18d3      	adds	r3, r2, r3
 8001d5c:	3307      	adds	r3, #7
 8001d5e:	1c0a      	adds	r2, r1, #0
 8001d60:	701a      	strb	r2, [r3, #0]
		MYGPIO_PinState_Update(&FAULT_RELE[i]);
 8001d62:	0004      	movs	r4, r0
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	00da      	lsls	r2, r3, #3
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d6c:	18d3      	adds	r3, r2, r3
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f86f 	bl	8001e52 <MYGPIO_PinState_Update>
	for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	3201      	adds	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	230f      	movs	r3, #15
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d9ce      	bls.n	8001d26 <HAL_GPIO_EXTI_Callback+0x16>
	}

	CONTROL_1B[ALM_RELE_PinState] = (ALM_RELE[1].PinState << 0) + (ALM_RELE[2].PinState << 1) + (ALM_RELE[3].PinState << 2) + (ALM_RELE[4].PinState << 3);
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d8a:	7bda      	ldrb	r2, [r3, #15]
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d8e:	7ddb      	ldrb	r3, [r3, #23]
 8001d90:	18db      	adds	r3, r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	18d3      	adds	r3, r2, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d9a:	7fdb      	ldrb	r3, [r3, #31]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001da6:	2127      	movs	r1, #39	; 0x27
 8001da8:	5c5b      	ldrb	r3, [r3, r1]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001db4:	709a      	strb	r2, [r3, #2]
	CONTROL_1B[FAULT_RELE_PinState] = (FAULT_RELE[1].PinState << 0) + (FAULT_RELE[2].PinState << 1) + (FAULT_RELE[3].PinState << 2) + (FAULT_RELE[4].PinState << 3);
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001db8:	7bda      	ldrb	r2, [r3, #15]
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001dbc:	7ddb      	ldrb	r3, [r3, #23]
 8001dbe:	18db      	adds	r3, r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	18d3      	adds	r3, r2, r3
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001dc8:	7fdb      	ldrb	r3, [r3, #31]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	18d3      	adds	r3, r2, r3
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001dd4:	2127      	movs	r1, #39	; 0x27
 8001dd6:	5c5b      	ldrb	r3, [r3, r1]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001de2:	70da      	strb	r2, [r3, #3]

	EXT_INT.PinState = !(CONTROL_1B[ALM_RELE_PinState]);
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
 8001de8:	425a      	negs	r2, r3
 8001dea:	4153      	adcs	r3, r2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	001a      	movs	r2, r3
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x100>)
 8001df2:	71da      	strb	r2, [r3, #7]
	MYGPIO_PinState_Update(&EXT_INT);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x100>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f82b 	bl	8001e52 <MYGPIO_PinState_Update>
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b005      	add	sp, #20
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	200000d0 	.word	0x200000d0
 8001e08:	200000f8 	.word	0x200000f8
 8001e0c:	20000274 	.word	0x20000274
 8001e10:	20000168 	.word	0x20000168

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <Error_Handler+0x8>

08001e1e <MYGPIO_Init>:
#include <mygpio.h>
/* Defines -------------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
/* Private Function definition -----------------------------------------------*/
void MYGPIO_Init(MyGPIO* Self, 	GPIO_TypeDef* GPIO, uint16_t Pin, MyGPIO_Mode Mode)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	0019      	movs	r1, r3
 8001e2a:	1dbb      	adds	r3, r7, #6
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	1d7b      	adds	r3, r7, #5
 8001e30:	1c0a      	adds	r2, r1, #0
 8001e32:	701a      	strb	r2, [r3, #0]
	Self->GPIO = GPIO;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	601a      	str	r2, [r3, #0]
	Self->Pin = Pin;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1dba      	adds	r2, r7, #6
 8001e3e:	8812      	ldrh	r2, [r2, #0]
 8001e40:	809a      	strh	r2, [r3, #4]
	Self->Mode = Mode;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1d7a      	adds	r2, r7, #5
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	719a      	strb	r2, [r3, #6]
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <MYGPIO_PinState_Update>:

void MYGPIO_PinState_Update(MyGPIO* Self)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
	if(Self->Mode == OUTPUT)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	799b      	ldrb	r3, [r3, #6]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d109      	bne.n	8001e76 <MYGPIO_PinState_Update+0x24>
		HAL_GPIO_WritePin(Self->GPIO, Self->Pin, Self->PinState);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	8899      	ldrh	r1, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	79db      	ldrb	r3, [r3, #7]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	f000 fca9 	bl	80027c6 <HAL_GPIO_WritePin>
	else
		Self->PinState = HAL_GPIO_ReadPin(Self->GPIO, Self->Pin);
}
 8001e74:	e00b      	b.n	8001e8e <MYGPIO_PinState_Update+0x3c>
		Self->PinState = HAL_GPIO_ReadPin(Self->GPIO, Self->Pin);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	0019      	movs	r1, r3
 8001e80:	0010      	movs	r0, r2
 8001e82:	f000 fc83 	bl	800278c <HAL_GPIO_ReadPin>
 8001e86:	0003      	movs	r3, r0
 8001e88:	001a      	movs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	71da      	strb	r2, [r3, #7]
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <MYTIMELOOP_Init>:
 * @author William Favaro
 * @date
 * @note
 */
void MYTIMELOOP_Init(TimeLoop* Self, uint16_t SpanTime, uint32_t ActualTime)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	1c0a      	adds	r2, r1, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
	Self->_LastRunTime 	= ActualTime;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
	Self->_SpanTime 	= SpanTime;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	183a      	adds	r2, r7, r0
 8001eb2:	8812      	ldrh	r2, [r2, #0]
 8001eb4:	809a      	strh	r2, [r3, #4]
	Self->_Enable 		= 1;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	719a      	strb	r2, [r3, #6]
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <MYTIMELOOP_Run>:
 * @author William Favaro
 * @date
 * @note
 */
uint8_t MYTIMELOOP_Run(TimeLoop* Self, uint32_t ActualTime)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	if((ActualTime - Self->_LastRunTime) > Self->_SpanTime)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	8892      	ldrh	r2, [r2, #4]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d908      	bls.n	8001ef0 <MYTIMELOOP_Run+0x2c>
	{
		Self->_LastRunTime += Self->_SpanTime;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	8892      	ldrh	r2, [r2, #4]
 8001ee6:	189a      	adds	r2, r3, r2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]
		return 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <MYTIMELOOP_Run+0x2e>
	}
	return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_MspInit+0x24>)
 8001f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x24>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_MspInit+0x24>)
 8001f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_MspInit+0x24>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0549      	lsls	r1, r1, #21
 8001f16:	430a      	orrs	r2, r1
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	2414      	movs	r4, #20
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	0018      	movs	r0, r3
 8001f32:	2314      	movs	r3, #20
 8001f34:	001a      	movs	r2, r3
 8001f36:	2100      	movs	r1, #0
 8001f38:	f003 febc 	bl	8005cb4 <memset>
  if(hi2c->Instance==I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a38      	ldr	r2, [pc, #224]	; (8002024 <HAL_I2C_MspInit+0x100>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d132      	bne.n	8001fac <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	22c0      	movs	r2, #192	; 0xc0
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	0021      	movs	r1, r4
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2212      	movs	r2, #18
 8001f6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2203      	movs	r2, #3
 8001f78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_I2C_MspInit+0x108>)
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f000 fa8a 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0389      	lsls	r1, r1, #14
 8001f96:	430a      	orrs	r2, r1
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2017      	movs	r0, #23
 8001fa0:	f000 f9f8 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001fa4:	2017      	movs	r0, #23
 8001fa6:	f000 fa0a 	bl	80023be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001faa:	e036      	b.n	800201a <HAL_I2C_MspInit+0xf6>
  else if(hi2c->Instance==I2C2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_I2C_MspInit+0x10c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d131      	bne.n	800201a <HAL_I2C_MspInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fce:	2114      	movs	r1, #20
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	22c0      	movs	r2, #192	; 0xc0
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	2212      	movs	r2, #18
 8001fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	2206      	movs	r2, #6
 8001fee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_I2C_MspInit+0x108>)
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	0010      	movs	r0, r2
 8001ff8:	f000 fa52 	bl	80024a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8001ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_I2C_MspInit+0x104>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	03c9      	lsls	r1, r1, #15
 8002006:	430a      	orrs	r2, r1
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2018      	movs	r0, #24
 8002010:	f000 f9c0 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8002014:	2018      	movs	r0, #24
 8002016:	f000 f9d2 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b00b      	add	sp, #44	; 0x2c
 8002020:	bd90      	pop	{r4, r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40005400 	.word	0x40005400
 8002028:	40021000 	.word	0x40021000
 800202c:	50000400 	.word	0x50000400
 8002030:	40005800 	.word	0x40005800

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002058:	f000 f8d4 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002066:	2004      	movs	r0, #4
 8002068:	f000 fbca 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	015b      	lsls	r3, r3, #5
 800207a:	0018      	movs	r0, r3
 800207c:	f000 fbc0 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	01db      	lsls	r3, r3, #7
 8002084:	0018      	movs	r0, r3
 8002086:	f000 fbbb 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	0018      	movs	r0, r3
 8002090:	f000 fbb6 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <I2C1_IRQHandler+0x2c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	23e0      	movs	r3, #224	; 0xe0
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4013      	ands	r3, r2
 80020ac:	d004      	beq.n	80020b8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <I2C1_IRQHandler+0x2c>)
 80020b0:	0018      	movs	r0, r3
 80020b2:	f001 f97f 	bl	80033b4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80020b6:	e003      	b.n	80020c0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <I2C1_IRQHandler+0x2c>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f001 f960 	bl	8003380 <HAL_I2C_EV_IRQHandler>
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000028 	.word	0x20000028

080020cc <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 interrupt.
  */
void I2C2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <I2C2_IRQHandler+0x2c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	23e0      	movs	r3, #224	; 0xe0
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4013      	ands	r3, r2
 80020dc:	d004      	beq.n	80020e8 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <I2C2_IRQHandler+0x2c>)
 80020e0:	0018      	movs	r0, r3
 80020e2:	f001 f967 	bl	80033b4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80020e6:	e003      	b.n	80020f0 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <I2C2_IRQHandler+0x2c>)
 80020ea:	0018      	movs	r0, r3
 80020ec:	f001 f948 	bl	8003380 <HAL_I2C_EV_IRQHandler>
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	2000007c 	.word	0x2000007c

080020fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800210a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800210c:	f7ff fff6 	bl	80020fc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <LoopForever+0x6>)
  ldr r1, =_edata
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <LoopForever+0xe>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002128:	4c0a      	ldr	r4, [pc, #40]	; (8002154 <LoopForever+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002136:	f003 fdc5 	bl	8005cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7fe fff7 	bl	800112c <main>

0800213e <LoopForever>:

LoopForever:
    b LoopForever
 800213e:	e7fe      	b.n	800213e <LoopForever>
   ldr   r0, =_estack
 8002140:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800214c:	08005dd0 	.word	0x08005dd0
  ldr r2, =_sbss
 8002150:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002154:	20000408 	.word	0x20000408

08002158 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_COMP_IRQHandler>
	...

0800215c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_Init+0x3c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Init+0x3c>)
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f811 	bl	800219c <HAL_InitTick>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d003      	beq.n	8002186 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e001      	b.n	800218a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002186:	f7ff feb9 	bl	8001efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_InitTick+0x5c>)
 80021a6:	681c      	ldr	r4, [r3, #0]
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_InitTick+0x60>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	0019      	movs	r1, r3
 80021ae:	23fa      	movs	r3, #250	; 0xfa
 80021b0:	0098      	lsls	r0, r3, #2
 80021b2:	f7fd ffa9 	bl	8000108 <__udivsi3>
 80021b6:	0003      	movs	r3, r0
 80021b8:	0019      	movs	r1, r3
 80021ba:	0020      	movs	r0, r4
 80021bc:	f7fd ffa4 	bl	8000108 <__udivsi3>
 80021c0:	0003      	movs	r3, r0
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f90b 	bl	80023de <HAL_SYSTICK_Config>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00f      	b.n	80021f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d80b      	bhi.n	80021ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	2301      	movs	r3, #1
 80021da:	425b      	negs	r3, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f8d8 	bl	8002394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_InitTick+0x64>)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b003      	add	sp, #12
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000008 	.word	0x20000008
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_IncTick+0x1c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_IncTick+0x20>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_IncTick+0x20>)
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	20000008 	.word	0x20000008
 8002224:	20000404 	.word	0x20000404

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <HAL_GetTick+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	20000404 	.word	0x20000404

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	0002      	movs	r2, r0
 8002244:	1dfb      	adds	r3, r7, #7
 8002246:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b7f      	cmp	r3, #127	; 0x7f
 800224e:	d809      	bhi.n	8002264 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	001a      	movs	r2, r3
 8002256:	231f      	movs	r3, #31
 8002258:	401a      	ands	r2, r3
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_EnableIRQ+0x30>)
 800225c:	2101      	movs	r1, #1
 800225e:	4091      	lsls	r1, r2
 8002260:	000a      	movs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
  }
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	0002      	movs	r2, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b7f      	cmp	r3, #127	; 0x7f
 8002284:	d828      	bhi.n	80022d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <__NVIC_SetPriority+0xd4>)
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b25b      	sxtb	r3, r3
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	33c0      	adds	r3, #192	; 0xc0
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	589b      	ldr	r3, [r3, r2]
 8002296:	1dfa      	adds	r2, r7, #7
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	0011      	movs	r1, r2
 800229c:	2203      	movs	r2, #3
 800229e:	400a      	ands	r2, r1
 80022a0:	00d2      	lsls	r2, r2, #3
 80022a2:	21ff      	movs	r1, #255	; 0xff
 80022a4:	4091      	lsls	r1, r2
 80022a6:	000a      	movs	r2, r1
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	401a      	ands	r2, r3
 80022ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	401a      	ands	r2, r3
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	0018      	movs	r0, r3
 80022bc:	2303      	movs	r3, #3
 80022be:	4003      	ands	r3, r0
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c4:	481f      	ldr	r0, [pc, #124]	; (8002344 <__NVIC_SetPriority+0xd4>)
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	430a      	orrs	r2, r1
 80022d0:	33c0      	adds	r3, #192	; 0xc0
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022d6:	e031      	b.n	800233c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <__NVIC_SetPriority+0xd8>)
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0019      	movs	r1, r3
 80022e0:	230f      	movs	r3, #15
 80022e2:	400b      	ands	r3, r1
 80022e4:	3b08      	subs	r3, #8
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3306      	adds	r3, #6
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	3304      	adds	r3, #4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1dfa      	adds	r2, r7, #7
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	0011      	movs	r1, r2
 80022f8:	2203      	movs	r2, #3
 80022fa:	400a      	ands	r2, r1
 80022fc:	00d2      	lsls	r2, r2, #3
 80022fe:	21ff      	movs	r1, #255	; 0xff
 8002300:	4091      	lsls	r1, r2
 8002302:	000a      	movs	r2, r1
 8002304:	43d2      	mvns	r2, r2
 8002306:	401a      	ands	r2, r3
 8002308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	401a      	ands	r2, r3
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	2303      	movs	r3, #3
 800231a:	4003      	ands	r3, r0
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <__NVIC_SetPriority+0xd8>)
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	001c      	movs	r4, r3
 8002328:	230f      	movs	r3, #15
 800232a:	4023      	ands	r3, r4
 800232c:	3b08      	subs	r3, #8
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	430a      	orrs	r2, r1
 8002332:	3306      	adds	r3, #6
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	18c3      	adds	r3, r0, r3
 8002338:	3304      	adds	r3, #4
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b003      	add	sp, #12
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	045b      	lsls	r3, r3, #17
 800235c:	429a      	cmp	r2, r3
 800235e:	d301      	bcc.n	8002364 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002360:	2301      	movs	r3, #1
 8002362:	e010      	b.n	8002386 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <SysTick_Config+0x44>)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	3a01      	subs	r2, #1
 800236a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236c:	2301      	movs	r3, #1
 800236e:	425b      	negs	r3, r3
 8002370:	2103      	movs	r1, #3
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff ff7c 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x44>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x44>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	210f      	movs	r1, #15
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	1c02      	adds	r2, r0, #0
 80023a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	0011      	movs	r1, r2
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b004      	add	sp, #16
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	0002      	movs	r2, r0
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff ff33 	bl	800223c <__NVIC_EnableIRQ>
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff ffaf 	bl	800234c <SysTick_Config>
 80023ee:	0003      	movs	r3, r0
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	210f      	movs	r1, #15
 8002402:	187b      	adds	r3, r7, r1
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2225      	movs	r2, #37	; 0x25
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d006      	beq.n	8002422 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e02a      	b.n	8002478 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	210e      	movs	r1, #14
 800242e:	438a      	bics	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	438a      	bics	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	221c      	movs	r2, #28
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2101      	movs	r1, #1
 8002450:	4091      	lsls	r1, r2
 8002452:	000a      	movs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2225      	movs	r2, #37	; 0x25
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2224      	movs	r2, #36	; 0x24
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	0010      	movs	r0, r2
 8002476:	4798      	blx	r3
    }
  }
  return status;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2225      	movs	r2, #37	; 0x25
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	b2db      	uxtb	r3, r3
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024b6:	e14f      	b.n	8002758 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4091      	lsls	r1, r2
 80024c2:	000a      	movs	r2, r1
 80024c4:	4013      	ands	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d100      	bne.n	80024d0 <HAL_GPIO_Init+0x30>
 80024ce:	e140      	b.n	8002752 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2203      	movs	r2, #3
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d130      	bne.n	800254a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	409a      	lsls	r2, r3
 80024f6:	0013      	movs	r3, r2
 80024f8:	43da      	mvns	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251e:	2201      	movs	r2, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	2201      	movs	r2, #1
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2203      	movs	r2, #3
 8002550:	4013      	ands	r3, r2
 8002552:	2b03      	cmp	r3, #3
 8002554:	d017      	beq.n	8002586 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2203      	movs	r2, #3
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	43da      	mvns	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	4013      	ands	r3, r2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d123      	bne.n	80025da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	58d3      	ldr	r3, [r2, r3]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2207      	movs	r2, #7
 80025a4:	4013      	ands	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	43da      	mvns	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2107      	movs	r1, #7
 80025be:	400b      	ands	r3, r1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	6939      	ldr	r1, [r7, #16]
 80025d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	43da      	mvns	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2203      	movs	r2, #3
 80025f8:	401a      	ands	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	029b      	lsls	r3, r3, #10
 8002616:	4013      	ands	r3, r2
 8002618:	d100      	bne.n	800261c <HAL_GPIO_Init+0x17c>
 800261a:	e09a      	b.n	8002752 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261c:	4b54      	ldr	r3, [pc, #336]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 800261e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002622:	2101      	movs	r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_GPIO_Init+0x2d4>)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	589b      	ldr	r3, [r3, r2]
 8002634:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	409a      	lsls	r2, r3
 8002642:	0013      	movs	r3, r2
 8002644:	43da      	mvns	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	23a0      	movs	r3, #160	; 0xa0
 8002650:	05db      	lsls	r3, r3, #23
 8002652:	429a      	cmp	r2, r3
 8002654:	d019      	beq.n	800268a <HAL_GPIO_Init+0x1ea>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_GPIO_Init+0x2d8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0x1e6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_GPIO_Init+0x2dc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_GPIO_Init+0x1e2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_GPIO_Init+0x2e0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x1de>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a44      	ldr	r2, [pc, #272]	; (8002784 <HAL_GPIO_Init+0x2e4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_GPIO_Init+0x1da>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x1ec>
 800267a:	2306      	movs	r3, #6
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x1ec>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x1ec>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x1ec>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x1ec>
 800268a:	2300      	movs	r3, #0
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	2103      	movs	r1, #3
 8002690:	400a      	ands	r2, r1
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x2d4>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43da      	mvns	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	035b      	lsls	r3, r3, #13
 80026c2:	4013      	ands	r3, r2
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43da      	mvns	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	039b      	lsls	r3, r3, #14
 80026ec:	4013      	ands	r3, r2
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43da      	mvns	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	4013      	ands	r3, r2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43da      	mvns	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	025b      	lsls	r3, r3, #9
 8002740:	4013      	ands	r3, r2
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	40da      	lsrs	r2, r3
 8002760:	1e13      	subs	r3, r2, #0
 8002762:	d000      	beq.n	8002766 <HAL_GPIO_Init+0x2c6>
 8002764:	e6a8      	b.n	80024b8 <HAL_GPIO_Init+0x18>
  }
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b006      	add	sp, #24
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	50000400 	.word	0x50000400
 800277c:	50000800 	.word	0x50000800
 8002780:	50000c00 	.word	0x50000c00
 8002784:	50001c00 	.word	0x50001c00
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	000a      	movs	r2, r1
 8002796:	1cbb      	adds	r3, r7, #2
 8002798:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	1cba      	adds	r2, r7, #2
 80027a0:	8812      	ldrh	r2, [r2, #0]
 80027a2:	4013      	ands	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027a6:	230f      	movs	r3, #15
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e003      	b.n	80027b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	0008      	movs	r0, r1
 80027d0:	0011      	movs	r1, r2
 80027d2:	1cbb      	adds	r3, r7, #2
 80027d4:	1c02      	adds	r2, r0, #0
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	1c7b      	adds	r3, r7, #1
 80027da:	1c0a      	adds	r2, r1, #0
 80027dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027de:	1c7b      	adds	r3, r7, #1
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	1cbb      	adds	r3, r7, #2
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80027f0:	1cbb      	adds	r3, r7, #2
 80027f2:	881a      	ldrh	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	0002      	movs	r2, r0
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	1dba      	adds	r2, r7, #6
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	4013      	ands	r3, r2
 8002816:	d008      	beq.n	800282a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800281a:	1dba      	adds	r2, r7, #6
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff fa73 	bl	8001d10 <HAL_GPIO_EXTI_Callback>
  }
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b002      	add	sp, #8
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e082      	b.n	8002950 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2241      	movs	r2, #65	; 0x41
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f7ff fb5f 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2241      	movs	r2, #65	; 0x41
 800286a:	2124      	movs	r1, #36	; 0x24
 800286c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	438a      	bics	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4934      	ldr	r1, [pc, #208]	; (8002958 <HAL_I2C_Init+0x120>)
 8002888:	400a      	ands	r2, r1
 800288a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4931      	ldr	r1, [pc, #196]	; (800295c <HAL_I2C_Init+0x124>)
 8002898:	400a      	ands	r2, r1
 800289a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d108      	bne.n	80028b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0209      	lsls	r1, r1, #8
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e007      	b.n	80028c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2184      	movs	r1, #132	; 0x84
 80028c0:	0209      	lsls	r1, r1, #8
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d104      	bne.n	80028d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	491f      	ldr	r1, [pc, #124]	; (8002960 <HAL_I2C_Init+0x128>)
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	491a      	ldr	r1, [pc, #104]	; (800295c <HAL_I2C_Init+0x124>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	431a      	orrs	r2, r3
 8002902:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69d9      	ldr	r1, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2241      	movs	r2, #65	; 0x41
 800293c:	2120      	movs	r1, #32
 800293e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2242      	movs	r2, #66	; 0x42
 800294a:	2100      	movs	r1, #0
 800294c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}
 8002958:	f0ffffff 	.word	0xf0ffffff
 800295c:	ffff7fff 	.word	0xffff7fff
 8002960:	02008000 	.word	0x02008000

08002964 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	0008      	movs	r0, r1
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	0019      	movs	r1, r3
 8002972:	230a      	movs	r3, #10
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	1c02      	adds	r2, r0, #0
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	2308      	movs	r3, #8
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	1c0a      	adds	r2, r1, #0
 8002980:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2241      	movs	r2, #65	; 0x41
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d000      	beq.n	8002990 <HAL_I2C_Master_Transmit+0x2c>
 800298e:	e0e7      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	5c9b      	ldrb	r3, [r3, r2]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_I2C_Master_Transmit+0x3a>
 800299a:	2302      	movs	r3, #2
 800299c:	e0e1      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1fe>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a6:	f7ff fc3f 	bl	8002228 <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	0219      	lsls	r1, r3, #8
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2319      	movs	r3, #25
 80029ba:	2201      	movs	r2, #1
 80029bc:	f001 ff4c 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	1e03      	subs	r3, r0, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0cc      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2241      	movs	r2, #65	; 0x41
 80029cc:	2121      	movs	r1, #33	; 0x21
 80029ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2242      	movs	r2, #66	; 0x42
 80029d4:	2110      	movs	r1, #16
 80029d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2208      	movs	r2, #8
 80029e8:	18ba      	adds	r2, r7, r2
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2bff      	cmp	r3, #255	; 0xff
 80029fc:	d911      	bls.n	8002a22 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	045c      	lsls	r4, r3, #17
 8002a0e:	230a      	movs	r3, #10
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	8819      	ldrh	r1, [r3, #0]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <HAL_I2C_Master_Transmit+0x208>)
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	0023      	movs	r3, r4
 8002a1c:	f002 f8f4 	bl	8004c08 <I2C_TransferConfig>
 8002a20:	e075      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	049c      	lsls	r4, r3, #18
 8002a36:	230a      	movs	r3, #10
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	8819      	ldrh	r1, [r3, #0]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_I2C_Master_Transmit+0x208>)
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	0023      	movs	r3, r4
 8002a44:	f002 f8e0 	bl	8004c08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a48:	e061      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f001 ff4f 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e081      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03a      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x1aa>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d136      	bne.n	8002b0e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	f001 fed3 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e053      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2bff      	cmp	r3, #255	; 0xff
 8002ac2:	d911      	bls.n	8002ae8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	045c      	lsls	r4, r3, #17
 8002ad4:	230a      	movs	r3, #10
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	8819      	ldrh	r1, [r3, #0]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	2300      	movs	r3, #0
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	0023      	movs	r3, r4
 8002ae2:	f002 f891 	bl	8004c08 <I2C_TransferConfig>
 8002ae6:	e012      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	049c      	lsls	r4, r3, #18
 8002afc:	230a      	movs	r3, #10
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	8819      	ldrh	r1, [r3, #0]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	2300      	movs	r3, #0
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	0023      	movs	r3, r4
 8002b0a:	f002 f87d 	bl	8004c08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d198      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 ff2e 	bl	8004980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e01a      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2220      	movs	r2, #32
 8002b32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	490c      	ldr	r1, [pc, #48]	; (8002b70 <HAL_I2C_Master_Transmit+0x20c>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2241      	movs	r2, #65	; 0x41
 8002b48:	2120      	movs	r1, #32
 8002b4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2242      	movs	r2, #66	; 0x42
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e000      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
  }
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b007      	add	sp, #28
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	80002000 	.word	0x80002000
 8002b70:	fe00e800 	.word	0xfe00e800

08002b74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	000c      	movs	r4, r1
 8002b7e:	0010      	movs	r0, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	230a      	movs	r3, #10
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	1c22      	adds	r2, r4, #0
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	1c02      	adds	r2, r0, #0
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	1c0a      	adds	r2, r1, #0
 8002b96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2241      	movs	r2, #65	; 0x41
 8002b9c:	5c9b      	ldrb	r3, [r3, r2]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d000      	beq.n	8002ba6 <HAL_I2C_Mem_Write+0x32>
 8002ba4:	e10c      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_I2C_Mem_Write+0x42>
 8002bac:	232c      	movs	r3, #44	; 0x2c
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0ff      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2C_Mem_Write+0x5c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0f8      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd8:	f7ff fb26 	bl	8002228 <HAL_GetTick>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	0219      	lsls	r1, r3, #8
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2319      	movs	r3, #25
 8002bec:	2201      	movs	r2, #1
 8002bee:	f001 fe33 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0e3      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2241      	movs	r2, #65	; 0x41
 8002bfe:	2121      	movs	r1, #33	; 0x21
 8002c00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2242      	movs	r2, #66	; 0x42
 8002c06:	2140      	movs	r1, #64	; 0x40
 8002c08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	222c      	movs	r2, #44	; 0x2c
 8002c1a:	18ba      	adds	r2, r7, r2
 8002c1c:	8812      	ldrh	r2, [r2, #0]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	881c      	ldrh	r4, [r3, #0]
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	230a      	movs	r3, #10
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	8819      	ldrh	r1, [r3, #0]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	0023      	movs	r3, r4
 8002c42:	f001 f847 	bl	8003cd4 <I2C_RequestMemoryWrite>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0b5      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2bff      	cmp	r3, #255	; 0xff
 8002c5e:	d911      	bls.n	8002c84 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	045c      	lsls	r4, r3, #17
 8002c70:	230a      	movs	r3, #10
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	8819      	ldrh	r1, [r3, #0]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	0023      	movs	r3, r4
 8002c7e:	f001 ffc3 	bl	8004c08 <I2C_TransferConfig>
 8002c82:	e012      	b.n	8002caa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	049c      	lsls	r4, r3, #18
 8002c98:	230a      	movs	r3, #10
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	8819      	ldrh	r1, [r3, #0]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	0023      	movs	r3, r4
 8002ca6:	f001 ffaf 	bl	8004c08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 fe1f 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e081      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d03a      	beq.n	8002d6e <HAL_I2C_Mem_Write+0x1fa>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d136      	bne.n	8002d6e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	0013      	movs	r3, r2
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	f001 fda3 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	1e03      	subs	r3, r0, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e053      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2bff      	cmp	r3, #255	; 0xff
 8002d22:	d911      	bls.n	8002d48 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	045c      	lsls	r4, r3, #17
 8002d34:	230a      	movs	r3, #10
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	8819      	ldrh	r1, [r3, #0]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	0023      	movs	r3, r4
 8002d42:	f001 ff61 	bl	8004c08 <I2C_TransferConfig>
 8002d46:	e012      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	049c      	lsls	r4, r3, #18
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	8819      	ldrh	r1, [r3, #0]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	2300      	movs	r3, #0
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	0023      	movs	r3, r4
 8002d6a:	f001 ff4d 	bl	8004c08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d198      	bne.n	8002caa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f001 fdfe 	bl	8004980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d84:	1e03      	subs	r3, r0, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e01a      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2220      	movs	r2, #32
 8002d92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	490b      	ldr	r1, [pc, #44]	; (8002dcc <HAL_I2C_Mem_Write+0x258>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2241      	movs	r2, #65	; 0x41
 8002da8:	2120      	movs	r1, #32
 8002daa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2242      	movs	r2, #66	; 0x42
 8002db0:	2100      	movs	r1, #0
 8002db2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e000      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b007      	add	sp, #28
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	fe00e800 	.word	0xfe00e800

08002dd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	000c      	movs	r4, r1
 8002dda:	0010      	movs	r0, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	230a      	movs	r3, #10
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	1c22      	adds	r2, r4, #0
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	2308      	movs	r3, #8
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	1c02      	adds	r2, r0, #0
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	1dbb      	adds	r3, r7, #6
 8002df0:	1c0a      	adds	r2, r1, #0
 8002df2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2241      	movs	r2, #65	; 0x41
 8002df8:	5c9b      	ldrb	r3, [r3, r2]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d000      	beq.n	8002e02 <HAL_I2C_Mem_Read+0x32>
 8002e00:	e110      	b.n	8003024 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_I2C_Mem_Read+0x42>
 8002e08:	232c      	movs	r3, #44	; 0x2c
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e103      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_I2C_Mem_Read+0x5c>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e0fc      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2240      	movs	r2, #64	; 0x40
 8002e30:	2101      	movs	r1, #1
 8002e32:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e34:	f7ff f9f8 	bl	8002228 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	0219      	lsls	r1, r3, #8
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2319      	movs	r3, #25
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f001 fd05 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0e7      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2241      	movs	r2, #65	; 0x41
 8002e5a:	2122      	movs	r1, #34	; 0x22
 8002e5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2242      	movs	r2, #66	; 0x42
 8002e62:	2140      	movs	r1, #64	; 0x40
 8002e64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	222c      	movs	r2, #44	; 0x2c
 8002e76:	18ba      	adds	r2, r7, r2
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e82:	1dbb      	adds	r3, r7, #6
 8002e84:	881c      	ldrh	r4, [r3, #0]
 8002e86:	2308      	movs	r3, #8
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	230a      	movs	r3, #10
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	8819      	ldrh	r1, [r3, #0]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	0023      	movs	r3, r4
 8002e9e:	f000 ff7d 	bl	8003d9c <I2C_RequestMemoryRead>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2240      	movs	r2, #64	; 0x40
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0b9      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2bff      	cmp	r3, #255	; 0xff
 8002eba:	d911      	bls.n	8002ee0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	045c      	lsls	r4, r3, #17
 8002ecc:	230a      	movs	r3, #10
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	8819      	ldrh	r1, [r3, #0]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_I2C_Mem_Read+0x260>)
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	0023      	movs	r3, r4
 8002eda:	f001 fe95 	bl	8004c08 <I2C_TransferConfig>
 8002ede:	e012      	b.n	8002f06 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	049c      	lsls	r4, r3, #18
 8002ef4:	230a      	movs	r3, #10
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	8819      	ldrh	r1, [r3, #0]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <HAL_I2C_Mem_Read+0x260>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	0023      	movs	r3, r4
 8002f02:	f001 fe81 	bl	8004c08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	0013      	movs	r3, r2
 8002f10:	2200      	movs	r2, #0
 8002f12:	2104      	movs	r1, #4
 8002f14:	f001 fca0 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e082      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03a      	beq.n	8002fd2 <HAL_I2C_Mem_Read+0x202>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d136      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	f001 fc71 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e053      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2bff      	cmp	r3, #255	; 0xff
 8002f86:	d911      	bls.n	8002fac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	045c      	lsls	r4, r3, #17
 8002f98:	230a      	movs	r3, #10
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	8819      	ldrh	r1, [r3, #0]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	0023      	movs	r3, r4
 8002fa6:	f001 fe2f 	bl	8004c08 <I2C_TransferConfig>
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	049c      	lsls	r4, r3, #18
 8002fc0:	230a      	movs	r3, #10
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	8819      	ldrh	r1, [r3, #0]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	0023      	movs	r3, r4
 8002fce:	f001 fe1b 	bl	8004c08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d194      	bne.n	8002f06 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f001 fccc 	bl	8004980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe8:	1e03      	subs	r3, r0, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e01a      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	490c      	ldr	r1, [pc, #48]	; (8003034 <HAL_I2C_Mem_Read+0x264>)
 8003004:	400a      	ands	r2, r1
 8003006:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2241      	movs	r2, #65	; 0x41
 800300c:	2120      	movs	r1, #32
 800300e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2242      	movs	r2, #66	; 0x42
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	2100      	movs	r1, #0
 800301e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b007      	add	sp, #28
 800302c:	bd90      	pop	{r4, r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	80002400 	.word	0x80002400
 8003034:	fe00e800 	.word	0xfe00e800

08003038 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2241      	movs	r2, #65	; 0x41
 800304c:	5c9b      	ldrb	r3, [r3, r2]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	001a      	movs	r2, r3
 8003052:	2328      	movs	r3, #40	; 0x28
 8003054:	4013      	ands	r3, r2
 8003056:	2b28      	cmp	r3, #40	; 0x28
 8003058:	d000      	beq.n	800305c <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 800305a:	e09f      	b.n	800319c <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8003062:	1dbb      	adds	r3, r7, #6
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e093      	b.n	800319e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003076:	4a4c      	ldr	r2, [pc, #304]	; (80031a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0011      	movs	r1, r2
 800307c:	0018      	movs	r0, r3
 800307e:	f001 fe8b 	bl	8004d98 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2240      	movs	r2, #64	; 0x40
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 800308c:	2302      	movs	r3, #2
 800308e:	e086      	b.n	800319e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b2a      	cmp	r3, #42	; 0x2a
 80030a2:	d12c      	bne.n	80030fe <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2102      	movs	r1, #2
 80030a8:	0018      	movs	r0, r3
 80030aa:	f001 fe75 	bl	8004d98 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	401a      	ands	r2, r3
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	429a      	cmp	r2, r3
 80030c0:	d11d      	bne.n	80030fe <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4937      	ldr	r1, [pc, #220]	; (80031ac <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d011      	beq.n	80030fe <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7ff f986 	bl	80023f8 <HAL_DMA_Abort_IT>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d006      	beq.n	80030fe <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	0018      	movs	r0, r3
 80030fc:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2241      	movs	r2, #65	; 0x41
 8003102:	2129      	movs	r1, #41	; 0x29
 8003104:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2242      	movs	r2, #66	; 0x42
 800310a:	2120      	movs	r1, #32
 800310c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4923      	ldr	r1, [pc, #140]	; (80031ac <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003120:	400a      	ands	r2, r1
 8003122:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1dba      	adds	r2, r7, #6
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 8003146:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2208      	movs	r2, #8
 8003150:	4013      	ands	r3, r2
 8003152:	3b08      	subs	r3, #8
 8003154:	425a      	negs	r2, r3
 8003156:	4153      	adcs	r3, r2
 8003158:	b2da      	uxtb	r2, r3
 800315a:	2117      	movs	r1, #23
 800315c:	187b      	adds	r3, r7, r1
 800315e:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8003174:	187b      	adds	r3, r7, r1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0011      	movs	r1, r2
 8003192:	0018      	movs	r0, r3
 8003194:	f001 fd72 	bl	8004c7c <I2C_Enable_IRQ>

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
  }
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	00008001 	.word	0x00008001
 80031ac:	ffff7fff 	.word	0xffff7fff
 80031b0:	0800481b 	.word	0x0800481b
 80031b4:	080034d9 	.word	0x080034d9

080031b8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	1dbb      	adds	r3, r7, #6
 80031c6:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2241      	movs	r2, #65	; 0x41
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	001a      	movs	r2, r3
 80031d2:	2328      	movs	r3, #40	; 0x28
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b28      	cmp	r3, #40	; 0x28
 80031d8:	d000      	beq.n	80031dc <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80031da:	e09f      	b.n	800331c <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80031e2:	1dbb      	adds	r3, r7, #6
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e093      	b.n	800331e <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031f6:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f001 fdcb 	bl	8004d98 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 800320c:	2302      	movs	r3, #2
 800320e:	e086      	b.n	800331e <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2241      	movs	r2, #65	; 0x41
 800321c:	5c9b      	ldrb	r3, [r3, r2]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b29      	cmp	r3, #41	; 0x29
 8003222:	d12c      	bne.n	800327e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2101      	movs	r1, #1
 8003228:	0018      	movs	r0, r3
 800322a:	f001 fdb5 	bl	8004d98 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	401a      	ands	r2, r3
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	01db      	lsls	r3, r3, #7
 800323e:	429a      	cmp	r2, r3
 8003240:	d11d      	bne.n	800327e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4937      	ldr	r1, [pc, #220]	; (800332c <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 800324e:	400a      	ands	r2, r1
 8003250:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff f8c6 	bl	80023f8 <HAL_DMA_Abort_IT>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d006      	beq.n	800327e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	0018      	movs	r0, r3
 800327c:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2241      	movs	r2, #65	; 0x41
 8003282:	212a      	movs	r1, #42	; 0x2a
 8003284:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2242      	movs	r2, #66	; 0x42
 800328a:	2120      	movs	r1, #32
 800328c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4925      	ldr	r1, [pc, #148]	; (8003334 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1dba      	adds	r2, r7, #6
 80032ae:	8812      	ldrh	r2, [r2, #0]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2208      	movs	r2, #8
 80032d0:	4013      	ands	r3, r2
 80032d2:	3b08      	subs	r3, #8
 80032d4:	425a      	negs	r2, r3
 80032d6:	4153      	adcs	r3, r2
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	2117      	movs	r1, #23
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800330c:	4a06      	ldr	r2, [pc, #24]	; (8003328 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0011      	movs	r1, r2
 8003312:	0018      	movs	r0, r3
 8003314:	f001 fcb2 	bl	8004c7c <I2C_Enable_IRQ>

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
  }
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b006      	add	sp, #24
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	00008002 	.word	0x00008002
 800332c:	ffffbfff 	.word	0xffffbfff
 8003330:	0800481b 	.word	0x0800481b
 8003334:	ffff7fff 	.word	0xffff7fff
 8003338:	080034d9 	.word	0x080034d9

0800333c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2241      	movs	r2, #65	; 0x41
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	d10f      	bne.n	8003370 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2241      	movs	r2, #65	; 0x41
 8003354:	2128      	movs	r1, #40	; 0x28
 8003356:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_I2C_EnableListen_IT+0x40>)
 800335c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f001 fc88 	bl	8004c7c <I2C_Enable_IRQ>

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b002      	add	sp, #8
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	080034d9 	.word	0x080034d9

08003380 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
  }
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80033dc:	d00a      	beq.n	80033f4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	2201      	movs	r2, #1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	0052      	lsls	r2, r2, #1
 80033f2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003404:	d00a      	beq.n	800341c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	2208      	movs	r2, #8
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	00d2      	lsls	r2, r2, #3
 800341a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d00e      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800342c:	d00a      	beq.n	8003444 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	2202      	movs	r2, #2
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	220b      	movs	r2, #11
 800344e:	4013      	ands	r3, r2
 8003450:	d005      	beq.n	800345e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f001 f891 	bl	8004580 <I2C_ITError>
  }
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b006      	add	sp, #24
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b002      	add	sp, #8
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b002      	add	sp, #8
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <I2C_Slave_ISR_IT+0x24>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0e6      	b.n	80036ca <I2C_Slave_ISR_IT+0x1f2>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	2101      	movs	r1, #1
 8003502:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2220      	movs	r2, #32
 8003508:	4013      	ands	r3, r2
 800350a:	d009      	beq.n	8003520 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003512:	d005      	beq.n	8003520 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0011      	movs	r1, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f000 feb8 	bl	8004290 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2210      	movs	r2, #16
 8003524:	4013      	ands	r3, r2
 8003526:	d052      	beq.n	80035ce <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2210      	movs	r2, #16
 800352c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800352e:	d04e      	beq.n	80035ce <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12d      	bne.n	8003596 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2241      	movs	r2, #65	; 0x41
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b28      	cmp	r3, #40	; 0x28
 8003544:	d10b      	bne.n	800355e <I2C_Slave_ISR_IT+0x86>
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	049b      	lsls	r3, r3, #18
 800354c:	429a      	cmp	r2, r3
 800354e:	d106      	bne.n	800355e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f000 ffba 	bl	80044d0 <I2C_ITListenCplt>
 800355c:	e036      	b.n	80035cc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2241      	movs	r2, #65	; 0x41
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b29      	cmp	r3, #41	; 0x29
 8003568:	d110      	bne.n	800358c <I2C_Slave_ISR_IT+0xb4>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a59      	ldr	r2, [pc, #356]	; (80036d4 <I2C_Slave_ISR_IT+0x1fc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00c      	beq.n	800358c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2210      	movs	r2, #16
 8003578:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0018      	movs	r0, r3
 800357e:	f001 f92a 	bl	80047d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fd51 	bl	800402c <I2C_ITSlaveSeqCplt>
 800358a:	e01f      	b.n	80035cc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003594:	e091      	b.n	80036ba <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	2204      	movs	r2, #4
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <I2C_Slave_ISR_IT+0xe4>
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	045b      	lsls	r3, r3, #17
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d000      	beq.n	80035bc <I2C_Slave_ISR_IT+0xe4>
 80035ba:	e07e      	b.n	80036ba <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0011      	movs	r1, r2
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 ffdb 	bl	8004580 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80035ca:	e076      	b.n	80036ba <I2C_Slave_ISR_IT+0x1e2>
 80035cc:	e075      	b.n	80036ba <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2204      	movs	r2, #4
 80035d2:	4013      	ands	r3, r2
 80035d4:	d02f      	beq.n	8003636 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035dc:	d02b      	beq.n	8003636 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d018      	beq.n	800361a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d14c      	bne.n	80036be <I2C_Slave_ISR_IT+0x1e6>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <I2C_Slave_ISR_IT+0x1fc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d048      	beq.n	80036be <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	0018      	movs	r0, r3
 8003630:	f000 fcfc 	bl	800402c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003634:	e043      	b.n	80036be <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2208      	movs	r2, #8
 800363a:	4013      	ands	r3, r2
 800363c:	d00a      	beq.n	8003654 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2208      	movs	r2, #8
 8003642:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003644:	d006      	beq.n	8003654 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	0011      	movs	r1, r2
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fc07 	bl	8003e60 <I2C_ITAddrCplt>
 8003652:	e035      	b.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2202      	movs	r2, #2
 8003658:	4013      	ands	r3, r2
 800365a:	d031      	beq.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003662:	d02d      	beq.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d018      	beq.n	80036a0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
 800369e:	e00f      	b.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	045b      	lsls	r3, r3, #17
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d002      	beq.n	80036b0 <I2C_Slave_ISR_IT+0x1d8>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 fcba 	bl	800402c <I2C_ITSlaveSeqCplt>
 80036b8:	e002      	b.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	e000      	b.n	80036c0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80036be:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	ffff0000 	.word	0xffff0000

080036d8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	5c9b      	ldrb	r3, [r3, r2]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <I2C_Master_ISR_DMA+0x1a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0e7      	b.n	80038c2 <I2C_Master_ISR_DMA+0x1ea>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2210      	movs	r2, #16
 80036fe:	4013      	ands	r3, r2
 8003700:	d017      	beq.n	8003732 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2210      	movs	r2, #16
 8003706:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003708:	d013      	beq.n	8003732 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	2204      	movs	r2, #4
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2120      	movs	r1, #32
 8003722:	0018      	movs	r0, r3
 8003724:	f001 faaa 	bl	8004c7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	0018      	movs	r0, r3
 800372c:	f001 f853 	bl	80047d6 <I2C_Flush_TXDR>
 8003730:	e0c2      	b.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	4013      	ands	r3, r2
 8003738:	d100      	bne.n	800373c <I2C_Master_ISR_DMA+0x64>
 800373a:	e07c      	b.n	8003836 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003742:	d100      	bne.n	8003746 <I2C_Master_ISR_DMA+0x6e>
 8003744:	e077      	b.n	8003836 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	438a      	bics	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d055      	beq.n	800380c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	b29a      	uxth	r2, r3
 8003768:	2312      	movs	r3, #18
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	0592      	lsls	r2, r2, #22
 800376e:	0d92      	lsrs	r2, r2, #22
 8003770:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2bff      	cmp	r3, #255	; 0xff
 800377a:	d906      	bls.n	800378a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	22ff      	movs	r2, #255	; 0xff
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	045b      	lsls	r3, r3, #17
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e010      	b.n	80037ac <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	4a4c      	ldr	r2, [pc, #304]	; (80038cc <I2C_Master_ISR_DMA+0x1f4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e002      	b.n	80037ac <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	049b      	lsls	r3, r3, #18
 80037aa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	697c      	ldr	r4, [r7, #20]
 80037b4:	2312      	movs	r3, #18
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	8819      	ldrh	r1, [r3, #0]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	2300      	movs	r3, #0
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	0023      	movs	r3, r4
 80037c2:	f001 fa21 	bl	8004c08 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2241      	movs	r2, #65	; 0x41
 80037dc:	5c9b      	ldrb	r3, [r3, r2]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b22      	cmp	r3, #34	; 0x22
 80037e2:	d109      	bne.n	80037f8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	0209      	lsls	r1, r1, #8
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037f6:	e05f      	b.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	01c9      	lsls	r1, r1, #7
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800380a:	e055      	b.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	049b      	lsls	r3, r3, #18
 8003816:	401a      	ands	r2, r3
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	049b      	lsls	r3, r3, #18
 800381c:	429a      	cmp	r2, r3
 800381e:	d004      	beq.n	800382a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 fbc0 	bl	8003fa8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003828:	e046      	b.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2140      	movs	r1, #64	; 0x40
 800382e:	0018      	movs	r0, r3
 8003830:	f000 fea6 	bl	8004580 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003834:	e040      	b.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2240      	movs	r2, #64	; 0x40
 800383a:	4013      	ands	r3, r2
 800383c:	d02c      	beq.n	8003898 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003844:	d028      	beq.n	8003898 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11d      	bne.n	800388c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	049b      	lsls	r3, r3, #18
 800385a:	401a      	ands	r2, r3
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	049b      	lsls	r3, r3, #18
 8003860:	429a      	cmp	r2, r3
 8003862:	d028      	beq.n	80038b6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <I2C_Master_ISR_DMA+0x1f4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d109      	bne.n	8003882 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	01c9      	lsls	r1, r1, #7
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003880:	e019      	b.n	80038b6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fb8f 	bl	8003fa8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800388a:	e014      	b.n	80038b6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	0018      	movs	r0, r3
 8003892:	f000 fe75 	bl	8004580 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003896:	e00e      	b.n	80038b6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2220      	movs	r2, #32
 800389c:	4013      	ands	r3, r2
 800389e:	d00b      	beq.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038a6:	d007      	beq.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	0011      	movs	r1, r2
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fc20 	bl	80040f4 <I2C_ITMasterCplt>
 80038b4:	e000      	b.n	80038b8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80038b6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	2100      	movs	r1, #0
 80038be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b007      	add	sp, #28
 80038c8:	bd90      	pop	{r4, r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	ffff0000 	.word	0xffff0000

080038d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80038dc:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <I2C_Mem_ISR_DMA+0x230>)
 80038de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <I2C_Mem_ISR_DMA+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e104      	b.n	8003af8 <I2C_Mem_ISR_DMA+0x228>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2240      	movs	r2, #64	; 0x40
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2210      	movs	r2, #16
 80038fa:	4013      	ands	r3, r2
 80038fc:	d017      	beq.n	800392e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2210      	movs	r2, #16
 8003902:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003904:	d013      	beq.n	800392e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	2204      	movs	r2, #4
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2120      	movs	r1, #32
 800391e:	0018      	movs	r0, r3
 8003920:	f001 f9ac 	bl	8004c7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0018      	movs	r0, r3
 8003928:	f000 ff55 	bl	80047d6 <I2C_Flush_TXDR>
 800392c:	e0df      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2202      	movs	r2, #2
 8003932:	4013      	ands	r3, r2
 8003934:	d00d      	beq.n	8003952 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800393c:	d009      	beq.n	8003952 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	4252      	negs	r2, r2
 800394e:	651a      	str	r2, [r3, #80]	; 0x50
 8003950:	e0cd      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	4013      	ands	r3, r2
 8003958:	d05e      	beq.n	8003a18 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2240      	movs	r2, #64	; 0x40
 800395e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003960:	d05a      	beq.n	8003a18 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2110      	movs	r1, #16
 8003966:	0018      	movs	r0, r3
 8003968:	f001 f988 	bl	8004c7c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d04a      	beq.n	8003a0c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2bff      	cmp	r3, #255	; 0xff
 800397e:	d910      	bls.n	80039a2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	b299      	uxth	r1, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	b2da      	uxtb	r2, r3
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	045b      	lsls	r3, r3, #17
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	2400      	movs	r4, #0
 800399a:	9400      	str	r4, [sp, #0]
 800399c:	f001 f934 	bl	8004c08 <I2C_TransferConfig>
 80039a0:	e011      	b.n	80039c6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b0:	b299      	uxth	r1, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	049b      	lsls	r3, r3, #18
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	2400      	movs	r4, #0
 80039c0:	9400      	str	r4, [sp, #0]
 80039c2:	f001 f921 	bl	8004c08 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2241      	movs	r2, #65	; 0x41
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b22      	cmp	r3, #34	; 0x22
 80039e2:	d109      	bne.n	80039f8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	0209      	lsls	r1, r1, #8
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80039f6:	e07a      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	01c9      	lsls	r1, r1, #7
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a0a:	e070      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fdb5 	bl	8004580 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003a16:	e06a      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2240      	movs	r2, #64	; 0x40
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d058      	beq.n	8003ad2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2240      	movs	r2, #64	; 0x40
 8003a24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a26:	d054      	beq.n	8003ad2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2241      	movs	r2, #65	; 0x41
 8003a2c:	5c9b      	ldrb	r3, [r3, r2]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b22      	cmp	r3, #34	; 0x22
 8003a32:	d101      	bne.n	8003a38 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8003a34:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <I2C_Mem_ISR_DMA+0x234>)
 8003a36:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2bff      	cmp	r3, #255	; 0xff
 8003a40:	d911      	bls.n	8003a66 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	b299      	uxth	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	045c      	lsls	r4, r3, #17
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	0023      	movs	r3, r4
 8003a60:	f001 f8d2 	bl	8004c08 <I2C_TransferConfig>
 8003a64:	e012      	b.n	8003a8c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	b299      	uxth	r1, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	049c      	lsls	r4, r3, #18
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	0023      	movs	r3, r4
 8003a88:	f001 f8be 	bl	8004c08 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2241      	movs	r2, #65	; 0x41
 8003aa2:	5c9b      	ldrb	r3, [r3, r2]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b22      	cmp	r3, #34	; 0x22
 8003aa8:	d109      	bne.n	8003abe <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	0209      	lsls	r1, r1, #8
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003abc:	e017      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	01c9      	lsls	r1, r1, #7
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ad0:	e00d      	b.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d009      	beq.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ae0:	d005      	beq.n	8003aee <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 fb03 	bl	80040f4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	2100      	movs	r1, #0
 8003af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b007      	add	sp, #28
 8003afe:	bd90      	pop	{r4, r7, pc}
 8003b00:	80002000 	.word	0x80002000
 8003b04:	80002400 	.word	0x80002400

08003b08 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	5c9b      	ldrb	r3, [r3, r2]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <I2C_Slave_ISR_DMA+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0cd      	b.n	8003cc8 <I2C_Slave_ISR_DMA+0x1c0>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	2101      	movs	r1, #1
 8003b32:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2220      	movs	r2, #32
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b42:	d005      	beq.n	8003b50 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0011      	movs	r1, r2
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 fba0 	bl	8004290 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2210      	movs	r2, #16
 8003b54:	4013      	ands	r3, r2
 8003b56:	d100      	bne.n	8003b5a <I2C_Slave_ISR_DMA+0x52>
 8003b58:	e0a3      	b.n	8003ca2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b60:	d100      	bne.n	8003b64 <I2C_Slave_ISR_DMA+0x5c>
 8003b62:	e09e      	b.n	8003ca2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d105      	bne.n	8003b7a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b76:	d100      	bne.n	8003b7a <I2C_Slave_ISR_DMA+0x72>
 8003b78:	e08c      	b.n	8003c94 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00c      	beq.n	8003bbe <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	01db      	lsls	r3, r3, #7
 8003baa:	4013      	ands	r3, r2
 8003bac:	d007      	beq.n	8003bbe <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d12d      	bne.n	8003c20 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2241      	movs	r2, #65	; 0x41
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b28      	cmp	r3, #40	; 0x28
 8003bce:	d10b      	bne.n	8003be8 <I2C_Slave_ISR_DMA+0xe0>
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	049b      	lsls	r3, r3, #18
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d106      	bne.n	8003be8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 fc75 	bl	80044d0 <I2C_ITListenCplt>
 8003be6:	e054      	b.n	8003c92 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2241      	movs	r2, #65	; 0x41
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b29      	cmp	r3, #41	; 0x29
 8003bf2:	d110      	bne.n	8003c16 <I2C_Slave_ISR_DMA+0x10e>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	4a36      	ldr	r2, [pc, #216]	; (8003cd0 <I2C_Slave_ISR_DMA+0x1c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00c      	beq.n	8003c16 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2210      	movs	r2, #16
 8003c02:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 fde5 	bl	80047d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 fa0c 	bl	800402c <I2C_ITSlaveSeqCplt>
 8003c14:	e03d      	b.n	8003c92 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003c1e:	e03e      	b.n	8003c9e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003c34:	2317      	movs	r3, #23
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	2141      	movs	r1, #65	; 0x41
 8003c3c:	5c52      	ldrb	r2, [r2, r1]
 8003c3e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <I2C_Slave_ISR_DMA+0x148>
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	045b      	lsls	r3, r3, #17
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d126      	bne.n	8003c9e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c50:	2217      	movs	r2, #23
 8003c52:	18bb      	adds	r3, r7, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b21      	cmp	r3, #33	; 0x21
 8003c58:	d003      	beq.n	8003c62 <I2C_Slave_ISR_DMA+0x15a>
 8003c5a:	18bb      	adds	r3, r7, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b29      	cmp	r3, #41	; 0x29
 8003c60:	d103      	bne.n	8003c6a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
 8003c68:	e00b      	b.n	8003c82 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c6a:	2217      	movs	r2, #23
 8003c6c:	18bb      	adds	r3, r7, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b22      	cmp	r3, #34	; 0x22
 8003c72:	d003      	beq.n	8003c7c <I2C_Slave_ISR_DMA+0x174>
 8003c74:	18bb      	adds	r3, r7, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7a:	d102      	bne.n	8003c82 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2222      	movs	r2, #34	; 0x22
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	0011      	movs	r1, r2
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 fc78 	bl	8004580 <I2C_ITError>
      if (treatdmanack == 1U)
 8003c90:	e005      	b.n	8003c9e <I2C_Slave_ISR_DMA+0x196>
 8003c92:	e004      	b.n	8003c9e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c9c:	e00f      	b.n	8003cbe <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8003c9e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ca0:	e00d      	b.n	8003cbe <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2208      	movs	r2, #8
 8003cae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cb0:	d005      	beq.n	8003cbe <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 f8d1 	bl	8003e60 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2240      	movs	r2, #64	; 0x40
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b008      	add	sp, #32
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	ffff0000 	.word	0xffff0000

08003cd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003cd4:	b5b0      	push	{r4, r5, r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	000c      	movs	r4, r1
 8003cde:	0010      	movs	r0, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	250a      	movs	r5, #10
 8003ce4:	197b      	adds	r3, r7, r5
 8003ce6:	1c22      	adds	r2, r4, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	2308      	movs	r3, #8
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	1c02      	adds	r2, r0, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	1c0a      	adds	r2, r1, #0
 8003cf6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cf8:	1dbb      	adds	r3, r7, #6
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	045c      	lsls	r4, r3, #17
 8003d02:	197b      	adds	r3, r7, r5
 8003d04:	8819      	ldrh	r1, [r3, #0]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <I2C_RequestMemoryWrite+0xc4>)
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	0023      	movs	r3, r4
 8003d0e:	f000 ff7b 	bl	8004c08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fdeb 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e033      	b.n	8003d8e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d26:	1dbb      	adds	r3, r7, #6
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2e:	2308      	movs	r3, #8
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d3c:	e019      	b.n	8003d72 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d3e:	2308      	movs	r3, #8
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	6a39      	ldr	r1, [r7, #32]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 fdcc 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e014      	b.n	8003d8e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d64:	2308      	movs	r3, #8
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a3a      	ldr	r2, [r7, #32]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	0013      	movs	r3, r2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	f000 fd6a 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bdb0      	pop	{r4, r5, r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	80002000 	.word	0x80002000

08003d9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d9c:	b5b0      	push	{r4, r5, r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	000c      	movs	r4, r1
 8003da6:	0010      	movs	r0, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	250a      	movs	r5, #10
 8003dac:	197b      	adds	r3, r7, r5
 8003dae:	1c22      	adds	r2, r4, #0
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	2308      	movs	r3, #8
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	1c02      	adds	r2, r0, #0
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	1dbb      	adds	r3, r7, #6
 8003dbc:	1c0a      	adds	r2, r1, #0
 8003dbe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dc0:	1dbb      	adds	r3, r7, #6
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	197b      	adds	r3, r7, r5
 8003dc8:	8819      	ldrh	r1, [r3, #0]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <I2C_RequestMemoryRead+0xc0>)
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f000 ff19 	bl	8004c08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	6a39      	ldr	r1, [r7, #32]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 fd89 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003de2:	1e03      	subs	r3, r0, #0
 8003de4:	d001      	beq.n	8003dea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e033      	b.n	8003e52 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dea:	1dbb      	adds	r3, r7, #6
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	2308      	movs	r3, #8
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003e00:	e019      	b.n	8003e36 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e02:	2308      	movs	r3, #8
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	6a39      	ldr	r1, [r7, #32]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 fd6a 	bl	80048f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d001      	beq.n	8003e28 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e014      	b.n	8003e52 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e28:	2308      	movs	r3, #8
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	0013      	movs	r3, r2
 8003e40:	2200      	movs	r2, #0
 8003e42:	2140      	movs	r1, #64	; 0x40
 8003e44:	f000 fd08 	bl	8004858 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d001      	beq.n	8003e50 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bdb0      	pop	{r4, r5, r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	80002000 	.word	0x80002000

08003e60 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2241      	movs	r2, #65	; 0x41
 8003e6e:	5c9b      	ldrb	r3, [r3, r2]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	001a      	movs	r2, r3
 8003e74:	2328      	movs	r3, #40	; 0x28
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b28      	cmp	r3, #40	; 0x28
 8003e7a:	d000      	beq.n	8003e7e <I2C_ITAddrCplt+0x1e>
 8003e7c:	e088      	b.n	8003f90 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	250f      	movs	r5, #15
 8003e8a:	197b      	adds	r3, r7, r5
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	400a      	ands	r2, r1
 8003e90:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	200c      	movs	r0, #12
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	21fe      	movs	r1, #254	; 0xfe
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	240a      	movs	r4, #10
 8003eb0:	193b      	adds	r3, r7, r4
 8003eb2:	0592      	lsls	r2, r2, #22
 8003eb4:	0d92      	lsrs	r2, r2, #22
 8003eb6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	21fe      	movs	r1, #254	; 0xfe
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d148      	bne.n	8003f64 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ed2:	0021      	movs	r1, r4
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	09db      	lsrs	r3, r3, #7
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	183b      	adds	r3, r7, r0
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	4053      	eors	r3, r2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d120      	bne.n	8003f2e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003eec:	183b      	adds	r3, r7, r0
 8003eee:	187a      	adds	r2, r7, r1
 8003ef0:	8812      	ldrh	r2, [r2, #0]
 8003ef2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d14c      	bne.n	8003fa0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2208      	movs	r2, #8
 8003f12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f1c:	183b      	adds	r3, r7, r0
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	197b      	adds	r3, r7, r5
 8003f22:	7819      	ldrb	r1, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fd fde6 	bl	8001af8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f2c:	e038      	b.n	8003fa0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003f2e:	240c      	movs	r4, #12
 8003f30:	193b      	adds	r3, r7, r4
 8003f32:	2208      	movs	r2, #8
 8003f34:	18ba      	adds	r2, r7, r2
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	021a      	lsls	r2, r3, #8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	0011      	movs	r1, r2
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 ff28 	bl	8004d98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2240      	movs	r2, #64	; 0x40
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	7819      	ldrb	r1, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fd fdcb 	bl	8001af8 <HAL_I2C_AddrCallback>
}
 8003f62:	e01d      	b.n	8003fa0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 ff13 	bl	8004d98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2240      	movs	r2, #64	; 0x40
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	230f      	movs	r3, #15
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	7819      	ldrb	r1, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fd fdb5 	bl	8001af8 <HAL_I2C_AddrCallback>
}
 8003f8e:	e007      	b.n	8003fa0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2208      	movs	r2, #8
 8003f96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2240      	movs	r2, #64	; 0x40
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	5499      	strb	r1, [r3, r2]
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}

08003fa8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2242      	movs	r2, #66	; 0x42
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2241      	movs	r2, #65	; 0x41
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b21      	cmp	r3, #33	; 0x21
 8003fc2:	d117      	bne.n	8003ff4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2241      	movs	r2, #65	; 0x41
 8003fc8:	2120      	movs	r1, #32
 8003fca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2211      	movs	r2, #17
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 fedb 	bl	8004d98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2240      	movs	r2, #64	; 0x40
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff fa3a 	bl	8003466 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff2:	e016      	b.n	8004022 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2241      	movs	r2, #65	; 0x41
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2212      	movs	r2, #18
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2102      	movs	r1, #2
 800400c:	0018      	movs	r0, r3
 800400e:	f000 fec3 	bl	8004d98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff fa2a 	bl	8003476 <HAL_I2C_MasterRxCpltCallback>
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2242      	movs	r2, #66	; 0x42
 8004040:	2100      	movs	r1, #0
 8004042:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	01db      	lsls	r3, r3, #7
 800404a:	4013      	ands	r3, r2
 800404c:	d008      	beq.n	8004060 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4924      	ldr	r1, [pc, #144]	; (80040ec <I2C_ITSlaveSeqCplt+0xc0>)
 800405a:	400a      	ands	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e00c      	b.n	800407a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	4013      	ands	r3, r2
 8004068:	d007      	beq.n	800407a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	491e      	ldr	r1, [pc, #120]	; (80040f0 <I2C_ITSlaveSeqCplt+0xc4>)
 8004076:	400a      	ands	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2241      	movs	r2, #65	; 0x41
 800407e:	5c9b      	ldrb	r3, [r3, r2]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b29      	cmp	r3, #41	; 0x29
 8004084:	d114      	bne.n	80040b0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2241      	movs	r2, #65	; 0x41
 800408a:	2128      	movs	r1, #40	; 0x28
 800408c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2101      	movs	r1, #1
 8004098:	0018      	movs	r0, r3
 800409a:	f000 fe7d 	bl	8004d98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2240      	movs	r2, #64	; 0x40
 80040a2:	2100      	movs	r1, #0
 80040a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7ff f9ec 	bl	8003486 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040ae:	e019      	b.n	80040e4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2241      	movs	r2, #65	; 0x41
 80040b4:	5c9b      	ldrb	r3, [r3, r2]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ba:	d113      	bne.n	80040e4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2241      	movs	r2, #65	; 0x41
 80040c0:	2128      	movs	r1, #40	; 0x28
 80040c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2222      	movs	r2, #34	; 0x22
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2102      	movs	r1, #2
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 fe62 	bl	8004d98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	2100      	movs	r1, #0
 80040da:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fd fdec 	bl	8001cbc <HAL_I2C_SlaveRxCpltCallback>
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	ffffbfff 	.word	0xffffbfff
 80040f0:	ffff7fff 	.word	0xffff7fff

080040f4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2220      	movs	r2, #32
 8004108:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2241      	movs	r2, #65	; 0x41
 800410e:	5c9b      	ldrb	r3, [r3, r2]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d108      	bne.n	8004128 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2101      	movs	r1, #1
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fe3c 	bl	8004d98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2211      	movs	r2, #17
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
 8004126:	e00d      	b.n	8004144 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2241      	movs	r2, #65	; 0x41
 800412c:	5c9b      	ldrb	r3, [r3, r2]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b22      	cmp	r3, #34	; 0x22
 8004132:	d107      	bne.n	8004144 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2102      	movs	r1, #2
 8004138:	0018      	movs	r0, r3
 800413a:	f000 fe2d 	bl	8004d98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2212      	movs	r2, #18
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	494e      	ldr	r1, [pc, #312]	; (8004288 <I2C_ITMasterCplt+0x194>)
 8004150:	400a      	ands	r2, r1
 8004152:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4b      	ldr	r2, [pc, #300]	; (800428c <I2C_ITMasterCplt+0x198>)
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2210      	movs	r2, #16
 8004164:	4013      	ands	r3, r2
 8004166:	d009      	beq.n	800417c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2210      	movs	r2, #16
 800416e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	2204      	movs	r2, #4
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2241      	movs	r2, #65	; 0x41
 8004180:	5c9b      	ldrb	r3, [r3, r2]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b60      	cmp	r3, #96	; 0x60
 8004186:	d109      	bne.n	800419c <I2C_ITMasterCplt+0xa8>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2204      	movs	r2, #4
 800418c:	4013      	ands	r3, r2
 800418e:	d005      	beq.n	800419c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	b2db      	uxtb	r3, r3
 8004198:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800419a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 fb19 	bl	80047d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2241      	movs	r2, #65	; 0x41
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b60      	cmp	r3, #96	; 0x60
 80041b4:	d002      	beq.n	80041bc <I2C_ITMasterCplt+0xc8>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 f9db 	bl	8004580 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041ca:	e058      	b.n	800427e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2241      	movs	r2, #65	; 0x41
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b21      	cmp	r3, #33	; 0x21
 80041d6:	d126      	bne.n	8004226 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2241      	movs	r2, #65	; 0x41
 80041dc:	2120      	movs	r1, #32
 80041de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2242      	movs	r2, #66	; 0x42
 80041ea:	5c9b      	ldrb	r3, [r3, r2]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d10c      	bne.n	800420c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2242      	movs	r2, #66	; 0x42
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2240      	movs	r2, #64	; 0x40
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f7ff f946 	bl	8003496 <HAL_I2C_MemTxCpltCallback>
}
 800420a:	e038      	b.n	800427e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2242      	movs	r2, #66	; 0x42
 8004210:	2100      	movs	r1, #0
 8004212:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2240      	movs	r2, #64	; 0x40
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff f921 	bl	8003466 <HAL_I2C_MasterTxCpltCallback>
}
 8004224:	e02b      	b.n	800427e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2241      	movs	r2, #65	; 0x41
 800422a:	5c9b      	ldrb	r3, [r3, r2]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b22      	cmp	r3, #34	; 0x22
 8004230:	d125      	bne.n	800427e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2241      	movs	r2, #65	; 0x41
 8004236:	2120      	movs	r1, #32
 8004238:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2242      	movs	r2, #66	; 0x42
 8004244:	5c9b      	ldrb	r3, [r3, r2]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d10c      	bne.n	8004266 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2242      	movs	r2, #66	; 0x42
 8004250:	2100      	movs	r1, #0
 8004252:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff f921 	bl	80034a6 <HAL_I2C_MemRxCpltCallback>
}
 8004264:	e00b      	b.n	800427e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2242      	movs	r2, #66	; 0x42
 800426a:	2100      	movs	r1, #0
 800426c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2240      	movs	r2, #64	; 0x40
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff f8fc 	bl	8003476 <HAL_I2C_MasterRxCpltCallback>
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b006      	add	sp, #24
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	fe00e800 	.word	0xfe00e800
 800428c:	ffff0000 	.word	0xffff0000

08004290 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042a6:	200f      	movs	r0, #15
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	2141      	movs	r1, #65	; 0x41
 80042ae:	5c52      	ldrb	r2, [r2, r1]
 80042b0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2220      	movs	r2, #32
 80042b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b21      	cmp	r3, #33	; 0x21
 80042c0:	d003      	beq.n	80042ca <I2C_ITSlaveCplt+0x3a>
 80042c2:	183b      	adds	r3, r7, r0
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b29      	cmp	r3, #41	; 0x29
 80042c8:	d109      	bne.n	80042de <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042ca:	4a7b      	ldr	r2, [pc, #492]	; (80044b8 <I2C_ITSlaveCplt+0x228>)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	0011      	movs	r1, r2
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 fd61 	bl	8004d98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
 80042dc:	e011      	b.n	8004302 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042de:	220f      	movs	r2, #15
 80042e0:	18bb      	adds	r3, r7, r2
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b22      	cmp	r3, #34	; 0x22
 80042e6:	d003      	beq.n	80042f0 <I2C_ITSlaveCplt+0x60>
 80042e8:	18bb      	adds	r3, r7, r2
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b2a      	cmp	r3, #42	; 0x2a
 80042ee:	d108      	bne.n	8004302 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042f0:	4a72      	ldr	r2, [pc, #456]	; (80044bc <I2C_ITSlaveCplt+0x22c>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	0011      	movs	r1, r2
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fd4e 	bl	8004d98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2222      	movs	r2, #34	; 0x22
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	0209      	lsls	r1, r1, #8
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4968      	ldr	r1, [pc, #416]	; (80044c0 <I2C_ITSlaveCplt+0x230>)
 8004320:	400a      	ands	r2, r1
 8004322:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 fa55 	bl	80047d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	4013      	ands	r3, r2
 8004334:	d013      	beq.n	800435e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4960      	ldr	r1, [pc, #384]	; (80044c4 <I2C_ITSlaveCplt+0x234>)
 8004342:	400a      	ands	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01f      	beq.n	800438e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435c:	e017      	b.n	800438e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	4013      	ands	r3, r2
 8004366:	d012      	beq.n	800438e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4955      	ldr	r1, [pc, #340]	; (80044c8 <I2C_ITSlaveCplt+0x238>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2204      	movs	r2, #4
 8004392:	4013      	ands	r3, r2
 8004394:	d020      	beq.n	80043d8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2204      	movs	r2, #4
 800439a:	4393      	bics	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	2204      	movs	r2, #4
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2242      	movs	r2, #66	; 0x42
 80043f2:	2100      	movs	r1, #0
 80043f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f000 f8b7 	bl	8004580 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2241      	movs	r2, #65	; 0x41
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b28      	cmp	r3, #40	; 0x28
 800441c:	d147      	bne.n	80044ae <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0011      	movs	r1, r2
 8004424:	0018      	movs	r0, r3
 8004426:	f000 f853 	bl	80044d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800442a:	e040      	b.n	80044ae <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <I2C_ITSlaveCplt+0x23c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d016      	beq.n	8004464 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fdf7 	bl	800402c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <I2C_ITSlaveCplt+0x23c>)
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2241      	movs	r2, #65	; 0x41
 8004448:	2120      	movs	r1, #32
 800444a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2240      	movs	r2, #64	; 0x40
 8004456:	2100      	movs	r1, #0
 8004458:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f7fd fc4b 	bl	8001cf8 <HAL_I2C_ListenCpltCallback>
}
 8004462:	e024      	b.n	80044ae <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2241      	movs	r2, #65	; 0x41
 8004468:	5c9b      	ldrb	r3, [r3, r2]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b22      	cmp	r3, #34	; 0x22
 800446e:	d10f      	bne.n	8004490 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2241      	movs	r2, #65	; 0x41
 8004474:	2120      	movs	r1, #32
 8004476:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	2100      	movs	r1, #0
 8004484:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fd fc17 	bl	8001cbc <HAL_I2C_SlaveRxCpltCallback>
}
 800448e:	e00e      	b.n	80044ae <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2241      	movs	r2, #65	; 0x41
 8004494:	2120      	movs	r1, #32
 8004496:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2240      	movs	r2, #64	; 0x40
 80044a2:	2100      	movs	r1, #0
 80044a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7fe ffec 	bl	8003486 <HAL_I2C_SlaveTxCpltCallback>
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b006      	add	sp, #24
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	00008001 	.word	0x00008001
 80044bc:	00008002 	.word	0x00008002
 80044c0:	fe00e800 	.word	0xfe00e800
 80044c4:	ffffbfff 	.word	0xffffbfff
 80044c8:	ffff7fff 	.word	0xffff7fff
 80044cc:	ffff0000 	.word	0xffff0000

080044d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <I2C_ITListenCplt+0xa8>)
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2241      	movs	r2, #65	; 0x41
 80044ea:	2120      	movs	r1, #32
 80044ec:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2242      	movs	r2, #66	; 0x42
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2204      	movs	r2, #4
 8004500:	4013      	ands	r3, r2
 8004502:	d022      	beq.n	800454a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	2204      	movs	r2, #4
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <I2C_ITListenCplt+0xac>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0011      	movs	r1, r2
 8004550:	0018      	movs	r0, r3
 8004552:	f000 fc21 	bl	8004d98 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2210      	movs	r2, #16
 800455c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2240      	movs	r2, #64	; 0x40
 8004562:	2100      	movs	r1, #0
 8004564:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f7fd fbc5 	bl	8001cf8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b002      	add	sp, #8
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	ffff0000 	.word	0xffff0000
 800457c:	00008003 	.word	0x00008003

08004580 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800458a:	200f      	movs	r0, #15
 800458c:	183b      	adds	r3, r7, r0
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	2141      	movs	r1, #65	; 0x41
 8004592:	5c52      	ldrb	r2, [r2, r1]
 8004594:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2242      	movs	r2, #66	; 0x42
 800459a:	2100      	movs	r1, #0
 800459c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a72      	ldr	r2, [pc, #456]	; (800476c <I2C_ITError+0x1ec>)
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b28      	cmp	r3, #40	; 0x28
 80045bc:	d007      	beq.n	80045ce <I2C_ITError+0x4e>
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b29      	cmp	r3, #41	; 0x29
 80045c4:	d003      	beq.n	80045ce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045c6:	183b      	adds	r3, r7, r0
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b2a      	cmp	r3, #42	; 0x2a
 80045cc:	d10c      	bne.n	80045e8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2103      	movs	r1, #3
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 fbe0 	bl	8004d98 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2241      	movs	r2, #65	; 0x41
 80045dc:	2128      	movs	r1, #40	; 0x28
 80045de:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a63      	ldr	r2, [pc, #396]	; (8004770 <I2C_ITError+0x1f0>)
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34
 80045e6:	e032      	b.n	800464e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045e8:	4a62      	ldr	r2, [pc, #392]	; (8004774 <I2C_ITError+0x1f4>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0011      	movs	r1, r2
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 fbd2 	bl	8004d98 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 f8ed 	bl	80047d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2241      	movs	r2, #65	; 0x41
 8004600:	5c9b      	ldrb	r3, [r3, r2]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b60      	cmp	r3, #96	; 0x60
 8004606:	d01f      	beq.n	8004648 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2241      	movs	r2, #65	; 0x41
 800460c:	2120      	movs	r1, #32
 800460e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2220      	movs	r2, #32
 8004618:	4013      	ands	r3, r2
 800461a:	2b20      	cmp	r3, #32
 800461c:	d114      	bne.n	8004648 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2210      	movs	r2, #16
 8004626:	4013      	ands	r3, r2
 8004628:	2b10      	cmp	r3, #16
 800462a:	d109      	bne.n	8004640 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2210      	movs	r2, #16
 8004632:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	2204      	movs	r2, #4
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2220      	movs	r2, #32
 8004646:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d03b      	beq.n	80046d4 <I2C_ITError+0x154>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b11      	cmp	r3, #17
 8004660:	d002      	beq.n	8004668 <I2C_ITError+0xe8>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b21      	cmp	r3, #33	; 0x21
 8004666:	d135      	bne.n	80046d4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	01db      	lsls	r3, r3, #7
 8004672:	401a      	ands	r2, r3
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	01db      	lsls	r3, r3, #7
 8004678:	429a      	cmp	r2, r3
 800467a:	d107      	bne.n	800468c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	493c      	ldr	r1, [pc, #240]	; (8004778 <I2C_ITError+0x1f8>)
 8004688:	400a      	ands	r2, r1
 800468a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	0018      	movs	r0, r3
 8004692:	f7fd fef8 	bl	8002486 <HAL_DMA_GetState>
 8004696:	0003      	movs	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d016      	beq.n	80046ca <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	4a36      	ldr	r2, [pc, #216]	; (800477c <I2C_ITError+0x1fc>)
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	2100      	movs	r1, #0
 80046aa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fd fea1 	bl	80023f8 <HAL_DMA_Abort_IT>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d051      	beq.n	800475e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	0018      	movs	r0, r3
 80046c6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046c8:	e049      	b.n	800475e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 f859 	bl	8004784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046d2:	e044      	b.n	800475e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03b      	beq.n	8004754 <I2C_ITError+0x1d4>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b12      	cmp	r3, #18
 80046e0:	d002      	beq.n	80046e8 <I2C_ITError+0x168>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b22      	cmp	r3, #34	; 0x22
 80046e6:	d135      	bne.n	8004754 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	401a      	ands	r2, r3
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d107      	bne.n	800470c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	491e      	ldr	r1, [pc, #120]	; (8004780 <I2C_ITError+0x200>)
 8004708:	400a      	ands	r2, r1
 800470a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	0018      	movs	r0, r3
 8004712:	f7fd feb8 	bl	8002486 <HAL_DMA_GetState>
 8004716:	0003      	movs	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d016      	beq.n	800474a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <I2C_ITError+0x1fc>)
 8004722:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2240      	movs	r2, #64	; 0x40
 8004728:	2100      	movs	r1, #0
 800472a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	0018      	movs	r0, r3
 8004732:	f7fd fe61 	bl	80023f8 <HAL_DMA_Abort_IT>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d013      	beq.n	8004762 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	0018      	movs	r0, r3
 8004746:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004748:	e00b      	b.n	8004762 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 f819 	bl	8004784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004752:	e006      	b.n	8004762 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	0018      	movs	r0, r3
 8004758:	f000 f814 	bl	8004784 <I2C_TreatErrorCallback>
  }
}
 800475c:	e002      	b.n	8004764 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	e000      	b.n	8004764 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004762:	46c0      	nop			; (mov r8, r8)
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b004      	add	sp, #16
 800476a:	bd80      	pop	{r7, pc}
 800476c:	ffff0000 	.word	0xffff0000
 8004770:	080034d9 	.word	0x080034d9
 8004774:	00008003 	.word	0x00008003
 8004778:	ffffbfff 	.word	0xffffbfff
 800477c:	0800481b 	.word	0x0800481b
 8004780:	ffff7fff 	.word	0xffff7fff

08004784 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2241      	movs	r2, #65	; 0x41
 8004790:	5c9b      	ldrb	r3, [r3, r2]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d10f      	bne.n	80047b8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2241      	movs	r2, #65	; 0x41
 800479c:	2120      	movs	r1, #32
 800479e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2240      	movs	r2, #64	; 0x40
 80047aa:	2100      	movs	r1, #0
 80047ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fe fe88 	bl	80034c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047b6:	e00a      	b.n	80047ce <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	2100      	movs	r1, #0
 80047c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7fe fe74 	bl	80034b6 <HAL_I2C_ErrorCallback>
}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2202      	movs	r2, #2
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d103      	bne.n	80047f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2201      	movs	r2, #1
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d007      	beq.n	8004812 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2101      	movs	r1, #1
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
  }
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b002      	add	sp, #8
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	2200      	movs	r2, #0
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	2200      	movs	r2, #0
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0018      	movs	r0, r3
 800484c:	f7ff ff9a 	bl	8004784 <I2C_TreatErrorCallback>
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b004      	add	sp, #16
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004868:	e030      	b.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	d02d      	beq.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004870:	f7fd fcda 	bl	8002228 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d302      	bcc.n	8004886 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d122      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	425a      	negs	r2, r3
 8004896:	4153      	adcs	r3, r2
 8004898:	b2db      	uxtb	r3, r3
 800489a:	001a      	movs	r2, r3
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d113      	bne.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	2220      	movs	r2, #32
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2241      	movs	r2, #65	; 0x41
 80048b4:	2120      	movs	r1, #32
 80048b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2242      	movs	r2, #66	; 0x42
 80048bc:	2100      	movs	r1, #0
 80048be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	2100      	movs	r1, #0
 80048c6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e00f      	b.n	80048ec <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	425a      	negs	r2, r3
 80048dc:	4153      	adcs	r3, r2
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	001a      	movs	r2, r3
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d0bf      	beq.n	800486a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b004      	add	sp, #16
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004900:	e032      	b.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	0018      	movs	r0, r3
 800490a:	f000 f87d 	bl	8004a08 <I2C_IsErrorOccurred>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e030      	b.n	8004978 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3301      	adds	r3, #1
 800491a:	d025      	beq.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491c:	f7fd fc84 	bl	8002228 <HAL_GetTick>
 8004920:	0002      	movs	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11a      	bne.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2202      	movs	r2, #2
 800493a:	4013      	ands	r3, r2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d013      	beq.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	2220      	movs	r2, #32
 8004946:	431a      	orrs	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2241      	movs	r2, #65	; 0x41
 8004950:	2120      	movs	r1, #32
 8004952:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2242      	movs	r2, #66	; 0x42
 8004958:	2100      	movs	r1, #0
 800495a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2202      	movs	r2, #2
 8004970:	4013      	ands	r3, r2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d1c5      	bne.n	8004902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	b004      	add	sp, #16
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800498c:	e02f      	b.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	0018      	movs	r0, r3
 8004996:	f000 f837 	bl	8004a08 <I2C_IsErrorOccurred>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d001      	beq.n	80049a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e02d      	b.n	80049fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fd fc41 	bl	8002228 <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11a      	bne.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2220      	movs	r2, #32
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d013      	beq.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	2220      	movs	r2, #32
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2241      	movs	r2, #65	; 0x41
 80049d6:	2120      	movs	r1, #32
 80049d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2242      	movs	r2, #66	; 0x42
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e007      	b.n	80049fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2220      	movs	r2, #32
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d1c8      	bne.n	800498e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b004      	add	sp, #16
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b08b      	sub	sp, #44	; 0x2c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2327      	movs	r3, #39	; 0x27
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2210      	movs	r2, #16
 8004a30:	4013      	ands	r3, r2
 8004a32:	d100      	bne.n	8004a36 <I2C_IsErrorOccurred+0x2e>
 8004a34:	e082      	b.n	8004b3c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a3e:	e060      	b.n	8004b02 <I2C_IsErrorOccurred+0xfa>
 8004a40:	2427      	movs	r4, #39	; 0x27
 8004a42:	193b      	adds	r3, r7, r4
 8004a44:	193a      	adds	r2, r7, r4
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	d058      	beq.n	8004b02 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fd fbea 	bl	8002228 <HAL_GetTick>
 8004a54:	0002      	movs	r2, r0
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d306      	bcc.n	8004a6e <I2C_IsErrorOccurred+0x66>
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	193a      	adds	r2, r7, r4
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d149      	bne.n	8004b02 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	01db      	lsls	r3, r3, #7
 8004a78:	4013      	ands	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a7c:	2013      	movs	r0, #19
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	2142      	movs	r1, #66	; 0x42
 8004a84:	5c52      	ldrb	r2, [r2, r1]
 8004a86:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	401a      	ands	r2, r3
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d126      	bne.n	8004aea <I2C_IsErrorOccurred+0xe2>
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	01db      	lsls	r3, r3, #7
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d021      	beq.n	8004aea <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004aa6:	183b      	adds	r3, r7, r0
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d01d      	beq.n	8004aea <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	01c9      	lsls	r1, r1, #7
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ac0:	f7fd fbb2 	bl	8002228 <HAL_GetTick>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac8:	e00f      	b.n	8004aea <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004aca:	f7fd fbad 	bl	8002228 <HAL_GetTick>
 8004ace:	0002      	movs	r2, r0
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b19      	cmp	r3, #25
 8004ad6:	d908      	bls.n	8004aea <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2220      	movs	r2, #32
 8004adc:	4313      	orrs	r3, r2
 8004ade:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ae0:	2327      	movs	r3, #39	; 0x27
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]

              break;
 8004ae8:	e00b      	b.n	8004b02 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2220      	movs	r2, #32
 8004af2:	4013      	ands	r3, r2
 8004af4:	2127      	movs	r1, #39	; 0x27
 8004af6:	187a      	adds	r2, r7, r1
 8004af8:	1879      	adds	r1, r7, r1
 8004afa:	7809      	ldrb	r1, [r1, #0]
 8004afc:	7011      	strb	r1, [r2, #0]
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d1e3      	bne.n	8004aca <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d004      	beq.n	8004b1a <I2C_IsErrorOccurred+0x112>
 8004b10:	2327      	movs	r3, #39	; 0x27
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d092      	beq.n	8004a40 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b1a:	2327      	movs	r3, #39	; 0x27
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	4313      	orrs	r3, r2
 8004b32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b34:	2327      	movs	r3, #39	; 0x27
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d00c      	beq.n	8004b68 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2201      	movs	r2, #1
 8004b52:	4313      	orrs	r3, r2
 8004b54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	0052      	lsls	r2, r2, #1
 8004b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b60:	2327      	movs	r3, #39	; 0x27
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d00c      	beq.n	8004b8c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	2208      	movs	r2, #8
 8004b76:	4313      	orrs	r3, r2
 8004b78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	00d2      	lsls	r2, r2, #3
 8004b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b84:	2327      	movs	r3, #39	; 0x27
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4013      	ands	r3, r2
 8004b94:	d00c      	beq.n	8004bb0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	0092      	lsls	r2, r2, #2
 8004ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ba8:	2327      	movs	r3, #39	; 0x27
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004bb0:	2327      	movs	r3, #39	; 0x27
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01d      	beq.n	8004bf6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7ff fe0a 	bl	80047d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	490d      	ldr	r1, [pc, #52]	; (8004c04 <I2C_IsErrorOccurred+0x1fc>)
 8004bce:	400a      	ands	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2241      	movs	r2, #65	; 0x41
 8004be2:	2120      	movs	r1, #32
 8004be4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2242      	movs	r2, #66	; 0x42
 8004bea:	2100      	movs	r1, #0
 8004bec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004bf6:	2327      	movs	r3, #39	; 0x27
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b00b      	add	sp, #44	; 0x2c
 8004c02:	bd90      	pop	{r4, r7, pc}
 8004c04:	fe00e800 	.word	0xfe00e800

08004c08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	0008      	movs	r0, r1
 8004c12:	0011      	movs	r1, r2
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	240a      	movs	r4, #10
 8004c18:	193b      	adds	r3, r7, r4
 8004c1a:	1c02      	adds	r2, r0, #0
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	2009      	movs	r0, #9
 8004c20:	183b      	adds	r3, r7, r0
 8004c22:	1c0a      	adds	r2, r1, #0
 8004c24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	059b      	lsls	r3, r3, #22
 8004c2c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c2e:	183b      	adds	r3, r7, r0
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	0419      	lsls	r1, r3, #16
 8004c34:	23ff      	movs	r3, #255	; 0xff
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c3a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	4313      	orrs	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c52:	0d51      	lsrs	r1, r2, #21
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	00d2      	lsls	r2, r2, #3
 8004c58:	400a      	ands	r2, r1
 8004c5a:	4907      	ldr	r1, [pc, #28]	; (8004c78 <I2C_TransferConfig+0x70>)
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	43d2      	mvns	r2, r2
 8004c60:	401a      	ands	r2, r3
 8004c62:	0011      	movs	r1, r2
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b007      	add	sp, #28
 8004c74:	bd90      	pop	{r4, r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	03ff63ff 	.word	0x03ff63ff

08004c7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	000a      	movs	r2, r1
 8004c86:	1cbb      	adds	r3, r7, #2
 8004c88:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c92:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <I2C_Enable_IRQ+0x110>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d035      	beq.n	8004d04 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004c9c:	4b3c      	ldr	r3, [pc, #240]	; (8004d90 <I2C_Enable_IRQ+0x114>)
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d030      	beq.n	8004d04 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004ca6:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <I2C_Enable_IRQ+0x118>)
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d02b      	beq.n	8004d04 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004cac:	1cbb      	adds	r3, r7, #2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	5e9b      	ldrsh	r3, [r3, r2]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da03      	bge.n	8004cbe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	22b8      	movs	r2, #184	; 0xb8
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004cbe:	1cbb      	adds	r3, r7, #2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	22f2      	movs	r2, #242	; 0xf2
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004cd0:	1cbb      	adds	r3, r7, #2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	22f4      	movs	r2, #244	; 0xf4
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ce2:	1cbb      	adds	r3, r7, #2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d103      	bne.n	8004cf2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2290      	movs	r2, #144	; 0x90
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004cf2:	1cbb      	adds	r3, r7, #2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d13c      	bne.n	8004d74 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d02:	e037      	b.n	8004d74 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d04:	1cbb      	adds	r3, r7, #2
 8004d06:	2200      	movs	r2, #0
 8004d08:	5e9b      	ldrsh	r3, [r3, r2]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da03      	bge.n	8004d16 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	22b8      	movs	r2, #184	; 0xb8
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d16:	1cbb      	adds	r3, r7, #2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	22f2      	movs	r2, #242	; 0xf2
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d28:	1cbb      	adds	r3, r7, #2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d003      	beq.n	8004d3a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22f4      	movs	r2, #244	; 0xf4
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d3a:	1cbb      	adds	r3, r7, #2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	d103      	bne.n	8004d4a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2290      	movs	r2, #144	; 0x90
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d4a:	1cbb      	adds	r3, r7, #2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d103      	bne.n	8004d5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2260      	movs	r2, #96	; 0x60
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <I2C_Enable_IRQ+0x118>)
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d007      	beq.n	8004d74 <I2C_Enable_IRQ+0xf8>
 8004d64:	1cbb      	adds	r3, r7, #2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d103      	bne.n	8004d74 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b004      	add	sp, #16
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	080036d9 	.word	0x080036d9
 8004d90:	08003b09 	.word	0x08003b09
 8004d94:	080038d1 	.word	0x080038d1

08004d98 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	000a      	movs	r2, r1
 8004da2:	1cbb      	adds	r3, r7, #2
 8004da4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004daa:	1cbb      	adds	r3, r7, #2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	4013      	ands	r3, r2
 8004db2:	d010      	beq.n	8004dd6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2242      	movs	r2, #66	; 0x42
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2241      	movs	r2, #65	; 0x41
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	2328      	movs	r3, #40	; 0x28
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b28      	cmp	r3, #40	; 0x28
 8004dcc:	d003      	beq.n	8004dd6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22b0      	movs	r2, #176	; 0xb0
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004dd6:	1cbb      	adds	r3, r7, #2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d010      	beq.n	8004e02 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2244      	movs	r2, #68	; 0x44
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2241      	movs	r2, #65	; 0x41
 8004dec:	5c9b      	ldrb	r3, [r3, r2]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	001a      	movs	r2, r3
 8004df2:	2328      	movs	r3, #40	; 0x28
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b28      	cmp	r3, #40	; 0x28
 8004df8:	d003      	beq.n	8004e02 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	22b0      	movs	r2, #176	; 0xb0
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e02:	1cbb      	adds	r3, r7, #2
 8004e04:	2200      	movs	r2, #0
 8004e06:	5e9b      	ldrsh	r3, [r3, r2]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da03      	bge.n	8004e14 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	22b8      	movs	r2, #184	; 0xb8
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e14:	1cbb      	adds	r3, r7, #2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d103      	bne.n	8004e24 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2290      	movs	r2, #144	; 0x90
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e24:	1cbb      	adds	r3, r7, #2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d103      	bne.n	8004e34 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e34:	1cbb      	adds	r3, r7, #2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d103      	bne.n	8004e44 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43d9      	mvns	r1, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	400a      	ands	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b004      	add	sp, #16
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2241      	movs	r2, #65	; 0x41
 8004e6e:	5c9b      	ldrb	r3, [r3, r2]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d138      	bne.n	8004ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2240      	movs	r2, #64	; 0x40
 8004e7a:	5c9b      	ldrb	r3, [r3, r2]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e032      	b.n	8004eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2240      	movs	r2, #64	; 0x40
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2241      	movs	r2, #65	; 0x41
 8004e90:	2124      	movs	r1, #36	; 0x24
 8004e92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	438a      	bics	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4911      	ldr	r1, [pc, #68]	; (8004ef4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2101      	movs	r1, #1
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2241      	movs	r2, #65	; 0x41
 8004ed8:	2120      	movs	r1, #32
 8004eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2240      	movs	r2, #64	; 0x40
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e000      	b.n	8004eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	ffffefff 	.word	0xffffefff

08004ef8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2241      	movs	r2, #65	; 0x41
 8004f06:	5c9b      	ldrb	r3, [r3, r2]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d139      	bne.n	8004f82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2240      	movs	r2, #64	; 0x40
 8004f12:	5c9b      	ldrb	r3, [r3, r2]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e033      	b.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2240      	movs	r2, #64	; 0x40
 8004f20:	2101      	movs	r1, #1
 8004f22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2241      	movs	r2, #65	; 0x41
 8004f28:	2124      	movs	r1, #36	; 0x24
 8004f2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2101      	movs	r1, #1
 8004f38:	438a      	bics	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2241      	movs	r2, #65	; 0x41
 8004f72:	2120      	movs	r1, #32
 8004f74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2240      	movs	r2, #64	; 0x40
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b004      	add	sp, #16
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	fffff0ff 	.word	0xfffff0ff

08004f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b5b0      	push	{r4, r5, r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f000 fb5a 	bl	8005658 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa4:	4bce      	ldr	r3, [pc, #824]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	220c      	movs	r2, #12
 8004faa:	4013      	ands	r3, r2
 8004fac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fae:	4bcc      	ldr	r3, [pc, #816]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	025b      	lsls	r3, r3, #9
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x36>
 8004fc4:	e07c      	b.n	80050c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d007      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d111      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x66>
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	025b      	lsls	r3, r3, #9
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d10c      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	4bc0      	ldr	r3, [pc, #768]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	029b      	lsls	r3, r3, #10
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d100      	bne.n	8004fea <HAL_RCC_OscConfig+0x5a>
 8004fe8:	e069      	b.n	80050be <HAL_RCC_OscConfig+0x12e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d165      	bne.n	80050be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e330      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	025b      	lsls	r3, r3, #9
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d107      	bne.n	8005012 <HAL_RCC_OscConfig+0x82>
 8005002:	4bb7      	ldr	r3, [pc, #732]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4bb6      	ldr	r3, [pc, #728]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	0249      	lsls	r1, r1, #9
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e027      	b.n	8005062 <HAL_RCC_OscConfig+0xd2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	23a0      	movs	r3, #160	; 0xa0
 8005018:	02db      	lsls	r3, r3, #11
 800501a:	429a      	cmp	r2, r3
 800501c:	d10e      	bne.n	800503c <HAL_RCC_OscConfig+0xac>
 800501e:	4bb0      	ldr	r3, [pc, #704]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4baf      	ldr	r3, [pc, #700]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	02c9      	lsls	r1, r1, #11
 8005028:	430a      	orrs	r2, r1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	4bac      	ldr	r3, [pc, #688]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4bab      	ldr	r3, [pc, #684]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	0249      	lsls	r1, r1, #9
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e012      	b.n	8005062 <HAL_RCC_OscConfig+0xd2>
 800503c:	4ba8      	ldr	r3, [pc, #672]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4ba7      	ldr	r3, [pc, #668]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005042:	49a8      	ldr	r1, [pc, #672]	; (80052e4 <HAL_RCC_OscConfig+0x354>)
 8005044:	400a      	ands	r2, r1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	4ba5      	ldr	r3, [pc, #660]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	025b      	lsls	r3, r3, #9
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4ba2      	ldr	r3, [pc, #648]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4ba1      	ldr	r3, [pc, #644]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800505c:	49a2      	ldr	r1, [pc, #648]	; (80052e8 <HAL_RCC_OscConfig+0x358>)
 800505e:	400a      	ands	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d014      	beq.n	8005094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fd f8dd 	bl	8002228 <HAL_GetTick>
 800506e:	0003      	movs	r3, r0
 8005070:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd f8d8 	bl	8002228 <HAL_GetTick>
 8005078:	0002      	movs	r2, r0
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e2e8      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005086:	4b96      	ldr	r3, [pc, #600]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	029b      	lsls	r3, r3, #10
 800508e:	4013      	ands	r3, r2
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0xe4>
 8005092:	e015      	b.n	80050c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fd f8c8 	bl	8002228 <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800509e:	f7fd f8c3 	bl	8002228 <HAL_GetTick>
 80050a2:	0002      	movs	r2, r0
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	; 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e2d3      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050b0:	4b8b      	ldr	r3, [pc, #556]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	029b      	lsls	r3, r3, #10
 80050b8:	4013      	ands	r3, r2
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x10e>
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2202      	movs	r2, #2
 80050c6:	4013      	ands	r3, r2
 80050c8:	d100      	bne.n	80050cc <HAL_RCC_OscConfig+0x13c>
 80050ca:	e08b      	b.n	80051e4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d13e      	bne.n	800515c <HAL_RCC_OscConfig+0x1cc>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d13b      	bne.n	800515c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80050e4:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2204      	movs	r2, #4
 80050ea:	4013      	ands	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_RCC_OscConfig+0x168>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e2af      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f8:	4b79      	ldr	r3, [pc, #484]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a7b      	ldr	r2, [pc, #492]	; (80052ec <HAL_RCC_OscConfig+0x35c>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	4b75      	ldr	r3, [pc, #468]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800510e:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2209      	movs	r2, #9
 8005114:	4393      	bics	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	4b71      	ldr	r3, [pc, #452]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005120:	f000 fbe8 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8005124:	0001      	movs	r1, r0
 8005126:	4b6e      	ldr	r3, [pc, #440]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	220f      	movs	r2, #15
 800512e:	4013      	ands	r3, r2
 8005130:	4a6f      	ldr	r2, [pc, #444]	; (80052f0 <HAL_RCC_OscConfig+0x360>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	000a      	movs	r2, r1
 8005136:	40da      	lsrs	r2, r3
 8005138:	4b6e      	ldr	r3, [pc, #440]	; (80052f4 <HAL_RCC_OscConfig+0x364>)
 800513a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800513c:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x368>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2513      	movs	r5, #19
 8005142:	197c      	adds	r4, r7, r5
 8005144:	0018      	movs	r0, r3
 8005146:	f7fd f829 	bl	800219c <HAL_InitTick>
 800514a:	0003      	movs	r3, r0
 800514c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800514e:	197b      	adds	r3, r7, r5
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d046      	beq.n	80051e4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005156:	197b      	adds	r3, r7, r5
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	e27d      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d027      	beq.n	80051b2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005162:	4b5f      	ldr	r3, [pc, #380]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2209      	movs	r2, #9
 8005168:	4393      	bics	r3, r2
 800516a:	0019      	movs	r1, r3
 800516c:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fd f858 	bl	8002228 <HAL_GetTick>
 8005178:	0003      	movs	r3, r0
 800517a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd f853 	bl	8002228 <HAL_GetTick>
 8005182:	0002      	movs	r2, r0
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e263      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005190:	4b53      	ldr	r3, [pc, #332]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2204      	movs	r2, #4
 8005196:	4013      	ands	r3, r2
 8005198:	d0f1      	beq.n	800517e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519a:	4b51      	ldr	r3, [pc, #324]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4a53      	ldr	r2, [pc, #332]	; (80052ec <HAL_RCC_OscConfig+0x35c>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	021a      	lsls	r2, r3, #8
 80051aa:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	e018      	b.n	80051e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	438a      	bics	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051be:	f7fd f833 	bl	8002228 <HAL_GetTick>
 80051c2:	0003      	movs	r3, r0
 80051c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fd f82e 	bl	8002228 <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e23e      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051da:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	4013      	ands	r3, r2
 80051e2:	d1f1      	bne.n	80051c8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2210      	movs	r2, #16
 80051ea:	4013      	ands	r3, r2
 80051ec:	d100      	bne.n	80051f0 <HAL_RCC_OscConfig+0x260>
 80051ee:	e0a1      	b.n	8005334 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d140      	bne.n	8005278 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051f6:	4b3a      	ldr	r3, [pc, #232]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4013      	ands	r3, r2
 8005200:	d005      	beq.n	800520e <HAL_RCC_OscConfig+0x27e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e224      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_RCC_OscConfig+0x36c>)
 8005214:	4013      	ands	r3, r2
 8005216:	0019      	movs	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005222:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	0a19      	lsrs	r1, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	061a      	lsls	r2, r3, #24
 8005230:	4b2b      	ldr	r3, [pc, #172]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	0b5b      	lsrs	r3, r3, #13
 800523c:	3301      	adds	r3, #1
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	0212      	lsls	r2, r2, #8
 8005242:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005244:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	210f      	movs	r1, #15
 800524c:	400b      	ands	r3, r1
 800524e:	4928      	ldr	r1, [pc, #160]	; (80052f0 <HAL_RCC_OscConfig+0x360>)
 8005250:	5ccb      	ldrb	r3, [r1, r3]
 8005252:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_RCC_OscConfig+0x364>)
 8005256:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005258:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <HAL_RCC_OscConfig+0x368>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2513      	movs	r5, #19
 800525e:	197c      	adds	r4, r7, r5
 8005260:	0018      	movs	r0, r3
 8005262:	f7fc ff9b 	bl	800219c <HAL_InitTick>
 8005266:	0003      	movs	r3, r0
 8005268:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800526a:	197b      	adds	r3, r7, r5
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d060      	beq.n	8005334 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8005272:	197b      	adds	r3, r7, r5
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	e1ef      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03f      	beq.n	8005300 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0049      	lsls	r1, r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fc ffcb 	bl	8002228 <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005298:	f7fc ffc6 	bl	8002228 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1d6      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4013      	ands	r3, r2
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_RCC_OscConfig+0x36c>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	0a19      	lsrs	r1, r3, #8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	061a      	lsls	r2, r3, #24
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <HAL_RCC_OscConfig+0x350>)
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e029      	b.n	8005334 <HAL_RCC_OscConfig+0x3a4>
 80052e0:	40021000 	.word	0x40021000
 80052e4:	fffeffff 	.word	0xfffeffff
 80052e8:	fffbffff 	.word	0xfffbffff
 80052ec:	ffffe0ff 	.word	0xffffe0ff
 80052f0:	08005da4 	.word	0x08005da4
 80052f4:	20000000 	.word	0x20000000
 80052f8:	20000004 	.word	0x20000004
 80052fc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005300:	4bbe      	ldr	r3, [pc, #760]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4bbd      	ldr	r3, [pc, #756]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005306:	49be      	ldr	r1, [pc, #760]	; (8005600 <HAL_RCC_OscConfig+0x670>)
 8005308:	400a      	ands	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fc ff8c 	bl	8002228 <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005316:	f7fc ff87 	bl	8002228 <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e197      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005328:	4bb4      	ldr	r3, [pc, #720]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4013      	ands	r3, r2
 8005332:	d1f0      	bne.n	8005316 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2208      	movs	r2, #8
 800533a:	4013      	ands	r3, r2
 800533c:	d036      	beq.n	80053ac <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d019      	beq.n	800537a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	4bad      	ldr	r3, [pc, #692]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800534a:	4bac      	ldr	r3, [pc, #688]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800534c:	2101      	movs	r1, #1
 800534e:	430a      	orrs	r2, r1
 8005350:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fc ff69 	bl	8002228 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535c:	f7fc ff64 	bl	8002228 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e174      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800536e:	4ba3      	ldr	r3, [pc, #652]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d0f1      	beq.n	800535c <HAL_RCC_OscConfig+0x3cc>
 8005378:	e018      	b.n	80053ac <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537a:	4ba0      	ldr	r3, [pc, #640]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800537c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800537e:	4b9f      	ldr	r3, [pc, #636]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005380:	2101      	movs	r1, #1
 8005382:	438a      	bics	r2, r1
 8005384:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005386:	f7fc ff4f 	bl	8002228 <HAL_GetTick>
 800538a:	0003      	movs	r3, r0
 800538c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005390:	f7fc ff4a 	bl	8002228 <HAL_GetTick>
 8005394:	0002      	movs	r2, r0
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e15a      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053a2:	4b96      	ldr	r3, [pc, #600]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	d1f1      	bne.n	8005390 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2204      	movs	r2, #4
 80053b2:	4013      	ands	r3, r2
 80053b4:	d100      	bne.n	80053b8 <HAL_RCC_OscConfig+0x428>
 80053b6:	e0ae      	b.n	8005516 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b8:	2027      	movs	r0, #39	; 0x27
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c0:	4b8e      	ldr	r3, [pc, #568]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80053c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	055b      	lsls	r3, r3, #21
 80053c8:	4013      	ands	r3, r2
 80053ca:	d109      	bne.n	80053e0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053cc:	4b8b      	ldr	r3, [pc, #556]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80053ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d0:	4b8a      	ldr	r3, [pc, #552]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	0549      	lsls	r1, r1, #21
 80053d6:	430a      	orrs	r2, r1
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e0:	4b88      	ldr	r3, [pc, #544]	; (8005604 <HAL_RCC_OscConfig+0x674>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4013      	ands	r3, r2
 80053ea:	d11a      	bne.n	8005422 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ec:	4b85      	ldr	r3, [pc, #532]	; (8005604 <HAL_RCC_OscConfig+0x674>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b84      	ldr	r3, [pc, #528]	; (8005604 <HAL_RCC_OscConfig+0x674>)
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	0049      	lsls	r1, r1, #1
 80053f6:	430a      	orrs	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053fa:	f7fc ff15 	bl	8002228 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005404:	f7fc ff10 	bl	8002228 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e120      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005416:	4b7b      	ldr	r3, [pc, #492]	; (8005604 <HAL_RCC_OscConfig+0x674>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4013      	ands	r3, r2
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	d107      	bne.n	800543e <HAL_RCC_OscConfig+0x4ae>
 800542e:	4b73      	ldr	r3, [pc, #460]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005432:	4b72      	ldr	r3, [pc, #456]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	0049      	lsls	r1, r1, #1
 8005438:	430a      	orrs	r2, r1
 800543a:	651a      	str	r2, [r3, #80]	; 0x50
 800543c:	e031      	b.n	80054a2 <HAL_RCC_OscConfig+0x512>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x4d0>
 8005446:	4b6d      	ldr	r3, [pc, #436]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800544a:	4b6c      	ldr	r3, [pc, #432]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800544c:	496c      	ldr	r1, [pc, #432]	; (8005600 <HAL_RCC_OscConfig+0x670>)
 800544e:	400a      	ands	r2, r1
 8005450:	651a      	str	r2, [r3, #80]	; 0x50
 8005452:	4b6a      	ldr	r3, [pc, #424]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005456:	4b69      	ldr	r3, [pc, #420]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005458:	496b      	ldr	r1, [pc, #428]	; (8005608 <HAL_RCC_OscConfig+0x678>)
 800545a:	400a      	ands	r2, r1
 800545c:	651a      	str	r2, [r3, #80]	; 0x50
 800545e:	e020      	b.n	80054a2 <HAL_RCC_OscConfig+0x512>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	23a0      	movs	r3, #160	; 0xa0
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	429a      	cmp	r2, r3
 800546a:	d10e      	bne.n	800548a <HAL_RCC_OscConfig+0x4fa>
 800546c:	4b63      	ldr	r3, [pc, #396]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800546e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005470:	4b62      	ldr	r3, [pc, #392]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	00c9      	lsls	r1, r1, #3
 8005476:	430a      	orrs	r2, r1
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
 800547a:	4b60      	ldr	r3, [pc, #384]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800547c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800547e:	4b5f      	ldr	r3, [pc, #380]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0049      	lsls	r1, r1, #1
 8005484:	430a      	orrs	r2, r1
 8005486:	651a      	str	r2, [r3, #80]	; 0x50
 8005488:	e00b      	b.n	80054a2 <HAL_RCC_OscConfig+0x512>
 800548a:	4b5c      	ldr	r3, [pc, #368]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800548c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548e:	4b5b      	ldr	r3, [pc, #364]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005490:	495b      	ldr	r1, [pc, #364]	; (8005600 <HAL_RCC_OscConfig+0x670>)
 8005492:	400a      	ands	r2, r1
 8005494:	651a      	str	r2, [r3, #80]	; 0x50
 8005496:	4b59      	ldr	r3, [pc, #356]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800549a:	4b58      	ldr	r3, [pc, #352]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800549c:	495a      	ldr	r1, [pc, #360]	; (8005608 <HAL_RCC_OscConfig+0x678>)
 800549e:	400a      	ands	r2, r1
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d015      	beq.n	80054d6 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054aa:	f7fc febd 	bl	8002228 <HAL_GetTick>
 80054ae:	0003      	movs	r3, r0
 80054b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b2:	e009      	b.n	80054c8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fc feb8 	bl	8002228 <HAL_GetTick>
 80054b8:	0002      	movs	r2, r0
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	4a53      	ldr	r2, [pc, #332]	; (800560c <HAL_RCC_OscConfig+0x67c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e0c7      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c8:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80054ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4013      	ands	r3, r2
 80054d2:	d0ef      	beq.n	80054b4 <HAL_RCC_OscConfig+0x524>
 80054d4:	e014      	b.n	8005500 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d6:	f7fc fea7 	bl	8002228 <HAL_GetTick>
 80054da:	0003      	movs	r3, r0
 80054dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054de:	e009      	b.n	80054f4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fc fea2 	bl	8002228 <HAL_GetTick>
 80054e4:	0002      	movs	r2, r0
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	4a48      	ldr	r2, [pc, #288]	; (800560c <HAL_RCC_OscConfig+0x67c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e0b1      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054f4:	4b41      	ldr	r3, [pc, #260]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80054f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	d1ef      	bne.n	80054e0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005500:	2327      	movs	r3, #39	; 0x27
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550a:	4b3c      	ldr	r3, [pc, #240]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005510:	493f      	ldr	r1, [pc, #252]	; (8005610 <HAL_RCC_OscConfig+0x680>)
 8005512:	400a      	ands	r2, r1
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d100      	bne.n	8005520 <HAL_RCC_OscConfig+0x590>
 800551e:	e09a      	b.n	8005656 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d064      	beq.n	80055f0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b02      	cmp	r3, #2
 800552c:	d145      	bne.n	80055ba <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552e:	4b33      	ldr	r3, [pc, #204]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b32      	ldr	r3, [pc, #200]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005534:	4937      	ldr	r1, [pc, #220]	; (8005614 <HAL_RCC_OscConfig+0x684>)
 8005536:	400a      	ands	r2, r1
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553a:	f7fc fe75 	bl	8002228 <HAL_GetTick>
 800553e:	0003      	movs	r3, r0
 8005540:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005544:	f7fc fe70 	bl	8002228 <HAL_GetTick>
 8005548:	0002      	movs	r2, r0
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e080      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	049b      	lsls	r3, r3, #18
 800555e:	4013      	ands	r3, r2
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005562:	4b26      	ldr	r3, [pc, #152]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <HAL_RCC_OscConfig+0x688>)
 8005568:	4013      	ands	r3, r2
 800556a:	0019      	movs	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	431a      	orrs	r2, r3
 800557c:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 800557e:	430a      	orrs	r2, r1
 8005580:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 8005588:	2180      	movs	r1, #128	; 0x80
 800558a:	0449      	lsls	r1, r1, #17
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fc fe4a 	bl	8002228 <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559a:	f7fc fe45 	bl	8002228 <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e055      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	049b      	lsls	r3, r3, #18
 80055b4:	4013      	ands	r3, r2
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x60a>
 80055b8:	e04d      	b.n	8005656 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80055c0:	4914      	ldr	r1, [pc, #80]	; (8005614 <HAL_RCC_OscConfig+0x684>)
 80055c2:	400a      	ands	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c6:	f7fc fe2f 	bl	8002228 <HAL_GetTick>
 80055ca:	0003      	movs	r3, r0
 80055cc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fc fe2a 	bl	8002228 <HAL_GetTick>
 80055d4:	0002      	movs	r2, r0
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e03a      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCC_OscConfig+0x66c>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	4013      	ands	r3, r2
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x640>
 80055ee:	e032      	b.n	8005656 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d111      	bne.n	800561c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e02d      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
 80055fc:	40021000 	.word	0x40021000
 8005600:	fffffeff 	.word	0xfffffeff
 8005604:	40007000 	.word	0x40007000
 8005608:	fffffbff 	.word	0xfffffbff
 800560c:	00001388 	.word	0x00001388
 8005610:	efffffff 	.word	0xefffffff
 8005614:	feffffff 	.word	0xfeffffff
 8005618:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_RCC_OscConfig+0x6d0>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	025b      	lsls	r3, r3, #9
 8005628:	401a      	ands	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	429a      	cmp	r2, r3
 8005630:	d10f      	bne.n	8005652 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	23f0      	movs	r3, #240	; 0xf0
 8005636:	039b      	lsls	r3, r3, #14
 8005638:	401a      	ands	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d107      	bne.n	8005652 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	23c0      	movs	r3, #192	; 0xc0
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	401a      	ands	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d001      	beq.n	8005656 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b00a      	add	sp, #40	; 0x28
 800565e:	bdb0      	pop	{r4, r5, r7, pc}
 8005660:	40021000 	.word	0x40021000

08005664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005664:	b5b0      	push	{r4, r5, r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e128      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005678:	4b96      	ldr	r3, [pc, #600]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2201      	movs	r2, #1
 800567e:	4013      	ands	r3, r2
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d91e      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b93      	ldr	r3, [pc, #588]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	4393      	bics	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	4b90      	ldr	r3, [pc, #576]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005698:	f7fc fdc6 	bl	8002228 <HAL_GetTick>
 800569c:	0003      	movs	r3, r0
 800569e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a0:	e009      	b.n	80056b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a2:	f7fc fdc1 	bl	8002228 <HAL_GetTick>
 80056a6:	0002      	movs	r2, r0
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	4a8a      	ldr	r2, [pc, #552]	; (80058d8 <HAL_RCC_ClockConfig+0x274>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e109      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b87      	ldr	r3, [pc, #540]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2201      	movs	r2, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1ee      	bne.n	80056a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2202      	movs	r2, #2
 80056ca:	4013      	ands	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ce:	4b83      	ldr	r3, [pc, #524]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	22f0      	movs	r2, #240	; 0xf0
 80056d4:	4393      	bics	r3, r2
 80056d6:	0019      	movs	r1, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	4b7f      	ldr	r3, [pc, #508]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 80056de:	430a      	orrs	r2, r1
 80056e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	d100      	bne.n	80056ee <HAL_RCC_ClockConfig+0x8a>
 80056ec:	e089      	b.n	8005802 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056f6:	4b79      	ldr	r3, [pc, #484]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	4013      	ands	r3, r2
 8005700:	d120      	bne.n	8005744 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e0e1      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800570e:	4b73      	ldr	r3, [pc, #460]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	049b      	lsls	r3, r3, #18
 8005716:	4013      	ands	r3, r2
 8005718:	d114      	bne.n	8005744 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0d5      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d106      	bne.n	8005734 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005726:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2204      	movs	r2, #4
 800572c:	4013      	ands	r3, r2
 800572e:	d109      	bne.n	8005744 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0ca      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005734:	4b69      	ldr	r3, [pc, #420]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4013      	ands	r3, r2
 800573e:	d101      	bne.n	8005744 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0c2      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005744:	4b65      	ldr	r3, [pc, #404]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2203      	movs	r2, #3
 800574a:	4393      	bics	r3, r2
 800574c:	0019      	movs	r1, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4b62      	ldr	r3, [pc, #392]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005754:	430a      	orrs	r2, r1
 8005756:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005758:	f7fc fd66 	bl	8002228 <HAL_GetTick>
 800575c:	0003      	movs	r3, r0
 800575e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d111      	bne.n	800578c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005768:	e009      	b.n	800577e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576a:	f7fc fd5d 	bl	8002228 <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	4a58      	ldr	r2, [pc, #352]	; (80058d8 <HAL_RCC_ClockConfig+0x274>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e0a5      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800577e:	4b57      	ldr	r3, [pc, #348]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	220c      	movs	r2, #12
 8005784:	4013      	ands	r3, r2
 8005786:	2b08      	cmp	r3, #8
 8005788:	d1ef      	bne.n	800576a <HAL_RCC_ClockConfig+0x106>
 800578a:	e03a      	b.n	8005802 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d111      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005794:	e009      	b.n	80057aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005796:	f7fc fd47 	bl	8002228 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	4a4d      	ldr	r2, [pc, #308]	; (80058d8 <HAL_RCC_ClockConfig+0x274>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e08f      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057aa:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	220c      	movs	r2, #12
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d1ef      	bne.n	8005796 <HAL_RCC_ClockConfig+0x132>
 80057b6:	e024      	b.n	8005802 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d11b      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057c0:	e009      	b.n	80057d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c2:	f7fc fd31 	bl	8002228 <HAL_GetTick>
 80057c6:	0002      	movs	r2, r0
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	4a42      	ldr	r2, [pc, #264]	; (80058d8 <HAL_RCC_ClockConfig+0x274>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e079      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057d6:	4b41      	ldr	r3, [pc, #260]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	220c      	movs	r2, #12
 80057dc:	4013      	ands	r3, r2
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d1ef      	bne.n	80057c2 <HAL_RCC_ClockConfig+0x15e>
 80057e2:	e00e      	b.n	8005802 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e4:	f7fc fd20 	bl	8002228 <HAL_GetTick>
 80057e8:	0002      	movs	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	4a3a      	ldr	r2, [pc, #232]	; (80058d8 <HAL_RCC_ClockConfig+0x274>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e068      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057f8:	4b38      	ldr	r3, [pc, #224]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	220c      	movs	r2, #12
 80057fe:	4013      	ands	r3, r2
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	4013      	ands	r3, r2
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d21e      	bcs.n	800584e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005810:	4b30      	ldr	r3, [pc, #192]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2201      	movs	r2, #1
 8005816:	4393      	bics	r3, r2
 8005818:	0019      	movs	r1, r3
 800581a:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005822:	f7fc fd01 	bl	8002228 <HAL_GetTick>
 8005826:	0003      	movs	r3, r0
 8005828:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	e009      	b.n	8005840 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582c:	f7fc fcfc 	bl	8002228 <HAL_GetTick>
 8005830:	0002      	movs	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <HAL_RCC_ClockConfig+0x274>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e044      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005840:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <HAL_RCC_ClockConfig+0x270>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	4013      	ands	r3, r2
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d1ee      	bne.n	800582c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2204      	movs	r2, #4
 8005854:	4013      	ands	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005858:	4b20      	ldr	r3, [pc, #128]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <HAL_RCC_ClockConfig+0x27c>)
 800585e:	4013      	ands	r3, r2
 8005860:	0019      	movs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005868:	430a      	orrs	r2, r1
 800586a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2208      	movs	r2, #8
 8005872:	4013      	ands	r3, r2
 8005874:	d00a      	beq.n	800588c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005876:	4b19      	ldr	r3, [pc, #100]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <HAL_RCC_ClockConfig+0x280>)
 800587c:	4013      	ands	r3, r2
 800587e:	0019      	movs	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	00da      	lsls	r2, r3, #3
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005888:	430a      	orrs	r2, r1
 800588a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588c:	f000 f832 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8005890:	0001      	movs	r1, r0
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_RCC_ClockConfig+0x278>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	220f      	movs	r2, #15
 800589a:	4013      	ands	r3, r2
 800589c:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <HAL_RCC_ClockConfig+0x284>)
 800589e:	5cd3      	ldrb	r3, [r2, r3]
 80058a0:	000a      	movs	r2, r1
 80058a2:	40da      	lsrs	r2, r3
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_RCC_ClockConfig+0x288>)
 80058a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <HAL_RCC_ClockConfig+0x28c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	250b      	movs	r5, #11
 80058ae:	197c      	adds	r4, r7, r5
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7fc fc73 	bl	800219c <HAL_InitTick>
 80058b6:	0003      	movs	r3, r0
 80058b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80058ba:	197b      	adds	r3, r7, r5
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80058c2:	197b      	adds	r3, r7, r5
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	e000      	b.n	80058ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	0018      	movs	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b004      	add	sp, #16
 80058d0:	bdb0      	pop	{r4, r5, r7, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	40022000 	.word	0x40022000
 80058d8:	00001388 	.word	0x00001388
 80058dc:	40021000 	.word	0x40021000
 80058e0:	fffff8ff 	.word	0xfffff8ff
 80058e4:	ffffc7ff 	.word	0xffffc7ff
 80058e8:	08005da4 	.word	0x08005da4
 80058ec:	20000000 	.word	0x20000000
 80058f0:	20000004 	.word	0x20000004

080058f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f4:	b5b0      	push	{r4, r5, r7, lr}
 80058f6:	b08e      	sub	sp, #56	; 0x38
 80058f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80058fa:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x138>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005902:	230c      	movs	r3, #12
 8005904:	4013      	ands	r3, r2
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d014      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x40>
 800590a:	d900      	bls.n	800590e <HAL_RCC_GetSysClockFreq+0x1a>
 800590c:	e07b      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x112>
 800590e:	2b04      	cmp	r3, #4
 8005910:	d002      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x24>
 8005912:	2b08      	cmp	r3, #8
 8005914:	d00b      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x3a>
 8005916:	e076      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005918:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x138>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2210      	movs	r2, #16
 800591e:	4013      	ands	r3, r2
 8005920:	d002      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005922:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005926:	e07c      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005928:	4b42      	ldr	r3, [pc, #264]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x140>)
 800592a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800592c:	e079      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800592e:	4b42      	ldr	r3, [pc, #264]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x144>)
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005932:	e076      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	0c9a      	lsrs	r2, r3, #18
 8005938:	230f      	movs	r3, #15
 800593a:	401a      	ands	r2, r3
 800593c:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x148>)
 800593e:	5c9b      	ldrb	r3, [r3, r2]
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	0d9a      	lsrs	r2, r3, #22
 8005946:	2303      	movs	r3, #3
 8005948:	4013      	ands	r3, r2
 800594a:	3301      	adds	r3, #1
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	025b      	lsls	r3, r3, #9
 8005956:	4013      	ands	r3, r2
 8005958:	d01a      	beq.n	8005990 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	4a35      	ldr	r2, [pc, #212]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x144>)
 8005964:	2300      	movs	r3, #0
 8005966:	69b8      	ldr	r0, [r7, #24]
 8005968:	69f9      	ldr	r1, [r7, #28]
 800596a:	f7fa fc79 	bl	8000260 <__aeabi_lmul>
 800596e:	0002      	movs	r2, r0
 8005970:	000b      	movs	r3, r1
 8005972:	0010      	movs	r0, r2
 8005974:	0019      	movs	r1, r3
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f7fa fc4d 	bl	8000220 <__aeabi_uldivmod>
 8005986:	0002      	movs	r2, r0
 8005988:	000b      	movs	r3, r1
 800598a:	0013      	movs	r3, r2
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
 800598e:	e037      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005990:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2210      	movs	r2, #16
 8005996:	4013      	ands	r3, r2
 8005998:	d01a      	beq.n	80059d0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	68b8      	ldr	r0, [r7, #8]
 80059a8:	68f9      	ldr	r1, [r7, #12]
 80059aa:	f7fa fc59 	bl	8000260 <__aeabi_lmul>
 80059ae:	0002      	movs	r2, r0
 80059b0:	000b      	movs	r3, r1
 80059b2:	0010      	movs	r0, r2
 80059b4:	0019      	movs	r1, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f7fa fc2d 	bl	8000220 <__aeabi_uldivmod>
 80059c6:	0002      	movs	r2, r0
 80059c8:	000b      	movs	r3, r1
 80059ca:	0013      	movs	r3, r2
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
 80059ce:	e017      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	0018      	movs	r0, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	0019      	movs	r1, r3
 80059d8:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x140>)
 80059da:	2300      	movs	r3, #0
 80059dc:	f7fa fc40 	bl	8000260 <__aeabi_lmul>
 80059e0:	0002      	movs	r2, r0
 80059e2:	000b      	movs	r3, r1
 80059e4:	0010      	movs	r0, r2
 80059e6:	0019      	movs	r1, r3
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	001c      	movs	r4, r3
 80059ec:	2300      	movs	r3, #0
 80059ee:	001d      	movs	r5, r3
 80059f0:	0022      	movs	r2, r4
 80059f2:	002b      	movs	r3, r5
 80059f4:	f7fa fc14 	bl	8000220 <__aeabi_uldivmod>
 80059f8:	0002      	movs	r2, r0
 80059fa:	000b      	movs	r3, r1
 80059fc:	0013      	movs	r3, r2
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a04:	e00d      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	0b5b      	lsrs	r3, r3, #13
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	4013      	ands	r3, r2
 8005a10:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	3301      	adds	r3, #1
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	0212      	lsls	r2, r2, #8
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	0013      	movs	r3, r2
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a20:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b00e      	add	sp, #56	; 0x38
 8005a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	003d0900 	.word	0x003d0900
 8005a34:	00f42400 	.word	0x00f42400
 8005a38:	007a1200 	.word	0x007a1200
 8005a3c:	08005db4 	.word	0x08005db4

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a48:	2017      	movs	r0, #23
 8005a4a:	183b      	adds	r3, r7, r0
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2220      	movs	r2, #32
 8005a56:	4013      	ands	r3, r2
 8005a58:	d100      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005a5a:	e0c7      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5c:	4b8b      	ldr	r3, [pc, #556]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	055b      	lsls	r3, r3, #21
 8005a64:	4013      	ands	r3, r2
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a68:	4b88      	ldr	r3, [pc, #544]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6c:	4b87      	ldr	r3, [pc, #540]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	0549      	lsls	r1, r1, #21
 8005a72:	430a      	orrs	r2, r1
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a76:	183b      	adds	r3, r7, r0
 8005a78:	2201      	movs	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	4b84      	ldr	r3, [pc, #528]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d11a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a88:	4b81      	ldr	r3, [pc, #516]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b80      	ldr	r3, [pc, #512]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	0049      	lsls	r1, r1, #1
 8005a92:	430a      	orrs	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a96:	f7fc fbc7 	bl	8002228 <HAL_GetTick>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa0:	f7fc fbc2 	bl	8002228 <HAL_GetTick>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e0e8      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab2:	4b77      	ldr	r3, [pc, #476]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005abe:	4b73      	ldr	r3, [pc, #460]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	23c0      	movs	r3, #192	; 0xc0
 8005ac4:	039b      	lsls	r3, r3, #14
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	23c0      	movs	r3, #192	; 0xc0
 8005ad0:	039b      	lsls	r3, r3, #14
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d013      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	23c0      	movs	r3, #192	; 0xc0
 8005ae0:	029b      	lsls	r3, r3, #10
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	23c0      	movs	r3, #192	; 0xc0
 8005ae6:	029b      	lsls	r3, r3, #10
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d10a      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005aec:	4b67      	ldr	r3, [pc, #412]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	401a      	ands	r2, r3
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d101      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0c0      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b02:	4b62      	ldr	r3, [pc, #392]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b06:	23c0      	movs	r3, #192	; 0xc0
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d03b      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	23c0      	movs	r3, #192	; 0xc0
 8005b1a:	029b      	lsls	r3, r3, #10
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d033      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d02e      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b2e:	4b57      	ldr	r3, [pc, #348]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	4a58      	ldr	r2, [pc, #352]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b38:	4b54      	ldr	r3, [pc, #336]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b3c:	4b53      	ldr	r3, [pc, #332]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	0309      	lsls	r1, r1, #12
 8005b42:	430a      	orrs	r2, r1
 8005b44:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b46:	4b51      	ldr	r3, [pc, #324]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b4a:	4b50      	ldr	r3, [pc, #320]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b4c:	4952      	ldr	r1, [pc, #328]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b4e:	400a      	ands	r2, r1
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b52:	4b4e      	ldr	r3, [pc, #312]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d014      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b62:	f7fc fb61 	bl	8002228 <HAL_GetTick>
 8005b66:	0003      	movs	r3, r0
 8005b68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b6a:	e009      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fc fb5c 	bl	8002228 <HAL_GetTick>
 8005b70:	0002      	movs	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	4a49      	ldr	r2, [pc, #292]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e081      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b80:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d0ef      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2220      	movs	r2, #32
 8005b92:	4013      	ands	r3, r2
 8005b94:	d01f      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	23c0      	movs	r3, #192	; 0xc0
 8005b9c:	029b      	lsls	r3, r3, #10
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	23c0      	movs	r3, #192	; 0xc0
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d10c      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005ba8:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	23c0      	movs	r3, #192	; 0xc0
 8005bb8:	039b      	lsls	r3, r3, #14
 8005bba:	401a      	ands	r2, r3
 8005bbc:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	23c0      	movs	r3, #192	; 0xc0
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	401a      	ands	r2, r3
 8005bd0:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bd6:	2317      	movs	r3, #23
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be0:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be4:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005be6:	492f      	ldr	r1, [pc, #188]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005be8:	400a      	ands	r2, r1
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4393      	bics	r3, r2
 8005bfe:	0019      	movs	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c06:	430a      	orrs	r2, r1
 8005c08:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	4013      	ands	r3, r2
 8005c12:	d009      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c18:	220c      	movs	r2, #12
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c24:	430a      	orrs	r2, r1
 8005c26:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c32:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c42:	430a      	orrs	r2, r1
 8005c44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c50:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c54:	4a15      	ldr	r2, [pc, #84]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	0019      	movs	r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c60:	430a      	orrs	r2, r1
 8005c62:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	0019      	movs	r1, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b006      	add	sp, #24
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40007000 	.word	0x40007000
 8005c94:	fffcffff 	.word	0xfffcffff
 8005c98:	fff7ffff 	.word	0xfff7ffff
 8005c9c:	00001388 	.word	0x00001388
 8005ca0:	ffcfffff 	.word	0xffcfffff
 8005ca4:	efffffff 	.word	0xefffffff
 8005ca8:	fffff3ff 	.word	0xfffff3ff
 8005cac:	ffffcfff 	.word	0xffffcfff
 8005cb0:	fff3ffff 	.word	0xfff3ffff

08005cb4 <memset>:
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	1882      	adds	r2, r0, r2
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d100      	bne.n	8005cbe <memset+0xa>
 8005cbc:	4770      	bx	lr
 8005cbe:	7019      	strb	r1, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	e7f9      	b.n	8005cb8 <memset+0x4>

08005cc4 <__libc_init_array>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x38>)
 8005cca:	4d0d      	ldr	r5, [pc, #52]	; (8005d00 <__libc_init_array+0x3c>)
 8005ccc:	1b64      	subs	r4, r4, r5
 8005cce:	10a4      	asrs	r4, r4, #2
 8005cd0:	42a6      	cmp	r6, r4
 8005cd2:	d109      	bne.n	8005ce8 <__libc_init_array+0x24>
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	f000 f819 	bl	8005d0c <_init>
 8005cda:	4c0a      	ldr	r4, [pc, #40]	; (8005d04 <__libc_init_array+0x40>)
 8005cdc:	4d0a      	ldr	r5, [pc, #40]	; (8005d08 <__libc_init_array+0x44>)
 8005cde:	1b64      	subs	r4, r4, r5
 8005ce0:	10a4      	asrs	r4, r4, #2
 8005ce2:	42a6      	cmp	r6, r4
 8005ce4:	d105      	bne.n	8005cf2 <__libc_init_array+0x2e>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	00b3      	lsls	r3, r6, #2
 8005cea:	58eb      	ldr	r3, [r5, r3]
 8005cec:	4798      	blx	r3
 8005cee:	3601      	adds	r6, #1
 8005cf0:	e7ee      	b.n	8005cd0 <__libc_init_array+0xc>
 8005cf2:	00b3      	lsls	r3, r6, #2
 8005cf4:	58eb      	ldr	r3, [r5, r3]
 8005cf6:	4798      	blx	r3
 8005cf8:	3601      	adds	r6, #1
 8005cfa:	e7f2      	b.n	8005ce2 <__libc_init_array+0x1e>
 8005cfc:	08005dc8 	.word	0x08005dc8
 8005d00:	08005dc8 	.word	0x08005dc8
 8005d04:	08005dcc 	.word	0x08005dcc
 8005d08:	08005dc8 	.word	0x08005dc8

08005d0c <_init>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr

08005d18 <_fini>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr
