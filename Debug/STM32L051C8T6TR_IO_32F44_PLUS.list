
STM32L051C8T6TR_IO_32F44_PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006120  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800627c  0800627c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006284  08006284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800628c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  08006298  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006298  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008564  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bea  00000000  00000000  000285db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069b  00000000  00000000  0002aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d98  00000000  00000000  0002b123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000beac  00000000  00000000  0003bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00064d10  00000000  00000000  00047d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f98  00000000  00000000  000aca78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000aea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061c8 	.word	0x080061c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080061c8 	.word	0x080061c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_f2uiz>:
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	b510      	push	{r4, lr}
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	1c04      	adds	r4, r0, #0
 80002c4:	f000 fd7e 	bl	8000dc4 <__aeabi_fcmpge>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d103      	bne.n	80002d4 <__aeabi_f2uiz+0x18>
 80002cc:	1c20      	adds	r0, r4, #0
 80002ce:	f000 fce1 	bl	8000c94 <__aeabi_f2iz>
 80002d2:	bd10      	pop	{r4, pc}
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	1c20      	adds	r0, r4, #0
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	f000 fb3b 	bl	8000954 <__aeabi_fsub>
 80002de:	f000 fcd9 	bl	8000c94 <__aeabi_f2iz>
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	469c      	mov	ip, r3
 80002e8:	4460      	add	r0, ip
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_f2uiz+0x16>

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 fd82 	bl	8000e14 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 fd7d 	bl	8000e14 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	d434      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000322:	469b      	mov	fp, r3
 8000324:	4653      	mov	r3, sl
 8000326:	465a      	mov	r2, fp
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83b      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e079      	b.n	8000432 <__udivmoddi4+0x146>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e076      	b.n	8000438 <__udivmoddi4+0x14c>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e029      	b.n	80003b8 <__udivmoddi4+0xcc>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	469b      	mov	fp, r3
 8000390:	2320      	movs	r3, #32
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	4652      	mov	r2, sl
 8000396:	40da      	lsrs	r2, r3
 8000398:	4641      	mov	r1, r8
 800039a:	0013      	movs	r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	408a      	lsls	r2, r1
 80003a0:	0017      	movs	r7, r2
 80003a2:	4642      	mov	r2, r8
 80003a4:	431f      	orrs	r7, r3
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	001e      	movs	r6, r3
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d9c3      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003b0:	2200      	movs	r2, #0
 80003b2:	2300      	movs	r3, #0
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	4643      	mov	r3, r8
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0d8      	beq.n	8000370 <__udivmoddi4+0x84>
 80003be:	07fb      	lsls	r3, r7, #31
 80003c0:	0872      	lsrs	r2, r6, #1
 80003c2:	431a      	orrs	r2, r3
 80003c4:	4646      	mov	r6, r8
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	e00e      	b.n	80003e8 <__udivmoddi4+0xfc>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d101      	bne.n	80003d2 <__udivmoddi4+0xe6>
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d80c      	bhi.n	80003ec <__udivmoddi4+0x100>
 80003d2:	1aa4      	subs	r4, r4, r2
 80003d4:	419d      	sbcs	r5, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	1924      	adds	r4, r4, r4
 80003da:	416d      	adcs	r5, r5
 80003dc:	2100      	movs	r1, #0
 80003de:	3e01      	subs	r6, #1
 80003e0:	1824      	adds	r4, r4, r0
 80003e2:	414d      	adcs	r5, r1
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d006      	beq.n	80003f6 <__udivmoddi4+0x10a>
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	d9ee      	bls.n	80003ca <__udivmoddi4+0xde>
 80003ec:	3e01      	subs	r6, #1
 80003ee:	1924      	adds	r4, r4, r4
 80003f0:	416d      	adcs	r5, r5
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d1f8      	bne.n	80003e8 <__udivmoddi4+0xfc>
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	465b      	mov	r3, fp
 80003fc:	1900      	adds	r0, r0, r4
 80003fe:	4169      	adcs	r1, r5
 8000400:	2b00      	cmp	r3, #0
 8000402:	db24      	blt.n	800044e <__udivmoddi4+0x162>
 8000404:	002b      	movs	r3, r5
 8000406:	465a      	mov	r2, fp
 8000408:	4644      	mov	r4, r8
 800040a:	40d3      	lsrs	r3, r2
 800040c:	002a      	movs	r2, r5
 800040e:	40e2      	lsrs	r2, r4
 8000410:	001c      	movs	r4, r3
 8000412:	465b      	mov	r3, fp
 8000414:	0015      	movs	r5, r2
 8000416:	2b00      	cmp	r3, #0
 8000418:	db2a      	blt.n	8000470 <__udivmoddi4+0x184>
 800041a:	0026      	movs	r6, r4
 800041c:	409e      	lsls	r6, r3
 800041e:	0033      	movs	r3, r6
 8000420:	0026      	movs	r6, r4
 8000422:	4647      	mov	r7, r8
 8000424:	40be      	lsls	r6, r7
 8000426:	0032      	movs	r2, r6
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	4199      	sbcs	r1, r3
 800042c:	9000      	str	r0, [sp, #0]
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	e79e      	b.n	8000370 <__udivmoddi4+0x84>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d8bc      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000436:	e782      	b.n	800033e <__udivmoddi4+0x52>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	2100      	movs	r1, #0
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	9201      	str	r2, [sp, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	40da      	lsrs	r2, r3
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	e785      	b.n	800035a <__udivmoddi4+0x6e>
 800044e:	4642      	mov	r2, r8
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4646      	mov	r6, r8
 8000458:	409a      	lsls	r2, r3
 800045a:	0023      	movs	r3, r4
 800045c:	40f3      	lsrs	r3, r6
 800045e:	4644      	mov	r4, r8
 8000460:	4313      	orrs	r3, r2
 8000462:	002a      	movs	r2, r5
 8000464:	40e2      	lsrs	r2, r4
 8000466:	001c      	movs	r4, r3
 8000468:	465b      	mov	r3, fp
 800046a:	0015      	movs	r5, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	dad4      	bge.n	800041a <__udivmoddi4+0x12e>
 8000470:	4642      	mov	r2, r8
 8000472:	002f      	movs	r7, r5
 8000474:	2320      	movs	r3, #32
 8000476:	0026      	movs	r6, r4
 8000478:	4097      	lsls	r7, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	40de      	lsrs	r6, r3
 800047e:	003b      	movs	r3, r7
 8000480:	4333      	orrs	r3, r6
 8000482:	e7cd      	b.n	8000420 <__udivmoddi4+0x134>

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x1c>
 800049e:	e06f      	b.n	8000580 <__aeabi_fdiv+0xfc>
 80004a0:	2fff      	cmp	r7, #255	; 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fdiv+0x22>
 80004a4:	e074      	b.n	8000590 <__aeabi_fdiv+0x10c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	4699      	mov	r9, r3
 80004ac:	469a      	mov	sl, r3
 80004ae:	00ed      	lsls	r5, r5, #3
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4315      	orrs	r5, r2
 80004b4:	3f7f      	subs	r7, #127	; 0x7f
 80004b6:	0263      	lsls	r3, r4, #9
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	4698      	mov	r8, r3
 80004bc:	0063      	lsls	r3, r4, #1
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	0fe4      	lsrs	r4, r4, #31
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d04d      	beq.n	8000562 <__aeabi_fdiv+0xde>
 80004c6:	2bff      	cmp	r3, #255	; 0xff
 80004c8:	d045      	beq.n	8000556 <__aeabi_fdiv+0xd2>
 80004ca:	4642      	mov	r2, r8
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	04c9      	lsls	r1, r1, #19
 80004d2:	4311      	orrs	r1, r2
 80004d4:	4688      	mov	r8, r1
 80004d6:	2200      	movs	r2, #0
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	0031      	movs	r1, r6
 80004dc:	1aff      	subs	r7, r7, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d900      	bls.n	80004ea <__aeabi_fdiv+0x66>
 80004e8:	e0b8      	b.n	800065c <__aeabi_fdiv+0x1d8>
 80004ea:	4870      	ldr	r0, [pc, #448]	; (80006ac <__aeabi_fdiv+0x228>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58c3      	ldr	r3, [r0, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4692      	mov	sl, r2
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e08d      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e0a1      	b.n	800064e <__aeabi_fdiv+0x1ca>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d018      	beq.n	8000540 <__aeabi_fdiv+0xbc>
 800050e:	003b      	movs	r3, r7
 8000510:	337f      	adds	r3, #127	; 0x7f
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd6d      	ble.n	80005f2 <__aeabi_fdiv+0x16e>
 8000516:	076a      	lsls	r2, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	220f      	movs	r2, #15
 800051c:	402a      	ands	r2, r5
 800051e:	2a04      	cmp	r2, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012a      	lsls	r2, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <__aeabi_fdiv+0x22c>)
 800052a:	401d      	ands	r5, r3
 800052c:	003b      	movs	r3, r7
 800052e:	3380      	adds	r3, #128	; 0x80
 8000530:	2bfe      	cmp	r3, #254	; 0xfe
 8000532:	dd00      	ble.n	8000536 <__aeabi_fdiv+0xb2>
 8000534:	e074      	b.n	8000620 <__aeabi_fdiv+0x19c>
 8000536:	01aa      	lsls	r2, r5, #6
 8000538:	0a52      	lsrs	r2, r2, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e002      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800053e:	000e      	movs	r6, r1
 8000540:	2000      	movs	r0, #0
 8000542:	2200      	movs	r2, #0
 8000544:	05c0      	lsls	r0, r0, #23
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4310      	orrs	r0, r2
 800054a:	4330      	orrs	r0, r6
 800054c:	bce0      	pop	{r5, r6, r7}
 800054e:	46ba      	mov	sl, r7
 8000550:	46b1      	mov	r9, r6
 8000552:	46a8      	mov	r8, r5
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	4643      	mov	r3, r8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13f      	bne.n	80005dc <__aeabi_fdiv+0x158>
 800055c:	2202      	movs	r2, #2
 800055e:	3fff      	subs	r7, #255	; 0xff
 8000560:	e003      	b.n	800056a <__aeabi_fdiv+0xe6>
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d12d      	bne.n	80005c4 <__aeabi_fdiv+0x140>
 8000568:	2201      	movs	r2, #1
 800056a:	0031      	movs	r1, r6
 800056c:	464b      	mov	r3, r9
 800056e:	4061      	eors	r1, r4
 8000570:	b2c9      	uxtb	r1, r1
 8000572:	4313      	orrs	r3, r2
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d838      	bhi.n	80005ea <__aeabi_fdiv+0x166>
 8000578:	484e      	ldr	r0, [pc, #312]	; (80006b4 <__aeabi_fdiv+0x230>)
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	58c3      	ldr	r3, [r0, r3]
 800057e:	469f      	mov	pc, r3
 8000580:	2d00      	cmp	r5, #0
 8000582:	d113      	bne.n	80005ac <__aeabi_fdiv+0x128>
 8000584:	2304      	movs	r3, #4
 8000586:	4699      	mov	r9, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2700      	movs	r7, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e792      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000590:	2d00      	cmp	r5, #0
 8000592:	d105      	bne.n	80005a0 <__aeabi_fdiv+0x11c>
 8000594:	2308      	movs	r3, #8
 8000596:	4699      	mov	r9, r3
 8000598:	3b06      	subs	r3, #6
 800059a:	27ff      	movs	r7, #255	; 0xff
 800059c:	469a      	mov	sl, r3
 800059e:	e78a      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e784      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005ac:	0028      	movs	r0, r5
 80005ae:	f000 fc13 	bl	8000dd8 <__clzsi2>
 80005b2:	2776      	movs	r7, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409d      	lsls	r5, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	427f      	negs	r7, r7
 80005bc:	4699      	mov	r9, r3
 80005be:	469a      	mov	sl, r3
 80005c0:	1a3f      	subs	r7, r7, r0
 80005c2:	e778      	b.n	80004b6 <__aeabi_fdiv+0x32>
 80005c4:	4640      	mov	r0, r8
 80005c6:	f000 fc07 	bl	8000dd8 <__clzsi2>
 80005ca:	4642      	mov	r2, r8
 80005cc:	1f43      	subs	r3, r0, #5
 80005ce:	409a      	lsls	r2, r3
 80005d0:	2376      	movs	r3, #118	; 0x76
 80005d2:	425b      	negs	r3, r3
 80005d4:	4690      	mov	r8, r2
 80005d6:	1a1b      	subs	r3, r3, r0
 80005d8:	2200      	movs	r2, #0
 80005da:	e77e      	b.n	80004da <__aeabi_fdiv+0x56>
 80005dc:	2303      	movs	r3, #3
 80005de:	464a      	mov	r2, r9
 80005e0:	431a      	orrs	r2, r3
 80005e2:	4691      	mov	r9, r2
 80005e4:	33fc      	adds	r3, #252	; 0xfc
 80005e6:	2203      	movs	r2, #3
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x56>
 80005ea:	000e      	movs	r6, r1
 80005ec:	20ff      	movs	r0, #255	; 0xff
 80005ee:	2200      	movs	r2, #0
 80005f0:	e7a8      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dca2      	bgt.n	8000540 <__aeabi_fdiv+0xbc>
 80005fa:	379e      	adds	r7, #158	; 0x9e
 80005fc:	002a      	movs	r2, r5
 80005fe:	40bd      	lsls	r5, r7
 8000600:	40da      	lsrs	r2, r3
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	4315      	orrs	r5, r2
 8000608:	076a      	lsls	r2, r5, #29
 800060a:	d004      	beq.n	8000616 <__aeabi_fdiv+0x192>
 800060c:	220f      	movs	r2, #15
 800060e:	402a      	ands	r2, r5
 8000610:	2a04      	cmp	r2, #4
 8000612:	d000      	beq.n	8000616 <__aeabi_fdiv+0x192>
 8000614:	3504      	adds	r5, #4
 8000616:	016a      	lsls	r2, r5, #5
 8000618:	d544      	bpl.n	80006a4 <__aeabi_fdiv+0x220>
 800061a:	2001      	movs	r0, #1
 800061c:	2200      	movs	r2, #0
 800061e:	e791      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000620:	20ff      	movs	r0, #255	; 0xff
 8000622:	2200      	movs	r2, #0
 8000624:	e78e      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	2600      	movs	r6, #0
 800062a:	20ff      	movs	r0, #255	; 0xff
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	e789      	b.n	8000544 <__aeabi_fdiv+0xc0>
 8000630:	2300      	movs	r3, #0
 8000632:	4698      	mov	r8, r3
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	03d2      	lsls	r2, r2, #15
 8000638:	4215      	tst	r5, r2
 800063a:	d008      	beq.n	800064e <__aeabi_fdiv+0x1ca>
 800063c:	4643      	mov	r3, r8
 800063e:	4213      	tst	r3, r2
 8000640:	d105      	bne.n	800064e <__aeabi_fdiv+0x1ca>
 8000642:	431a      	orrs	r2, r3
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	0026      	movs	r6, r4
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	0a52      	lsrs	r2, r2, #9
 800064c:	e77a      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	432a      	orrs	r2, r5
 8000654:	0252      	lsls	r2, r2, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e773      	b.n	8000544 <__aeabi_fdiv+0xc0>
 800065c:	4642      	mov	r2, r8
 800065e:	016b      	lsls	r3, r5, #5
 8000660:	0155      	lsls	r5, r2, #5
 8000662:	42ab      	cmp	r3, r5
 8000664:	d21a      	bcs.n	800069c <__aeabi_fdiv+0x218>
 8000666:	201b      	movs	r0, #27
 8000668:	2200      	movs	r2, #0
 800066a:	3f01      	subs	r7, #1
 800066c:	2601      	movs	r6, #1
 800066e:	001c      	movs	r4, r3
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2c00      	cmp	r4, #0
 8000676:	db01      	blt.n	800067c <__aeabi_fdiv+0x1f8>
 8000678:	429d      	cmp	r5, r3
 800067a:	d801      	bhi.n	8000680 <__aeabi_fdiv+0x1fc>
 800067c:	1b5b      	subs	r3, r3, r5
 800067e:	4332      	orrs	r2, r6
 8000680:	3801      	subs	r0, #1
 8000682:	2800      	cmp	r0, #0
 8000684:	d1f3      	bne.n	800066e <__aeabi_fdiv+0x1ea>
 8000686:	1e58      	subs	r0, r3, #1
 8000688:	4183      	sbcs	r3, r0
 800068a:	4313      	orrs	r3, r2
 800068c:	001d      	movs	r5, r3
 800068e:	003b      	movs	r3, r7
 8000690:	337f      	adds	r3, #127	; 0x7f
 8000692:	000e      	movs	r6, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd00      	ble.n	800069a <__aeabi_fdiv+0x216>
 8000698:	e73d      	b.n	8000516 <__aeabi_fdiv+0x92>
 800069a:	e7aa      	b.n	80005f2 <__aeabi_fdiv+0x16e>
 800069c:	201a      	movs	r0, #26
 800069e:	2201      	movs	r2, #1
 80006a0:	1b5b      	subs	r3, r3, r5
 80006a2:	e7e3      	b.n	800066c <__aeabi_fdiv+0x1e8>
 80006a4:	01aa      	lsls	r2, r5, #6
 80006a6:	2000      	movs	r0, #0
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	e74b      	b.n	8000544 <__aeabi_fdiv+0xc0>
 80006ac:	080061e0 	.word	0x080061e0
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	08006220 	.word	0x08006220

080006b8 <__aeabi_fmul>:
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	464f      	mov	r7, r9
 80006c0:	4646      	mov	r6, r8
 80006c2:	4699      	mov	r9, r3
 80006c4:	46d6      	mov	lr, sl
 80006c6:	0fc3      	lsrs	r3, r0, #31
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	4698      	mov	r8, r3
 80006cc:	b5c0      	push	{r6, r7, lr}
 80006ce:	464b      	mov	r3, r9
 80006d0:	1c0f      	adds	r7, r1, #0
 80006d2:	0e2d      	lsrs	r5, r5, #24
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fmul+0x20>
 80006d6:	e0cb      	b.n	8000870 <__aeabi_fmul+0x1b8>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fmul+0x26>
 80006dc:	e0cf      	b.n	800087e <__aeabi_fmul+0x1c6>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	04d2      	lsls	r2, r2, #19
 80006e4:	431a      	orrs	r2, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	4691      	mov	r9, r2
 80006ea:	2600      	movs	r6, #0
 80006ec:	469a      	mov	sl, r3
 80006ee:	3d7f      	subs	r5, #127	; 0x7f
 80006f0:	027c      	lsls	r4, r7, #9
 80006f2:	007b      	lsls	r3, r7, #1
 80006f4:	0a64      	lsrs	r4, r4, #9
 80006f6:	0e1b      	lsrs	r3, r3, #24
 80006f8:	0fff      	lsrs	r7, r7, #31
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_fmul+0x48>
 80006fe:	e0a9      	b.n	8000854 <__aeabi_fmul+0x19c>
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d011      	beq.n	8000728 <__aeabi_fmul+0x70>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	00e4      	lsls	r4, r4, #3
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4314      	orrs	r4, r2
 800070c:	4642      	mov	r2, r8
 800070e:	3b7f      	subs	r3, #127	; 0x7f
 8000710:	195b      	adds	r3, r3, r5
 8000712:	407a      	eors	r2, r7
 8000714:	2000      	movs	r0, #0
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	1c5d      	adds	r5, r3, #1
 800071a:	2e0a      	cmp	r6, #10
 800071c:	dd13      	ble.n	8000746 <__aeabi_fmul+0x8e>
 800071e:	003a      	movs	r2, r7
 8000720:	2e0b      	cmp	r6, #11
 8000722:	d047      	beq.n	80007b4 <__aeabi_fmul+0xfc>
 8000724:	4647      	mov	r7, r8
 8000726:	e03f      	b.n	80007a8 <__aeabi_fmul+0xf0>
 8000728:	002b      	movs	r3, r5
 800072a:	33ff      	adds	r3, #255	; 0xff
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11e      	bne.n	800076e <__aeabi_fmul+0xb6>
 8000730:	2202      	movs	r2, #2
 8000732:	4316      	orrs	r6, r2
 8000734:	4642      	mov	r2, r8
 8000736:	3501      	adds	r5, #1
 8000738:	407a      	eors	r2, r7
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	35ff      	adds	r5, #255	; 0xff
 800073e:	2e0a      	cmp	r6, #10
 8000740:	dd00      	ble.n	8000744 <__aeabi_fmul+0x8c>
 8000742:	e0e4      	b.n	800090e <__aeabi_fmul+0x256>
 8000744:	2002      	movs	r0, #2
 8000746:	2e02      	cmp	r6, #2
 8000748:	dc1c      	bgt.n	8000784 <__aeabi_fmul+0xcc>
 800074a:	3e01      	subs	r6, #1
 800074c:	2e01      	cmp	r6, #1
 800074e:	d842      	bhi.n	80007d6 <__aeabi_fmul+0x11e>
 8000750:	2802      	cmp	r0, #2
 8000752:	d03d      	beq.n	80007d0 <__aeabi_fmul+0x118>
 8000754:	2801      	cmp	r0, #1
 8000756:	d166      	bne.n	8000826 <__aeabi_fmul+0x16e>
 8000758:	2000      	movs	r0, #0
 800075a:	2100      	movs	r1, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4308      	orrs	r0, r1
 8000760:	07d2      	lsls	r2, r2, #31
 8000762:	4310      	orrs	r0, r2
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	2203      	movs	r2, #3
 8000770:	4316      	orrs	r6, r2
 8000772:	4642      	mov	r2, r8
 8000774:	3501      	adds	r5, #1
 8000776:	407a      	eors	r2, r7
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	35ff      	adds	r5, #255	; 0xff
 800077c:	2e0a      	cmp	r6, #10
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0xca>
 8000780:	e0e4      	b.n	800094c <__aeabi_fmul+0x294>
 8000782:	2003      	movs	r0, #3
 8000784:	2101      	movs	r1, #1
 8000786:	40b1      	lsls	r1, r6
 8000788:	26a6      	movs	r6, #166	; 0xa6
 800078a:	00f6      	lsls	r6, r6, #3
 800078c:	4231      	tst	r1, r6
 800078e:	d10a      	bne.n	80007a6 <__aeabi_fmul+0xee>
 8000790:	2690      	movs	r6, #144	; 0x90
 8000792:	00b6      	lsls	r6, r6, #2
 8000794:	4231      	tst	r1, r6
 8000796:	d116      	bne.n	80007c6 <__aeabi_fmul+0x10e>
 8000798:	3eb9      	subs	r6, #185	; 0xb9
 800079a:	3eff      	subs	r6, #255	; 0xff
 800079c:	420e      	tst	r6, r1
 800079e:	d01a      	beq.n	80007d6 <__aeabi_fmul+0x11e>
 80007a0:	46a1      	mov	r9, r4
 80007a2:	4682      	mov	sl, r0
 80007a4:	e000      	b.n	80007a8 <__aeabi_fmul+0xf0>
 80007a6:	0017      	movs	r7, r2
 80007a8:	4653      	mov	r3, sl
 80007aa:	003a      	movs	r2, r7
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d00f      	beq.n	80007d0 <__aeabi_fmul+0x118>
 80007b0:	464c      	mov	r4, r9
 80007b2:	4650      	mov	r0, sl
 80007b4:	2803      	cmp	r0, #3
 80007b6:	d1cd      	bne.n	8000754 <__aeabi_fmul+0x9c>
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	03c9      	lsls	r1, r1, #15
 80007bc:	4321      	orrs	r1, r4
 80007be:	0249      	lsls	r1, r1, #9
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	0a49      	lsrs	r1, r1, #9
 80007c4:	e7ca      	b.n	800075c <__aeabi_fmul+0xa4>
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	2200      	movs	r2, #0
 80007ca:	20ff      	movs	r0, #255	; 0xff
 80007cc:	03c9      	lsls	r1, r1, #15
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d0:	20ff      	movs	r0, #255	; 0xff
 80007d2:	2100      	movs	r1, #0
 80007d4:	e7c2      	b.n	800075c <__aeabi_fmul+0xa4>
 80007d6:	0c20      	lsrs	r0, r4, #16
 80007d8:	4649      	mov	r1, r9
 80007da:	0424      	lsls	r4, r4, #16
 80007dc:	0c24      	lsrs	r4, r4, #16
 80007de:	0027      	movs	r7, r4
 80007e0:	0c0e      	lsrs	r6, r1, #16
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	0c09      	lsrs	r1, r1, #16
 80007e6:	4374      	muls	r4, r6
 80007e8:	434f      	muls	r7, r1
 80007ea:	4346      	muls	r6, r0
 80007ec:	4348      	muls	r0, r1
 80007ee:	0c39      	lsrs	r1, r7, #16
 80007f0:	1900      	adds	r0, r0, r4
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	428c      	cmp	r4, r1
 80007f6:	d903      	bls.n	8000800 <__aeabi_fmul+0x148>
 80007f8:	2080      	movs	r0, #128	; 0x80
 80007fa:	0240      	lsls	r0, r0, #9
 80007fc:	4684      	mov	ip, r0
 80007fe:	4466      	add	r6, ip
 8000800:	043f      	lsls	r7, r7, #16
 8000802:	0408      	lsls	r0, r1, #16
 8000804:	0c3f      	lsrs	r7, r7, #16
 8000806:	19c0      	adds	r0, r0, r7
 8000808:	0184      	lsls	r4, r0, #6
 800080a:	1e67      	subs	r7, r4, #1
 800080c:	41bc      	sbcs	r4, r7
 800080e:	0c09      	lsrs	r1, r1, #16
 8000810:	0e80      	lsrs	r0, r0, #26
 8000812:	1989      	adds	r1, r1, r6
 8000814:	4304      	orrs	r4, r0
 8000816:	0189      	lsls	r1, r1, #6
 8000818:	430c      	orrs	r4, r1
 800081a:	0109      	lsls	r1, r1, #4
 800081c:	d571      	bpl.n	8000902 <__aeabi_fmul+0x24a>
 800081e:	2301      	movs	r3, #1
 8000820:	0861      	lsrs	r1, r4, #1
 8000822:	401c      	ands	r4, r3
 8000824:	430c      	orrs	r4, r1
 8000826:	002b      	movs	r3, r5
 8000828:	337f      	adds	r3, #127	; 0x7f
 800082a:	2b00      	cmp	r3, #0
 800082c:	dd51      	ble.n	80008d2 <__aeabi_fmul+0x21a>
 800082e:	0761      	lsls	r1, r4, #29
 8000830:	d004      	beq.n	800083c <__aeabi_fmul+0x184>
 8000832:	210f      	movs	r1, #15
 8000834:	4021      	ands	r1, r4
 8000836:	2904      	cmp	r1, #4
 8000838:	d000      	beq.n	800083c <__aeabi_fmul+0x184>
 800083a:	3404      	adds	r4, #4
 800083c:	0121      	lsls	r1, r4, #4
 800083e:	d503      	bpl.n	8000848 <__aeabi_fmul+0x190>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <__aeabi_fmul+0x298>)
 8000842:	401c      	ands	r4, r3
 8000844:	002b      	movs	r3, r5
 8000846:	3380      	adds	r3, #128	; 0x80
 8000848:	2bfe      	cmp	r3, #254	; 0xfe
 800084a:	dcc1      	bgt.n	80007d0 <__aeabi_fmul+0x118>
 800084c:	01a1      	lsls	r1, r4, #6
 800084e:	0a49      	lsrs	r1, r1, #9
 8000850:	b2d8      	uxtb	r0, r3
 8000852:	e783      	b.n	800075c <__aeabi_fmul+0xa4>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d12c      	bne.n	80008b2 <__aeabi_fmul+0x1fa>
 8000858:	2301      	movs	r3, #1
 800085a:	4642      	mov	r2, r8
 800085c:	431e      	orrs	r6, r3
 800085e:	002b      	movs	r3, r5
 8000860:	407a      	eors	r2, r7
 8000862:	2001      	movs	r0, #1
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	1c5d      	adds	r5, r3, #1
 8000868:	2e0a      	cmp	r6, #10
 800086a:	dd00      	ble.n	800086e <__aeabi_fmul+0x1b6>
 800086c:	e757      	b.n	800071e <__aeabi_fmul+0x66>
 800086e:	e76a      	b.n	8000746 <__aeabi_fmul+0x8e>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d110      	bne.n	8000896 <__aeabi_fmul+0x1de>
 8000874:	2301      	movs	r3, #1
 8000876:	2604      	movs	r6, #4
 8000878:	2500      	movs	r5, #0
 800087a:	469a      	mov	sl, r3
 800087c:	e738      	b.n	80006f0 <__aeabi_fmul+0x38>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d104      	bne.n	800088c <__aeabi_fmul+0x1d4>
 8000882:	2302      	movs	r3, #2
 8000884:	2608      	movs	r6, #8
 8000886:	25ff      	movs	r5, #255	; 0xff
 8000888:	469a      	mov	sl, r3
 800088a:	e731      	b.n	80006f0 <__aeabi_fmul+0x38>
 800088c:	2303      	movs	r3, #3
 800088e:	260c      	movs	r6, #12
 8000890:	25ff      	movs	r5, #255	; 0xff
 8000892:	469a      	mov	sl, r3
 8000894:	e72c      	b.n	80006f0 <__aeabi_fmul+0x38>
 8000896:	4648      	mov	r0, r9
 8000898:	f000 fa9e 	bl	8000dd8 <__clzsi2>
 800089c:	464a      	mov	r2, r9
 800089e:	1f43      	subs	r3, r0, #5
 80008a0:	2576      	movs	r5, #118	; 0x76
 80008a2:	409a      	lsls	r2, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	426d      	negs	r5, r5
 80008a8:	4691      	mov	r9, r2
 80008aa:	2600      	movs	r6, #0
 80008ac:	469a      	mov	sl, r3
 80008ae:	1a2d      	subs	r5, r5, r0
 80008b0:	e71e      	b.n	80006f0 <__aeabi_fmul+0x38>
 80008b2:	0020      	movs	r0, r4
 80008b4:	f000 fa90 	bl	8000dd8 <__clzsi2>
 80008b8:	4642      	mov	r2, r8
 80008ba:	1f43      	subs	r3, r0, #5
 80008bc:	409c      	lsls	r4, r3
 80008be:	1a2b      	subs	r3, r5, r0
 80008c0:	3b76      	subs	r3, #118	; 0x76
 80008c2:	407a      	eors	r2, r7
 80008c4:	2000      	movs	r0, #0
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	1c5d      	adds	r5, r3, #1
 80008ca:	2e0a      	cmp	r6, #10
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x218>
 80008ce:	e726      	b.n	800071e <__aeabi_fmul+0x66>
 80008d0:	e739      	b.n	8000746 <__aeabi_fmul+0x8e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	1acb      	subs	r3, r1, r3
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fmul+0x224>
 80008da:	e73d      	b.n	8000758 <__aeabi_fmul+0xa0>
 80008dc:	359e      	adds	r5, #158	; 0x9e
 80008de:	0021      	movs	r1, r4
 80008e0:	40ac      	lsls	r4, r5
 80008e2:	40d9      	lsrs	r1, r3
 80008e4:	1e63      	subs	r3, r4, #1
 80008e6:	419c      	sbcs	r4, r3
 80008e8:	4321      	orrs	r1, r4
 80008ea:	074b      	lsls	r3, r1, #29
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008ee:	230f      	movs	r3, #15
 80008f0:	400b      	ands	r3, r1
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x240>
 80008f6:	3104      	adds	r1, #4
 80008f8:	014b      	lsls	r3, r1, #5
 80008fa:	d504      	bpl.n	8000906 <__aeabi_fmul+0x24e>
 80008fc:	2001      	movs	r0, #1
 80008fe:	2100      	movs	r1, #0
 8000900:	e72c      	b.n	800075c <__aeabi_fmul+0xa4>
 8000902:	001d      	movs	r5, r3
 8000904:	e78f      	b.n	8000826 <__aeabi_fmul+0x16e>
 8000906:	0189      	lsls	r1, r1, #6
 8000908:	2000      	movs	r0, #0
 800090a:	0a49      	lsrs	r1, r1, #9
 800090c:	e726      	b.n	800075c <__aeabi_fmul+0xa4>
 800090e:	2302      	movs	r3, #2
 8000910:	2e0f      	cmp	r6, #15
 8000912:	d10c      	bne.n	800092e <__aeabi_fmul+0x276>
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	464b      	mov	r3, r9
 8000918:	03c9      	lsls	r1, r1, #15
 800091a:	420b      	tst	r3, r1
 800091c:	d00d      	beq.n	800093a <__aeabi_fmul+0x282>
 800091e:	420c      	tst	r4, r1
 8000920:	d10b      	bne.n	800093a <__aeabi_fmul+0x282>
 8000922:	4321      	orrs	r1, r4
 8000924:	0249      	lsls	r1, r1, #9
 8000926:	003a      	movs	r2, r7
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	0a49      	lsrs	r1, r1, #9
 800092c:	e716      	b.n	800075c <__aeabi_fmul+0xa4>
 800092e:	2e0b      	cmp	r6, #11
 8000930:	d000      	beq.n	8000934 <__aeabi_fmul+0x27c>
 8000932:	e6f7      	b.n	8000724 <__aeabi_fmul+0x6c>
 8000934:	46a1      	mov	r9, r4
 8000936:	469a      	mov	sl, r3
 8000938:	e736      	b.n	80007a8 <__aeabi_fmul+0xf0>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	464b      	mov	r3, r9
 800093e:	03c9      	lsls	r1, r1, #15
 8000940:	4319      	orrs	r1, r3
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4642      	mov	r2, r8
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	0a49      	lsrs	r1, r1, #9
 800094a:	e707      	b.n	800075c <__aeabi_fmul+0xa4>
 800094c:	2303      	movs	r3, #3
 800094e:	e7df      	b.n	8000910 <__aeabi_fmul+0x258>
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	46c6      	mov	lr, r8
 8000958:	0243      	lsls	r3, r0, #9
 800095a:	0a5b      	lsrs	r3, r3, #9
 800095c:	0045      	lsls	r5, r0, #1
 800095e:	00da      	lsls	r2, r3, #3
 8000960:	0fc4      	lsrs	r4, r0, #31
 8000962:	0248      	lsls	r0, r1, #9
 8000964:	004f      	lsls	r7, r1, #1
 8000966:	4694      	mov	ip, r2
 8000968:	0a42      	lsrs	r2, r0, #9
 800096a:	001e      	movs	r6, r3
 800096c:	4690      	mov	r8, r2
 800096e:	b500      	push	{lr}
 8000970:	0e2d      	lsrs	r5, r5, #24
 8000972:	0e3f      	lsrs	r7, r7, #24
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	0980      	lsrs	r0, r0, #6
 8000978:	2fff      	cmp	r7, #255	; 0xff
 800097a:	d059      	beq.n	8000a30 <__aeabi_fsub+0xdc>
 800097c:	2201      	movs	r2, #1
 800097e:	4051      	eors	r1, r2
 8000980:	428c      	cmp	r4, r1
 8000982:	d039      	beq.n	80009f8 <__aeabi_fsub+0xa4>
 8000984:	1bea      	subs	r2, r5, r7
 8000986:	2a00      	cmp	r2, #0
 8000988:	dd58      	ble.n	8000a3c <__aeabi_fsub+0xe8>
 800098a:	2f00      	cmp	r7, #0
 800098c:	d068      	beq.n	8000a60 <__aeabi_fsub+0x10c>
 800098e:	2dff      	cmp	r5, #255	; 0xff
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x40>
 8000992:	e0d1      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	04db      	lsls	r3, r3, #19
 8000998:	4318      	orrs	r0, r3
 800099a:	2a1b      	cmp	r2, #27
 800099c:	dc00      	bgt.n	80009a0 <__aeabi_fsub+0x4c>
 800099e:	e0e3      	b.n	8000b68 <__aeabi_fsub+0x214>
 80009a0:	2301      	movs	r3, #1
 80009a2:	4662      	mov	r2, ip
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x58>
 80009aa:	e0ac      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	099e      	lsrs	r6, r3, #6
 80009b0:	0030      	movs	r0, r6
 80009b2:	f000 fa11 	bl	8000dd8 <__clzsi2>
 80009b6:	0033      	movs	r3, r6
 80009b8:	3805      	subs	r0, #5
 80009ba:	4083      	lsls	r3, r0
 80009bc:	4285      	cmp	r5, r0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x6e>
 80009c0:	e0c6      	b.n	8000b50 <__aeabi_fsub+0x1fc>
 80009c2:	4ab2      	ldr	r2, [pc, #712]	; (8000c8c <__aeabi_fsub+0x338>)
 80009c4:	1a2d      	subs	r5, r5, r0
 80009c6:	4013      	ands	r3, r2
 80009c8:	075a      	lsls	r2, r3, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009cc:	220f      	movs	r2, #15
 80009ce:	401a      	ands	r2, r3
 80009d0:	2a04      	cmp	r2, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009d4:	3304      	adds	r3, #4
 80009d6:	015a      	lsls	r2, r3, #5
 80009d8:	d400      	bmi.n	80009dc <__aeabi_fsub+0x88>
 80009da:	e097      	b.n	8000b0c <__aeabi_fsub+0x1b8>
 80009dc:	1c6a      	adds	r2, r5, #1
 80009de:	2dfe      	cmp	r5, #254	; 0xfe
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x90>
 80009e2:	e084      	b.n	8000aee <__aeabi_fsub+0x19a>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	0a5e      	lsrs	r6, r3, #9
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	05d0      	lsls	r0, r2, #23
 80009ec:	4330      	orrs	r0, r6
 80009ee:	07e4      	lsls	r4, r4, #31
 80009f0:	4320      	orrs	r0, r4
 80009f2:	bc80      	pop	{r7}
 80009f4:	46b8      	mov	r8, r7
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	1bea      	subs	r2, r5, r7
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	dd41      	ble.n	8000a82 <__aeabi_fsub+0x12e>
 80009fe:	2f00      	cmp	r7, #0
 8000a00:	d06b      	beq.n	8000ada <__aeabi_fsub+0x186>
 8000a02:	2dff      	cmp	r5, #255	; 0xff
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0xb4>
 8000a06:	e097      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	04db      	lsls	r3, r3, #19
 8000a0c:	4318      	orrs	r0, r3
 8000a0e:	2a1b      	cmp	r2, #27
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_fsub+0xc0>
 8000a12:	e0cc      	b.n	8000bae <__aeabi_fsub+0x25a>
 8000a14:	2301      	movs	r3, #1
 8000a16:	4463      	add	r3, ip
 8000a18:	015a      	lsls	r2, r3, #5
 8000a1a:	d574      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000a1c:	3501      	adds	r5, #1
 8000a1e:	2dff      	cmp	r5, #255	; 0xff
 8000a20:	d065      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000a22:	2201      	movs	r2, #1
 8000a24:	499a      	ldr	r1, [pc, #616]	; (8000c90 <__aeabi_fsub+0x33c>)
 8000a26:	401a      	ands	r2, r3
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	e7cb      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d01f      	beq.n	8000a74 <__aeabi_fsub+0x120>
 8000a34:	428c      	cmp	r4, r1
 8000a36:	d022      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a38:	002a      	movs	r2, r5
 8000a3a:	3aff      	subs	r2, #255	; 0xff
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	d035      	beq.n	8000aac <__aeabi_fsub+0x158>
 8000a40:	1b7a      	subs	r2, r7, r5
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d000      	beq.n	8000a48 <__aeabi_fsub+0xf4>
 8000a46:	e099      	b.n	8000b7c <__aeabi_fsub+0x228>
 8000a48:	4663      	mov	r3, ip
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0xfc>
 8000a4e:	e0dd      	b.n	8000c0c <__aeabi_fsub+0x2b8>
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	2a01      	cmp	r2, #1
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x104>
 8000a56:	e105      	b.n	8000c64 <__aeabi_fsub+0x310>
 8000a58:	2aff      	cmp	r2, #255	; 0xff
 8000a5a:	d06b      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	e094      	b.n	8000b8a <__aeabi_fsub+0x236>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d073      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000a64:	1e51      	subs	r1, r2, #1
 8000a66:	2a01      	cmp	r2, #1
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x118>
 8000a6a:	e0df      	b.n	8000c2c <__aeabi_fsub+0x2d8>
 8000a6c:	2aff      	cmp	r2, #255	; 0xff
 8000a6e:	d063      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000a70:	000a      	movs	r2, r1
 8000a72:	e792      	b.n	800099a <__aeabi_fsub+0x46>
 8000a74:	2201      	movs	r2, #1
 8000a76:	4051      	eors	r1, r2
 8000a78:	42a1      	cmp	r1, r4
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x12a>
 8000a7c:	e782      	b.n	8000984 <__aeabi_fsub+0x30>
 8000a7e:	002a      	movs	r2, r5
 8000a80:	3aff      	subs	r2, #255	; 0xff
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d036      	beq.n	8000af4 <__aeabi_fsub+0x1a0>
 8000a86:	1b7a      	subs	r2, r7, r5
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fsub+0x13a>
 8000a8c:	e0aa      	b.n	8000be4 <__aeabi_fsub+0x290>
 8000a8e:	2fff      	cmp	r7, #255	; 0xff
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x140>
 8000a92:	e0da      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	4661      	mov	r1, ip
 8000a98:	04db      	lsls	r3, r3, #19
 8000a9a:	4319      	orrs	r1, r3
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2a1b      	cmp	r2, #27
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_fsub+0x150>
 8000aa2:	e0d4      	b.n	8000c4e <__aeabi_fsub+0x2fa>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	003d      	movs	r5, r7
 8000aa8:	181b      	adds	r3, r3, r0
 8000aaa:	e7b5      	b.n	8000a18 <__aeabi_fsub+0xc4>
 8000aac:	27fe      	movs	r7, #254	; 0xfe
 8000aae:	1c6a      	adds	r2, r5, #1
 8000ab0:	4217      	tst	r7, r2
 8000ab2:	d171      	bne.n	8000b98 <__aeabi_fsub+0x244>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x166>
 8000ab8:	e09e      	b.n	8000bf8 <__aeabi_fsub+0x2a4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fsub+0x16e>
 8000ac0:	e0d5      	b.n	8000c6e <__aeabi_fsub+0x31a>
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x176>
 8000ac8:	e78f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000aca:	1a1b      	subs	r3, r3, r0
 8000acc:	015e      	lsls	r6, r3, #5
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_fsub+0x17e>
 8000ad0:	e0d6      	b.n	8000c80 <__aeabi_fsub+0x32c>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1ac3      	subs	r3, r0, r3
 8000ad8:	e776      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d036      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000ade:	1e51      	subs	r1, r2, #1
 8000ae0:	2a01      	cmp	r2, #1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x192>
 8000ae4:	e09a      	b.n	8000c1c <__aeabi_fsub+0x2c8>
 8000ae6:	2aff      	cmp	r2, #255	; 0xff
 8000ae8:	d026      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000aea:	000a      	movs	r2, r1
 8000aec:	e78f      	b.n	8000a0e <__aeabi_fsub+0xba>
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	2600      	movs	r6, #0
 8000af2:	e77a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000af4:	27fe      	movs	r7, #254	; 0xfe
 8000af6:	1c6a      	adds	r2, r5, #1
 8000af8:	4217      	tst	r7, r2
 8000afa:	d062      	beq.n	8000bc2 <__aeabi_fsub+0x26e>
 8000afc:	2aff      	cmp	r2, #255	; 0xff
 8000afe:	d0f6      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b00:	0015      	movs	r5, r2
 8000b02:	4460      	add	r0, ip
 8000b04:	0843      	lsrs	r3, r0, #1
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fsub+0x1b8>
 8000b0a:	e75f      	b.n	80009cc <__aeabi_fsub+0x78>
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d012      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b12:	025b      	lsls	r3, r3, #9
 8000b14:	0a5e      	lsrs	r6, r3, #9
 8000b16:	b2ea      	uxtb	r2, r5
 8000b18:	e767      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b1a:	4662      	mov	r2, ip
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000b20:	e093      	b.n	8000c4a <__aeabi_fsub+0x2f6>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d008      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	03d2      	lsls	r2, r2, #15
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	d004      	beq.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b2e:	4640      	mov	r0, r8
 8000b30:	4210      	tst	r0, r2
 8000b32:	d101      	bne.n	8000b38 <__aeabi_fsub+0x1e4>
 8000b34:	000c      	movs	r4, r1
 8000b36:	4643      	mov	r3, r8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0d8      	beq.n	8000aee <__aeabi_fsub+0x19a>
 8000b3c:	2680      	movs	r6, #128	; 0x80
 8000b3e:	03f6      	lsls	r6, r6, #15
 8000b40:	431e      	orrs	r6, r3
 8000b42:	0276      	lsls	r6, r6, #9
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	0a76      	lsrs	r6, r6, #9
 8000b48:	e74f      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	0015      	movs	r5, r2
 8000b4e:	e7de      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000b50:	2220      	movs	r2, #32
 8000b52:	1b40      	subs	r0, r0, r5
 8000b54:	3001      	adds	r0, #1
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	40c1      	lsrs	r1, r0
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	4193      	sbcs	r3, r2
 8000b62:	2500      	movs	r5, #0
 8000b64:	430b      	orrs	r3, r1
 8000b66:	e72f      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000b68:	2320      	movs	r3, #32
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	0001      	movs	r1, r0
 8000b6e:	4098      	lsls	r0, r3
 8000b70:	0003      	movs	r3, r0
 8000b72:	40d1      	lsrs	r1, r2
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	4193      	sbcs	r3, r2
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	e712      	b.n	80009a2 <__aeabi_fsub+0x4e>
 8000b7c:	2fff      	cmp	r7, #255	; 0xff
 8000b7e:	d0d9      	beq.n	8000b34 <__aeabi_fsub+0x1e0>
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	4664      	mov	r4, ip
 8000b84:	04db      	lsls	r3, r3, #19
 8000b86:	431c      	orrs	r4, r3
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	2a1b      	cmp	r2, #27
 8000b8c:	dd52      	ble.n	8000c34 <__aeabi_fsub+0x2e0>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	000c      	movs	r4, r1
 8000b92:	003d      	movs	r5, r7
 8000b94:	1ac3      	subs	r3, r0, r3
 8000b96:	e706      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000b98:	4663      	mov	r3, ip
 8000b9a:	1a1e      	subs	r6, r3, r0
 8000b9c:	0173      	lsls	r3, r6, #5
 8000b9e:	d439      	bmi.n	8000c14 <__aeabi_fsub+0x2c0>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000ba4:	e704      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2600      	movs	r6, #0
 8000bac:	e71d      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bae:	2320      	movs	r3, #32
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	0001      	movs	r1, r0
 8000bb4:	4098      	lsls	r0, r3
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	40d1      	lsrs	r1, r2
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	4193      	sbcs	r3, r2
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	e729      	b.n	8000a16 <__aeabi_fsub+0xc2>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d1a9      	bne.n	8000b1a <__aeabi_fsub+0x1c6>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d056      	beq.n	8000c7a <__aeabi_fsub+0x326>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x280>
 8000bd2:	e70a      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	4463      	add	r3, ip
 8000bd8:	015a      	lsls	r2, r3, #5
 8000bda:	d594      	bpl.n	8000b06 <__aeabi_fsub+0x1b2>
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <__aeabi_fsub+0x338>)
 8000bde:	3501      	adds	r5, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	e790      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000be4:	4663      	mov	r3, ip
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0af      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000bea:	1e53      	subs	r3, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d015      	beq.n	8000c1c <__aeabi_fsub+0x2c8>
 8000bf0:	2aff      	cmp	r2, #255	; 0xff
 8000bf2:	d02a      	beq.n	8000c4a <__aeabi_fsub+0x2f6>
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	e752      	b.n	8000a9e <__aeabi_fsub+0x14a>
 8000bf8:	4662      	mov	r2, ip
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d191      	bne.n	8000b22 <__aeabi_fsub+0x1ce>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d198      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000c02:	2680      	movs	r6, #128	; 0x80
 8000c04:	2400      	movs	r4, #0
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	03f6      	lsls	r6, r6, #15
 8000c0a:	e6ee      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c0c:	000c      	movs	r4, r1
 8000c0e:	4643      	mov	r3, r8
 8000c10:	0015      	movs	r5, r2
 8000c12:	e77c      	b.n	8000b0e <__aeabi_fsub+0x1ba>
 8000c14:	4663      	mov	r3, ip
 8000c16:	000c      	movs	r4, r1
 8000c18:	1ac6      	subs	r6, r0, r3
 8000c1a:	e6c9      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	4463      	add	r3, ip
 8000c20:	2501      	movs	r5, #1
 8000c22:	015a      	lsls	r2, r3, #5
 8000c24:	d400      	bmi.n	8000c28 <__aeabi_fsub+0x2d4>
 8000c26:	e76e      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c28:	2502      	movs	r5, #2
 8000c2a:	e6fa      	b.n	8000a22 <__aeabi_fsub+0xce>
 8000c2c:	4663      	mov	r3, ip
 8000c2e:	2501      	movs	r5, #1
 8000c30:	1a1b      	subs	r3, r3, r0
 8000c32:	e6b8      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c34:	4664      	mov	r4, ip
 8000c36:	2320      	movs	r3, #32
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4193      	sbcs	r3, r2
 8000c46:	4323      	orrs	r3, r4
 8000c48:	e7a2      	b.n	8000b90 <__aeabi_fsub+0x23c>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	e774      	b.n	8000b38 <__aeabi_fsub+0x1e4>
 8000c4e:	4661      	mov	r1, ip
 8000c50:	2320      	movs	r3, #32
 8000c52:	40d1      	lsrs	r1, r2
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4662      	mov	r2, ip
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	4193      	sbcs	r3, r2
 8000c60:	430b      	orrs	r3, r1
 8000c62:	e720      	b.n	8000aa6 <__aeabi_fsub+0x152>
 8000c64:	4663      	mov	r3, ip
 8000c66:	000c      	movs	r4, r1
 8000c68:	2501      	movs	r5, #1
 8000c6a:	1ac3      	subs	r3, r0, r3
 8000c6c:	e69b      	b.n	80009a6 <__aeabi_fsub+0x52>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d099      	beq.n	8000ba6 <__aeabi_fsub+0x252>
 8000c72:	000c      	movs	r4, r1
 8000c74:	4646      	mov	r6, r8
 8000c76:	2200      	movs	r2, #0
 8000c78:	e6b7      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c7a:	4646      	mov	r6, r8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e6b4      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fsub+0x332>
 8000c84:	e73f      	b.n	8000b06 <__aeabi_fsub+0x1b2>
 8000c86:	2400      	movs	r4, #0
 8000c88:	2600      	movs	r6, #0
 8000c8a:	e6ae      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c8c:	fbffffff 	.word	0xfbffffff
 8000c90:	7dffffff 	.word	0x7dffffff

08000c94 <__aeabi_f2iz>:
 8000c94:	0241      	lsls	r1, r0, #9
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	0fc3      	lsrs	r3, r0, #31
 8000c9a:	0a49      	lsrs	r1, r1, #9
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	0e12      	lsrs	r2, r2, #24
 8000ca0:	2a7e      	cmp	r2, #126	; 0x7e
 8000ca2:	dd03      	ble.n	8000cac <__aeabi_f2iz+0x18>
 8000ca4:	2a9d      	cmp	r2, #157	; 0x9d
 8000ca6:	dd02      	ble.n	8000cae <__aeabi_f2iz+0x1a>
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <__aeabi_f2iz+0x3c>)
 8000caa:	1898      	adds	r0, r3, r2
 8000cac:	4770      	bx	lr
 8000cae:	2080      	movs	r0, #128	; 0x80
 8000cb0:	0400      	lsls	r0, r0, #16
 8000cb2:	4301      	orrs	r1, r0
 8000cb4:	2a95      	cmp	r2, #149	; 0x95
 8000cb6:	dc07      	bgt.n	8000cc8 <__aeabi_f2iz+0x34>
 8000cb8:	2096      	movs	r0, #150	; 0x96
 8000cba:	1a82      	subs	r2, r0, r2
 8000cbc:	40d1      	lsrs	r1, r2
 8000cbe:	4248      	negs	r0, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f3      	bne.n	8000cac <__aeabi_f2iz+0x18>
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	e7f1      	b.n	8000cac <__aeabi_f2iz+0x18>
 8000cc8:	3a96      	subs	r2, #150	; 0x96
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	e7f7      	b.n	8000cbe <__aeabi_f2iz+0x2a>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	7fffffff 	.word	0x7fffffff

08000cd4 <__aeabi_ui2f>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	1e04      	subs	r4, r0, #0
 8000cd8:	d00e      	beq.n	8000cf8 <__aeabi_ui2f+0x24>
 8000cda:	f000 f87d 	bl	8000dd8 <__clzsi2>
 8000cde:	239e      	movs	r3, #158	; 0x9e
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	1a1b      	subs	r3, r3, r0
 8000ce4:	2b96      	cmp	r3, #150	; 0x96
 8000ce6:	dc0c      	bgt.n	8000d02 <__aeabi_ui2f+0x2e>
 8000ce8:	2808      	cmp	r0, #8
 8000cea:	d02c      	beq.n	8000d46 <__aeabi_ui2f+0x72>
 8000cec:	3908      	subs	r1, #8
 8000cee:	408c      	lsls	r4, r1
 8000cf0:	0264      	lsls	r4, r4, #9
 8000cf2:	0a64      	lsrs	r4, r4, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e001      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	2400      	movs	r4, #0
 8000cfc:	05c0      	lsls	r0, r0, #23
 8000cfe:	4320      	orrs	r0, r4
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
 8000d02:	2b99      	cmp	r3, #153	; 0x99
 8000d04:	dd0a      	ble.n	8000d1c <__aeabi_ui2f+0x48>
 8000d06:	0002      	movs	r2, r0
 8000d08:	0020      	movs	r0, r4
 8000d0a:	321b      	adds	r2, #27
 8000d0c:	4090      	lsls	r0, r2
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1e50      	subs	r0, r2, #1
 8000d12:	4182      	sbcs	r2, r0
 8000d14:	2005      	movs	r0, #5
 8000d16:	1a40      	subs	r0, r0, r1
 8000d18:	40c4      	lsrs	r4, r0
 8000d1a:	4314      	orrs	r4, r2
 8000d1c:	2905      	cmp	r1, #5
 8000d1e:	dc16      	bgt.n	8000d4e <__aeabi_ui2f+0x7a>
 8000d20:	0022      	movs	r2, r4
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d24:	4002      	ands	r2, r0
 8000d26:	0765      	lsls	r5, r4, #29
 8000d28:	d009      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d2a:	250f      	movs	r5, #15
 8000d2c:	402c      	ands	r4, r5
 8000d2e:	2c04      	cmp	r4, #4
 8000d30:	d005      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d32:	3204      	adds	r2, #4
 8000d34:	0154      	lsls	r4, r2, #5
 8000d36:	d502      	bpl.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d38:	239f      	movs	r3, #159	; 0x9f
 8000d3a:	4002      	ands	r2, r0
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	0192      	lsls	r2, r2, #6
 8000d40:	0a54      	lsrs	r4, r2, #9
 8000d42:	b2d8      	uxtb	r0, r3
 8000d44:	e7da      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d46:	0264      	lsls	r4, r4, #9
 8000d48:	2096      	movs	r0, #150	; 0x96
 8000d4a:	0a64      	lsrs	r4, r4, #9
 8000d4c:	e7d6      	b.n	8000cfc <__aeabi_ui2f+0x28>
 8000d4e:	1f4a      	subs	r2, r1, #5
 8000d50:	4094      	lsls	r4, r2
 8000d52:	0022      	movs	r2, r4
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <__aeabi_ui2f+0x8c>)
 8000d56:	4002      	ands	r2, r0
 8000d58:	0765      	lsls	r5, r4, #29
 8000d5a:	d0f0      	beq.n	8000d3e <__aeabi_ui2f+0x6a>
 8000d5c:	e7e5      	b.n	8000d2a <__aeabi_ui2f+0x56>
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	fbffffff 	.word	0xfbffffff

08000d64 <__aeabi_cfrcmple>:
 8000d64:	4684      	mov	ip, r0
 8000d66:	0008      	movs	r0, r1
 8000d68:	4661      	mov	r1, ip
 8000d6a:	e7ff      	b.n	8000d6c <__aeabi_cfcmpeq>

08000d6c <__aeabi_cfcmpeq>:
 8000d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d6e:	f000 f8c9 	bl	8000f04 <__lesf2>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d401      	bmi.n	8000d7a <__aeabi_cfcmpeq+0xe>
 8000d76:	2100      	movs	r1, #0
 8000d78:	42c8      	cmn	r0, r1
 8000d7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d7c <__aeabi_fcmpeq>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	f000 f855 	bl	8000e2c <__eqsf2>
 8000d82:	4240      	negs	r0, r0
 8000d84:	3001      	adds	r0, #1
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <__aeabi_fcmplt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f8bb 	bl	8000f04 <__lesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	db01      	blt.n	8000d96 <__aeabi_fcmplt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__aeabi_fcmple>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f8b1 	bl	8000f04 <__lesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	dd01      	ble.n	8000daa <__aeabi_fcmple+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <__aeabi_fcmpgt>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	f000 f861 	bl	8000e78 <__gesf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	dc01      	bgt.n	8000dbe <__aeabi_fcmpgt+0xe>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	bd10      	pop	{r4, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)

08000dc4 <__aeabi_fcmpge>:
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	f000 f857 	bl	8000e78 <__gesf2>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	da01      	bge.n	8000dd2 <__aeabi_fcmpge+0xe>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)

08000dd8 <__clzsi2>:
 8000dd8:	211c      	movs	r1, #28
 8000dda:	2301      	movs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0xe>
 8000de2:	0c00      	lsrs	r0, r0, #16
 8000de4:	3910      	subs	r1, #16
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d301      	bcc.n	8000df0 <__clzsi2+0x18>
 8000dec:	0a00      	lsrs	r0, r0, #8
 8000dee:	3908      	subs	r1, #8
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d301      	bcc.n	8000dfa <__clzsi2+0x22>
 8000df6:	0900      	lsrs	r0, r0, #4
 8000df8:	3904      	subs	r1, #4
 8000dfa:	a202      	add	r2, pc, #8	; (adr r2, 8000e04 <__clzsi2+0x2c>)
 8000dfc:	5c10      	ldrb	r0, [r2, r0]
 8000dfe:	1840      	adds	r0, r0, r1
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	02020304 	.word	0x02020304
 8000e08:	01010101 	.word	0x01010101
	...

08000e14 <__clzdi2>:
 8000e14:	b510      	push	{r4, lr}
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d103      	bne.n	8000e22 <__clzdi2+0xe>
 8000e1a:	f7ff ffdd 	bl	8000dd8 <__clzsi2>
 8000e1e:	3020      	adds	r0, #32
 8000e20:	e002      	b.n	8000e28 <__clzdi2+0x14>
 8000e22:	0008      	movs	r0, r1
 8000e24:	f7ff ffd8 	bl	8000dd8 <__clzsi2>
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)

08000e2c <__eqsf2>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	0042      	lsls	r2, r0, #1
 8000e30:	0245      	lsls	r5, r0, #9
 8000e32:	024e      	lsls	r6, r1, #9
 8000e34:	004c      	lsls	r4, r1, #1
 8000e36:	0fc3      	lsrs	r3, r0, #31
 8000e38:	0a6d      	lsrs	r5, r5, #9
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	0e12      	lsrs	r2, r2, #24
 8000e3e:	0a76      	lsrs	r6, r6, #9
 8000e40:	0e24      	lsrs	r4, r4, #24
 8000e42:	0fc9      	lsrs	r1, r1, #31
 8000e44:	2aff      	cmp	r2, #255	; 0xff
 8000e46:	d006      	beq.n	8000e56 <__eqsf2+0x2a>
 8000e48:	2cff      	cmp	r4, #255	; 0xff
 8000e4a:	d003      	beq.n	8000e54 <__eqsf2+0x28>
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d101      	bne.n	8000e54 <__eqsf2+0x28>
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	d006      	beq.n	8000e62 <__eqsf2+0x36>
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d1fc      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5a:	2cff      	cmp	r4, #255	; 0xff
 8000e5c:	d1fa      	bne.n	8000e54 <__eqsf2+0x28>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d1f8      	bne.n	8000e54 <__eqsf2+0x28>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d006      	beq.n	8000e74 <__eqsf2+0x48>
 8000e66:	2001      	movs	r0, #1
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	d1f3      	bne.n	8000e54 <__eqsf2+0x28>
 8000e6c:	0028      	movs	r0, r5
 8000e6e:	1e43      	subs	r3, r0, #1
 8000e70:	4198      	sbcs	r0, r3
 8000e72:	e7ef      	b.n	8000e54 <__eqsf2+0x28>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7ed      	b.n	8000e54 <__eqsf2+0x28>

08000e78 <__gesf2>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	0042      	lsls	r2, r0, #1
 8000e7c:	0245      	lsls	r5, r0, #9
 8000e7e:	024e      	lsls	r6, r1, #9
 8000e80:	004c      	lsls	r4, r1, #1
 8000e82:	0fc3      	lsrs	r3, r0, #31
 8000e84:	0a6d      	lsrs	r5, r5, #9
 8000e86:	0e12      	lsrs	r2, r2, #24
 8000e88:	0a76      	lsrs	r6, r6, #9
 8000e8a:	0e24      	lsrs	r4, r4, #24
 8000e8c:	0fc8      	lsrs	r0, r1, #31
 8000e8e:	2aff      	cmp	r2, #255	; 0xff
 8000e90:	d01b      	beq.n	8000eca <__gesf2+0x52>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d00e      	beq.n	8000eb4 <__gesf2+0x3c>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d11b      	bne.n	8000ed2 <__gesf2+0x5a>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d101      	bne.n	8000ea2 <__gesf2+0x2a>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d01c      	beq.n	8000edc <__gesf2+0x64>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d00c      	beq.n	8000ec0 <__gesf2+0x48>
 8000ea6:	4283      	cmp	r3, r0
 8000ea8:	d01c      	beq.n	8000ee4 <__gesf2+0x6c>
 8000eaa:	2102      	movs	r1, #2
 8000eac:	1e58      	subs	r0, r3, #1
 8000eae:	4008      	ands	r0, r1
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d122      	bne.n	8000efe <__gesf2+0x86>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d1f4      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d1f2      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d1f6      	bne.n	8000eb2 <__gesf2+0x3a>
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	e7f3      	b.n	8000eb2 <__gesf2+0x3a>
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d117      	bne.n	8000efe <__gesf2+0x86>
 8000ece:	2cff      	cmp	r4, #255	; 0xff
 8000ed0:	d0f0      	beq.n	8000eb4 <__gesf2+0x3c>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d1e7      	bne.n	8000ea6 <__gesf2+0x2e>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d1e5      	bne.n	8000ea6 <__gesf2+0x2e>
 8000eda:	e7e6      	b.n	8000eaa <__gesf2+0x32>
 8000edc:	2000      	movs	r0, #0
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0e7      	beq.n	8000eb2 <__gesf2+0x3a>
 8000ee2:	e7e2      	b.n	8000eaa <__gesf2+0x32>
 8000ee4:	42a2      	cmp	r2, r4
 8000ee6:	dc05      	bgt.n	8000ef4 <__gesf2+0x7c>
 8000ee8:	dbea      	blt.n	8000ec0 <__gesf2+0x48>
 8000eea:	42b5      	cmp	r5, r6
 8000eec:	d802      	bhi.n	8000ef4 <__gesf2+0x7c>
 8000eee:	d3e7      	bcc.n	8000ec0 <__gesf2+0x48>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7de      	b.n	8000eb2 <__gesf2+0x3a>
 8000ef4:	4243      	negs	r3, r0
 8000ef6:	4158      	adcs	r0, r3
 8000ef8:	0040      	lsls	r0, r0, #1
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7d9      	b.n	8000eb2 <__gesf2+0x3a>
 8000efe:	2002      	movs	r0, #2
 8000f00:	4240      	negs	r0, r0
 8000f02:	e7d6      	b.n	8000eb2 <__gesf2+0x3a>

08000f04 <__lesf2>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0245      	lsls	r5, r0, #9
 8000f0a:	024e      	lsls	r6, r1, #9
 8000f0c:	004c      	lsls	r4, r1, #1
 8000f0e:	0fc3      	lsrs	r3, r0, #31
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a76      	lsrs	r6, r6, #9
 8000f16:	0e24      	lsrs	r4, r4, #24
 8000f18:	0fc8      	lsrs	r0, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	; 0xff
 8000f1c:	d00b      	beq.n	8000f36 <__lesf2+0x32>
 8000f1e:	2cff      	cmp	r4, #255	; 0xff
 8000f20:	d00d      	beq.n	8000f3e <__lesf2+0x3a>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11f      	bne.n	8000f66 <__lesf2+0x62>
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d116      	bne.n	8000f58 <__lesf2+0x54>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d114      	bne.n	8000f58 <__lesf2+0x54>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d010      	beq.n	8000f56 <__lesf2+0x52>
 8000f34:	e009      	b.n	8000f4a <__lesf2+0x46>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d10c      	bne.n	8000f54 <__lesf2+0x50>
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d113      	bne.n	8000f66 <__lesf2+0x62>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d108      	bne.n	8000f54 <__lesf2+0x50>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d008      	beq.n	8000f58 <__lesf2+0x54>
 8000f46:	4283      	cmp	r3, r0
 8000f48:	d012      	beq.n	8000f70 <__lesf2+0x6c>
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	1e58      	subs	r0, r3, #1
 8000f4e:	4008      	ands	r0, r1
 8000f50:	3801      	subs	r0, #1
 8000f52:	e000      	b.n	8000f56 <__lesf2+0x52>
 8000f54:	2002      	movs	r0, #2
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d1f4      	bne.n	8000f46 <__lesf2+0x42>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1fa      	bne.n	8000f56 <__lesf2+0x52>
 8000f60:	2001      	movs	r0, #1
 8000f62:	4240      	negs	r0, r0
 8000f64:	e7f7      	b.n	8000f56 <__lesf2+0x52>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d1ed      	bne.n	8000f46 <__lesf2+0x42>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d1eb      	bne.n	8000f46 <__lesf2+0x42>
 8000f6e:	e7ec      	b.n	8000f4a <__lesf2+0x46>
 8000f70:	42a2      	cmp	r2, r4
 8000f72:	dc05      	bgt.n	8000f80 <__lesf2+0x7c>
 8000f74:	dbf2      	blt.n	8000f5c <__lesf2+0x58>
 8000f76:	42b5      	cmp	r5, r6
 8000f78:	d802      	bhi.n	8000f80 <__lesf2+0x7c>
 8000f7a:	d3ef      	bcc.n	8000f5c <__lesf2+0x58>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	e7ea      	b.n	8000f56 <__lesf2+0x52>
 8000f80:	4243      	negs	r3, r0
 8000f82:	4158      	adcs	r0, r3
 8000f84:	0040      	lsls	r0, r0, #1
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e5      	b.n	8000f56 <__lesf2+0x52>
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <_Conversion>:
	DIVISION = 1
} ArithmeticOperation;
/* Variables -----------------------------------------------------------------*/
/* Private Function definition -----------------------------------------------*/
uint32_t _Conversion(uint32_t ValueToConvert, float ConversionFactor, ArithmeticOperation ArithmeticOperation)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
	float TemporaryResult;

	if(ArithmeticOperation == MULTIPLICATION)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10a      	bne.n	8000fb8 <_Conversion+0x2c>
		TemporaryResult = ValueToConvert * ConversionFactor;
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fe96 	bl	8000cd4 <__aeabi_ui2f>
 8000fa8:	1c03      	adds	r3, r0, #0
 8000faa:	1c19      	adds	r1, r3, #0
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fb83 	bl	80006b8 <__aeabi_fmul>
 8000fb2:	1c03      	adds	r3, r0, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e00d      	b.n	8000fd4 <_Conversion+0x48>
	else if (ArithmeticOperation == DIVISION)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d109      	bne.n	8000fd4 <_Conversion+0x48>
		TemporaryResult = ValueToConvert / ConversionFactor;
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fe87 	bl	8000cd4 <__aeabi_ui2f>
 8000fc6:	1c03      	adds	r3, r0, #0
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	1c18      	adds	r0, r3, #0
 8000fcc:	f7ff fa5a 	bl	8000484 <__aeabi_fdiv>
 8000fd0:	1c03      	adds	r3, r0, #0
 8000fd2:	617b      	str	r3, [r7, #20]

	return TemporaryResult;
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff f971 	bl	80002bc <__aeabi_f2uiz>
 8000fda:	0003      	movs	r3, r0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b006      	add	sp, #24
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <INA233_Init>:

/* Public Function -----------------------------------------------------------*/
void INA233_Init(INA233* Self, uint16_t Address)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	000a      	movs	r2, r1
 8000fee:	1cbb      	adds	r3, r7, #2
 8000ff0:	801a      	strh	r2, [r3, #0]
	Self->Address 		= Address;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1cba      	adds	r2, r7, #2
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	801a      	strh	r2, [r3, #0]
	Self->Calibration 	= 2048;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	805a      	strh	r2, [r3, #2]
	Self->_VIN_LSB_mV 	= 1.25; //=1.25
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <INA233_Init+0x50>)
 8001006:	605a      	str	r2, [r3, #4]
	Self->IIN_LSB_uV 	= 2.50;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <INA233_Init+0x54>)
 800100c:	621a      	str	r2, [r3, #32]

	Self->VIN_OV_mV		= 40960 - 1; //Massimo valore. Se metto 40960 invece di 40959 ottengo 0x8000 invece di 0x7FFF
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <INA233_Init+0x58>)
 8001012:	61da      	str	r2, [r3, #28]
	INA233_VIN_OV_mV_Conversion(Self);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f84e 	bl	80010b8 <INA233_VIN_OV_mV_Conversion>
	Self->IIN_OV_uV		= 81920 - 1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <INA233_Init+0x5c>)
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
	INA233_IIN_OV_uV_Conversion(Self);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f86d 	bl	8001104 <INA233_IIN_OV_uV_Conversion>
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	3fa00000 	.word	0x3fa00000
 8001038:	40200000 	.word	0x40200000
 800103c:	00009fff 	.word	0x00009fff
 8001040:	00013fff 	.word	0x00013fff

08001044 <INA233_WARN_LIMIT_Conversion>:

void INA233_WARN_LIMIT_Conversion(INA233* Self)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	INA233_VIN_UV_mV_Conversion(Self);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0018      	movs	r0, r3
 8001050:	f000 f81f 	bl	8001092 <INA233_VIN_UV_mV_Conversion>
	INA233_VIN_OV_mV_Conversion(Self);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f82e 	bl	80010b8 <INA233_VIN_OV_mV_Conversion>
	INA233_IIN_OV_uV_Conversion(Self);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f850 	bl	8001104 <INA233_IIN_OV_uV_Conversion>
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <INA233_VIN_Conversion>:

void INA233_VIN_Conversion(INA233* Self)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	Self->VIN_mV = _Conversion(Self->VIN, Self->_VIN_LSB_mV, MULTIPLICATION);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6898      	ldr	r0, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	1c19      	adds	r1, r3, #0
 8001080:	f7ff ff84 	bl	8000f8c <_Conversion>
 8001084:	0002      	movs	r2, r0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	615a      	str	r2, [r3, #20]
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <INA233_VIN_UV_mV_Conversion>:

void INA233_VIN_UV_mV_Conversion(INA233* Self)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	Self->VIN_UV = _Conversion(Self->VIN_UV_mV, Self->_VIN_LSB_mV, DIVISION);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6998      	ldr	r0, [r3, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	1c19      	adds	r1, r3, #0
 80010a6:	f7ff ff71 	bl	8000f8c <_Conversion>
 80010aa:	0002      	movs	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <INA233_VIN_OV_mV_Conversion>:

void INA233_VIN_OV_mV_Conversion(INA233* Self)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	Self->VIN_OV = _Conversion(Self->VIN_OV_mV, Self->_VIN_LSB_mV, DIVISION);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d8      	ldr	r0, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	1c19      	adds	r1, r3, #0
 80010cc:	f7ff ff5e 	bl	8000f8c <_Conversion>
 80010d0:	0002      	movs	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}

080010de <INA233_IIN_Conversion>:

void INA233_IIN_Conversion(INA233* Self)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	Self->IIN_uV = _Conversion(Self->IIN, Self->IIN_LSB_uV, MULTIPLICATION);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	2200      	movs	r2, #0
 80010f0:	1c19      	adds	r1, r3, #0
 80010f2:	f7ff ff4b 	bl	8000f8c <_Conversion>
 80010f6:	0002      	movs	r2, r0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <INA233_IIN_OV_uV_Conversion>:

void INA233_IIN_OV_uV_Conversion(INA233* Self)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	Self->IIN_OV = _Conversion(Self->IIN_OV_uV, Self->IIN_LSB_uV, DIVISION);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	2201      	movs	r2, #1
 8001116:	1c19      	adds	r1, r3, #0
 8001118:	f7ff ff38 	bl	8000f8c <_Conversion>
 800111c:	0002      	movs	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f001 f93b 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 fb09 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 fbf3 	bl	8001924 <MX_GPIO_Init>
  MX_I2C2_Init();
 800113e:	f000 fbb1 	bl	80018a4 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001142:	f000 fb6f 	bl	8001824 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MYGPIO_ADDRESS_Init((MyGPIO*) ADDRESS);
 8001146:	4bc1      	ldr	r3, [pc, #772]	; (800144c <main+0x320>)
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fd5b 	bl	8001c04 <MYGPIO_ADDRESS_Init>
  MYGPIO_ALM_RELE_Init((MyGPIO*) ALM_RELE);
 800114e:	4bc0      	ldr	r3, [pc, #768]	; (8001450 <main+0x324>)
 8001150:	0018      	movs	r0, r3
 8001152:	f000 fcc7 	bl	8001ae4 <MYGPIO_ALM_RELE_Init>
  MYGPIO_CMD_RELE_Init((MyGPIO*) CMD_RELE);
 8001156:	4bbf      	ldr	r3, [pc, #764]	; (8001454 <main+0x328>)
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fcf3 	bl	8001b44 <MYGPIO_CMD_RELE_Init>
  MYGPIO_FAULT_RELE_Init((MyGPIO*) FAULT_RELE);
 800115e:	4bbe      	ldr	r3, [pc, #760]	; (8001458 <main+0x32c>)
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fd1f 	bl	8001ba4 <MYGPIO_FAULT_RELE_Init>
  MYGPIO_EXT_INT_Init((MyGPIO*) &EXT_INT);
 8001166:	4bbd      	ldr	r3, [pc, #756]	; (800145c <main+0x330>)
 8001168:	0018      	movs	r0, r3
 800116a:	f000 fd6f 	bl	8001c4c <MYGPIO_EXT_INT_Init>

  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e015      	b.n	80011a2 <main+0x76>
	  INA233_Init(&INA[i], (0x40 + i - 1) << 1);
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	435a      	muls	r2, r3
 800117e:	4bb8      	ldr	r3, [pc, #736]	; (8001460 <main+0x334>)
 8001180:	18d2      	adds	r2, r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	333f      	adds	r3, #63	; 0x3f
 800118a:	b29b      	uxth	r3, r3
 800118c:	18db      	adds	r3, r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f7ff ff26 	bl	8000fe4 <INA233_Init>
  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	3201      	adds	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d9e5      	bls.n	8001176 <main+0x4a>

  //Esempio di aggiornamento warn limit
  INA[2].VIN_UV_mV = 1000;
 80011aa:	4bad      	ldr	r3, [pc, #692]	; (8001460 <main+0x334>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	22fa      	movs	r2, #250	; 0xfa
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	505a      	str	r2, [r3, r1]
  INA[2].VIN_OV_mV = 2000;
 80011b4:	4baa      	ldr	r3, [pc, #680]	; (8001460 <main+0x334>)
 80011b6:	2184      	movs	r1, #132	; 0x84
 80011b8:	22fa      	movs	r2, #250	; 0xfa
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	505a      	str	r2, [r3, r1]

  INA[1].VIN_UV_mV = 1000;
 80011be:	4ba8      	ldr	r3, [pc, #672]	; (8001460 <main+0x334>)
 80011c0:	22fa      	movs	r2, #250	; 0xfa
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	64da      	str	r2, [r3, #76]	; 0x4c
  INA[1].VIN_OV_mV = 2000;
 80011c6:	4ba6      	ldr	r3, [pc, #664]	; (8001460 <main+0x334>)
 80011c8:	22fa      	movs	r2, #250	; 0xfa
 80011ca:	00d2      	lsls	r2, r2, #3
 80011cc:	651a      	str	r2, [r3, #80]	; 0x50

  for(uint8_t i = 1; i < INA233_SIZE; i++)
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e082      	b.n	80012dc <main+0x1b0>
  {
	  i2c2_Data = RESTORE_DEFAULT_ALL;
 80011d6:	4ba3      	ldr	r3, [pc, #652]	; (8001464 <main+0x338>)
 80011d8:	2212      	movs	r2, #18
 80011da:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c2, INA[i].Address, (uint8_t *)&i2c2_Data, 1, 1000);
 80011dc:	1dbb      	adds	r3, r7, #6
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b9f      	ldr	r3, [pc, #636]	; (8001460 <main+0x334>)
 80011e2:	2134      	movs	r1, #52	; 0x34
 80011e4:	434a      	muls	r2, r1
 80011e6:	5ad1      	ldrh	r1, [r2, r3]
 80011e8:	4a9e      	ldr	r2, [pc, #632]	; (8001464 <main+0x338>)
 80011ea:	489f      	ldr	r0, [pc, #636]	; (8001468 <main+0x33c>)
 80011ec:	23fa      	movs	r3, #250	; 0xfa
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	f001 fe1a 	bl	8002e2c <HAL_I2C_Master_Transmit>

	  INA233_WARN_LIMIT_Conversion(&INA[i]);
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2234      	movs	r2, #52	; 0x34
 80011fe:	435a      	muls	r2, r3
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <main+0x334>)
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff1d 	bl	8001044 <INA233_WARN_LIMIT_Conversion>

	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, MFR_CALIBRATION, 1, (uint8_t *)&INA[i].Calibration, 2, 1000);
 800120a:	1dbb      	adds	r3, r7, #6
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	4b94      	ldr	r3, [pc, #592]	; (8001460 <main+0x334>)
 8001210:	2134      	movs	r1, #52	; 0x34
 8001212:	434a      	muls	r2, r1
 8001214:	5ad1      	ldrh	r1, [r2, r3]
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2234      	movs	r2, #52	; 0x34
 800121c:	435a      	muls	r2, r3
 800121e:	4b90      	ldr	r3, [pc, #576]	; (8001460 <main+0x334>)
 8001220:	18d3      	adds	r3, r2, r3
 8001222:	3302      	adds	r3, #2
 8001224:	4890      	ldr	r0, [pc, #576]	; (8001468 <main+0x33c>)
 8001226:	22fa      	movs	r2, #250	; 0xfa
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	2202      	movs	r2, #2
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	22d4      	movs	r2, #212	; 0xd4
 8001236:	f001 ff01 	bl	800303c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, VIN_UV_WARN_LIMIT, 1, (uint8_t *)&INA[i].VIN_UV, 2, 1000);
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b88      	ldr	r3, [pc, #544]	; (8001460 <main+0x334>)
 8001240:	2134      	movs	r1, #52	; 0x34
 8001242:	434a      	muls	r2, r1
 8001244:	5ad1      	ldrh	r1, [r2, r3]
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2234      	movs	r2, #52	; 0x34
 800124c:	4353      	muls	r3, r2
 800124e:	3308      	adds	r3, #8
 8001250:	001a      	movs	r2, r3
 8001252:	4b83      	ldr	r3, [pc, #524]	; (8001460 <main+0x334>)
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	3304      	adds	r3, #4
 8001258:	4883      	ldr	r0, [pc, #524]	; (8001468 <main+0x33c>)
 800125a:	22fa      	movs	r2, #250	; 0xfa
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	9202      	str	r2, [sp, #8]
 8001260:	2202      	movs	r2, #2
 8001262:	9201      	str	r2, [sp, #4]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	2258      	movs	r2, #88	; 0x58
 800126a:	f001 fee7 	bl	800303c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, VIN_OV_WARN_LIMIT, 1, (uint8_t *)&INA[i].VIN_OV, 2, 1000);
 800126e:	1dbb      	adds	r3, r7, #6
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <main+0x334>)
 8001274:	2134      	movs	r1, #52	; 0x34
 8001276:	434a      	muls	r2, r1
 8001278:	5ad1      	ldrh	r1, [r2, r3]
 800127a:	1dbb      	adds	r3, r7, #6
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2234      	movs	r2, #52	; 0x34
 8001280:	4353      	muls	r3, r2
 8001282:	3310      	adds	r3, #16
 8001284:	001a      	movs	r2, r3
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <main+0x334>)
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	4877      	ldr	r0, [pc, #476]	; (8001468 <main+0x33c>)
 800128c:	22fa      	movs	r2, #250	; 0xfa
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	9202      	str	r2, [sp, #8]
 8001292:	2202      	movs	r2, #2
 8001294:	9201      	str	r2, [sp, #4]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	2257      	movs	r2, #87	; 0x57
 800129c:	f001 fece 	bl	800303c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, IOUT_OC_WARN_LIMIT, 1, (uint8_t *)&INA[i].IIN_OV, 2, 1000);
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b6e      	ldr	r3, [pc, #440]	; (8001460 <main+0x334>)
 80012a6:	2134      	movs	r1, #52	; 0x34
 80012a8:	434a      	muls	r2, r1
 80012aa:	5ad1      	ldrh	r1, [r2, r3]
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2234      	movs	r2, #52	; 0x34
 80012b2:	4353      	muls	r3, r2
 80012b4:	3328      	adds	r3, #40	; 0x28
 80012b6:	001a      	movs	r2, r3
 80012b8:	4b69      	ldr	r3, [pc, #420]	; (8001460 <main+0x334>)
 80012ba:	18d3      	adds	r3, r2, r3
 80012bc:	486a      	ldr	r0, [pc, #424]	; (8001468 <main+0x33c>)
 80012be:	22fa      	movs	r2, #250	; 0xfa
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	9202      	str	r2, [sp, #8]
 80012c4:	2202      	movs	r2, #2
 80012c6:	9201      	str	r2, [sp, #4]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	224a      	movs	r2, #74	; 0x4a
 80012ce:	f001 feb5 	bl	800303c <HAL_I2C_Mem_Write>
  for(uint8_t i = 1; i < INA233_SIZE; i++)
 80012d2:	1dbb      	adds	r3, r7, #6
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	1dbb      	adds	r3, r7, #6
 80012d8:	3201      	adds	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	1dbb      	adds	r3, r7, #6
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d800      	bhi.n	80012e6 <main+0x1ba>
 80012e4:	e777      	b.n	80011d6 <main+0xaa>
  }

  // CONTROL_Init()
  for(uint8_t i = 1; i < INA233_SIZE; i++)
 80012e6:	1d7b      	adds	r3, r7, #5
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e04b      	b.n	8001386 <main+0x25a>
  {
	  CONTROL[INA1_VIN_UV_mV_LSB + 0x20 *(i - 1)] = (INA[i].VIN_UV_mV & 0x00FF);
 80012ee:	1d7b      	adds	r3, r7, #5
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <main+0x334>)
 80012f4:	2134      	movs	r1, #52	; 0x34
 80012f6:	434b      	muls	r3, r1
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	3318      	adds	r3, #24
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	1d7b      	adds	r3, r7, #5
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3303      	adds	r3, #3
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	b2d1      	uxtb	r1, r2
 8001308:	4a58      	ldr	r2, [pc, #352]	; (800146c <main+0x340>)
 800130a:	54d1      	strb	r1, [r2, r3]
	  CONTROL[INA1_VIN_UV_mV_MSB + 0x20 *(i - 1)] = (INA[i].VIN_UV_mV & 0xFF00);
 800130c:	1d7b      	adds	r3, r7, #5
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	3381      	adds	r3, #129	; 0x81
 8001316:	4a55      	ldr	r2, [pc, #340]	; (800146c <main+0x340>)
 8001318:	2100      	movs	r1, #0
 800131a:	54d1      	strb	r1, [r2, r3]
	  CONTROL[INA1_VIN_OV_mV_LSB + 0x20 *(i - 1)] = (INA[i].VIN_OV_mV & 0x00FF);
 800131c:	1d7b      	adds	r3, r7, #5
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <main+0x334>)
 8001322:	2134      	movs	r1, #52	; 0x34
 8001324:	434b      	muls	r3, r1
 8001326:	18d3      	adds	r3, r2, r3
 8001328:	331c      	adds	r3, #28
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	1d7b      	adds	r3, r7, #5
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	015b      	lsls	r3, r3, #5
 8001334:	3382      	adds	r3, #130	; 0x82
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <main+0x340>)
 800133a:	54d1      	strb	r1, [r2, r3]
	  CONTROL[INA1_VIN_OV_mV_MSB + 0x20 *(i - 1)] = (INA[i].VIN_OV_mV & 0xFF00);
 800133c:	1d7b      	adds	r3, r7, #5
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	3383      	adds	r3, #131	; 0x83
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <main+0x340>)
 8001348:	2100      	movs	r1, #0
 800134a:	54d1      	strb	r1, [r2, r3]
	  CONTROL[INA1_IIN_OV_uV_LSB + 0x20 *(i - 1)] = (INA[i].IIN_OV_uV & 0x00FF);
 800134c:	1d7b      	adds	r3, r7, #5
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4a43      	ldr	r2, [pc, #268]	; (8001460 <main+0x334>)
 8001352:	2134      	movs	r1, #52	; 0x34
 8001354:	434b      	muls	r3, r1
 8001356:	18d3      	adds	r3, r2, r3
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	1d7b      	adds	r3, r7, #5
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	3384      	adds	r3, #132	; 0x84
 8001366:	b2d1      	uxtb	r1, r2
 8001368:	4a40      	ldr	r2, [pc, #256]	; (800146c <main+0x340>)
 800136a:	54d1      	strb	r1, [r2, r3]
	  CONTROL[INA1_IIN_OV_uV_MSB + 0x20 *(i - 1)] = (INA[i].IIN_OV_uV & 0xFF00);
 800136c:	1d7b      	adds	r3, r7, #5
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	015b      	lsls	r3, r3, #5
 8001374:	3386      	adds	r3, #134	; 0x86
 8001376:	4a3d      	ldr	r2, [pc, #244]	; (800146c <main+0x340>)
 8001378:	2100      	movs	r1, #0
 800137a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800137c:	1d7b      	adds	r3, r7, #5
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	1d7b      	adds	r3, r7, #5
 8001382:	3201      	adds	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	1d7b      	adds	r3, r7, #5
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b04      	cmp	r3, #4
 800138c:	d9af      	bls.n	80012ee <main+0x1c2>
  }

  MYTIMELOOP_Init(&INA_TimeLoop, 500, uwTick);
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <main+0x344>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	23fa      	movs	r3, #250	; 0xfa
 8001394:	0059      	lsls	r1, r3, #1
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <main+0x348>)
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fe56 	bl	800204a <MYTIMELOOP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Address update
	  for(uint8_t i = 1; i < ADDRESS_SIZE; i++)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e00c      	b.n	80013c0 <main+0x294>
		  MYGPIO_PinState_Update(&ADDRESS[i]);
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	00da      	lsls	r2, r3, #3
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <main+0x320>)
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 fe28 	bl	8002006 <MYGPIO_PinState_Update>
	  for(uint8_t i = 1; i < ADDRESS_SIZE; i++)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	3201      	adds	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d9ee      	bls.n	80013a6 <main+0x27a>
	  CONTROL[ADDRESS_PinState] = (ADDRESS[1].PinState << 0) + (ADDRESS[2].PinState << 1) + (ADDRESS[3].PinState << 2);
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <main+0x320>)
 80013ca:	7bda      	ldrb	r2, [r3, #15]
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <main+0x320>)
 80013ce:	7ddb      	ldrb	r3, [r3, #23]
 80013d0:	18db      	adds	r3, r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <main+0x320>)
 80013da:	7fdb      	ldrb	r3, [r3, #31]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	18d3      	adds	r3, r2, r3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <main+0x340>)
 80013e6:	705a      	strb	r2, [r3, #1]
	  MX_GPIO_I2C_OwnAddress1_Update(&hi2c1, ADDRESS[1].PinState, ADDRESS[2].PinState, ADDRESS[3].PinState);
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <main+0x320>)
 80013ea:	7bd9      	ldrb	r1, [r3, #15]
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <main+0x320>)
 80013ee:	7dda      	ldrb	r2, [r3, #23]
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <main+0x320>)
 80013f2:	7fdb      	ldrb	r3, [r3, #31]
 80013f4:	4820      	ldr	r0, [pc, #128]	; (8001478 <main+0x34c>)
 80013f6:	f000 fc3b 	bl	8001c70 <MX_GPIO_I2C_OwnAddress1_Update>
	  //Abilita la possibilità di rispondere in I2C
	  HAL_I2C_EnableListen_IT(&hi2c1);
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <main+0x34c>)
 80013fc:	0018      	movs	r0, r3
 80013fe:	f002 fa01 	bl	8003804 <HAL_I2C_EnableListen_IT>
		EXT_INT.PinState = !(CONTROL[ALM_RELE_PinState]);
		MYGPIO_PinState_Update(&EXT_INT);
#endif

	  //CMD_RELE_Update
	  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001402:	1cfb      	adds	r3, r7, #3
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e018      	b.n	800143c <main+0x310>
	  {
		  CMD_RELE_Update(&CMD_RELE[i], i, CONTROL[CMD_RELE_PinState]);
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	00da      	lsls	r2, r3, #3
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <main+0x328>)
 8001412:	18d0      	adds	r0, r2, r3
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <main+0x340>)
 8001416:	791a      	ldrb	r2, [r3, #4]
 8001418:	1cfb      	adds	r3, r7, #3
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	0019      	movs	r1, r3
 800141e:	f000 fc82 	bl	8001d26 <CMD_RELE_Update>
		  MYGPIO_PinState_Update(&CMD_RELE[i]);
 8001422:	1cfb      	adds	r3, r7, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	00da      	lsls	r2, r3, #3
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <main+0x328>)
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	0018      	movs	r0, r3
 800142e:	f000 fdea 	bl	8002006 <MYGPIO_PinState_Update>
	  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001432:	1cfb      	adds	r3, r7, #3
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	1cfb      	adds	r3, r7, #3
 8001438:	3201      	adds	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	1cfb      	adds	r3, r7, #3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d9e2      	bls.n	800140a <main+0x2de>
	  }

	  //INA_WARN_LIMIT_Update()
	  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e0ff      	b.n	800164c <main+0x520>
 800144c:	20000148 	.word	0x20000148
 8001450:	200000d0 	.word	0x200000d0
 8001454:	20000120 	.word	0x20000120
 8001458:	200000f8 	.word	0x200000f8
 800145c:	20000168 	.word	0x20000168
 8001460:	20000170 	.word	0x20000170
 8001464:	2000037c 	.word	0x2000037c
 8001468:	2000007c 	.word	0x2000007c
 800146c:	20000274 	.word	0x20000274
 8001470:	20000380 	.word	0x20000380
 8001474:	20000374 	.word	0x20000374
 8001478:	20000028 	.word	0x20000028
	  {
		  if(CONTROL[INA1_ASSIGN_WARN_LIMIT + 0x20 * (i - 1)])
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	3387      	adds	r3, #135	; 0x87
 8001486:	4aab      	ldr	r2, [pc, #684]	; (8001734 <main+0x608>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d100      	bne.n	8001490 <main+0x364>
 800148e:	e0d8      	b.n	8001642 <main+0x516>
		  {
			  INA[i].VIN_UV_mV = (CONTROL[INA1_VIN_UV_mV_MSB + 0x20 * (i - 1)] << 8) + (CONTROL[INA1_VIN_UV_mV_LSB + 0x20 * (i - 1)] << 0);
 8001490:	1cbb      	adds	r3, r7, #2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	015b      	lsls	r3, r3, #5
 8001498:	3381      	adds	r3, #129	; 0x81
 800149a:	4aa6      	ldr	r2, [pc, #664]	; (8001734 <main+0x608>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	1cba      	adds	r2, r7, #2
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	3203      	adds	r2, #3
 80014a6:	0152      	lsls	r2, r2, #5
 80014a8:	49a2      	ldr	r1, [pc, #648]	; (8001734 <main+0x608>)
 80014aa:	5c8a      	ldrb	r2, [r1, r2]
 80014ac:	189a      	adds	r2, r3, r2
 80014ae:	1cbb      	adds	r3, r7, #2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0010      	movs	r0, r2
 80014b4:	4aa0      	ldr	r2, [pc, #640]	; (8001738 <main+0x60c>)
 80014b6:	2134      	movs	r1, #52	; 0x34
 80014b8:	434b      	muls	r3, r1
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	3318      	adds	r3, #24
 80014be:	6018      	str	r0, [r3, #0]
			  INA[i].VIN_OV_mV = (CONTROL[INA1_VIN_OV_mV_MSB + 0x20 * (i - 1)] << 8) + (CONTROL[INA1_VIN_OV_mV_LSB + 0x20 * (i - 1)] << 0);
 80014c0:	1cbb      	adds	r3, r7, #2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	3383      	adds	r3, #131	; 0x83
 80014ca:	4a9a      	ldr	r2, [pc, #616]	; (8001734 <main+0x608>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	1cba      	adds	r2, r7, #2
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	3a01      	subs	r2, #1
 80014d6:	0152      	lsls	r2, r2, #5
 80014d8:	3282      	adds	r2, #130	; 0x82
 80014da:	4996      	ldr	r1, [pc, #600]	; (8001734 <main+0x608>)
 80014dc:	5c8a      	ldrb	r2, [r1, r2]
 80014de:	189a      	adds	r2, r3, r2
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	0010      	movs	r0, r2
 80014e6:	4a94      	ldr	r2, [pc, #592]	; (8001738 <main+0x60c>)
 80014e8:	2134      	movs	r1, #52	; 0x34
 80014ea:	434b      	muls	r3, r1
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	331c      	adds	r3, #28
 80014f0:	6018      	str	r0, [r3, #0]
			  INA[i].IIN_OV_uV = (CONTROL[INA1_IIN_OV_uV_MSB + 0x20 * (i - 1)] << 8) + (CONTROL[INA1_IIN_OV_uV_XXB + 0x20 * (i - 1)] << 8) +(CONTROL[INA1_IIN_OV_uV_LSB + 0x20 * (i - 1)] << 0);
 80014f2:	1cbb      	adds	r3, r7, #2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	3386      	adds	r3, #134	; 0x86
 80014fc:	4a8d      	ldr	r2, [pc, #564]	; (8001734 <main+0x608>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	021a      	lsls	r2, r3, #8
 8001502:	1cbb      	adds	r3, r7, #2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3b01      	subs	r3, #1
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	3385      	adds	r3, #133	; 0x85
 800150c:	4989      	ldr	r1, [pc, #548]	; (8001734 <main+0x608>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	1cba      	adds	r2, r7, #2
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	3a01      	subs	r2, #1
 800151a:	0152      	lsls	r2, r2, #5
 800151c:	3284      	adds	r2, #132	; 0x84
 800151e:	4985      	ldr	r1, [pc, #532]	; (8001734 <main+0x608>)
 8001520:	5c8a      	ldrb	r2, [r1, r2]
 8001522:	189a      	adds	r2, r3, r2
 8001524:	1cbb      	adds	r3, r7, #2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	0010      	movs	r0, r2
 800152a:	4a83      	ldr	r2, [pc, #524]	; (8001738 <main+0x60c>)
 800152c:	2134      	movs	r1, #52	; 0x34
 800152e:	434b      	muls	r3, r1
 8001530:	18d3      	adds	r3, r2, r3
 8001532:	3330      	adds	r3, #48	; 0x30
 8001534:	6018      	str	r0, [r3, #0]

			  i2c2_Data = RESTORE_DEFAULT_ALL;
 8001536:	4b81      	ldr	r3, [pc, #516]	; (800173c <main+0x610>)
 8001538:	2212      	movs	r2, #18
 800153a:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c2, INA[i].Address, (uint8_t *)&i2c2_Data, 1, 1000);
 800153c:	1cbb      	adds	r3, r7, #2
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <main+0x60c>)
 8001542:	2134      	movs	r1, #52	; 0x34
 8001544:	434a      	muls	r2, r1
 8001546:	5ad1      	ldrh	r1, [r2, r3]
 8001548:	4a7c      	ldr	r2, [pc, #496]	; (800173c <main+0x610>)
 800154a:	487d      	ldr	r0, [pc, #500]	; (8001740 <main+0x614>)
 800154c:	23fa      	movs	r3, #250	; 0xfa
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2301      	movs	r3, #1
 8001554:	f001 fc6a 	bl	8002e2c <HAL_I2C_Master_Transmit>

			  INA233_WARN_LIMIT_Conversion(&INA[i]);
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2234      	movs	r2, #52	; 0x34
 800155e:	435a      	muls	r2, r3
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <main+0x60c>)
 8001562:	18d3      	adds	r3, r2, r3
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fd6d 	bl	8001044 <INA233_WARN_LIMIT_Conversion>

			  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, MFR_CALIBRATION, 1, (uint8_t *)&INA[i].Calibration, 2, 1000);
 800156a:	1cbb      	adds	r3, r7, #2
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <main+0x60c>)
 8001570:	2134      	movs	r1, #52	; 0x34
 8001572:	434a      	muls	r2, r1
 8001574:	5ad1      	ldrh	r1, [r2, r3]
 8001576:	1cbb      	adds	r3, r7, #2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2234      	movs	r2, #52	; 0x34
 800157c:	435a      	muls	r2, r3
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <main+0x60c>)
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	3302      	adds	r3, #2
 8001584:	486e      	ldr	r0, [pc, #440]	; (8001740 <main+0x614>)
 8001586:	22fa      	movs	r2, #250	; 0xfa
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	9202      	str	r2, [sp, #8]
 800158c:	2202      	movs	r2, #2
 800158e:	9201      	str	r2, [sp, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	22d4      	movs	r2, #212	; 0xd4
 8001596:	f001 fd51 	bl	800303c <HAL_I2C_Mem_Write>
			  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, VIN_UV_WARN_LIMIT, 1, (uint8_t *)&INA[i].VIN_UV, 2, 1000);
 800159a:	1cbb      	adds	r3, r7, #2
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b66      	ldr	r3, [pc, #408]	; (8001738 <main+0x60c>)
 80015a0:	2134      	movs	r1, #52	; 0x34
 80015a2:	434a      	muls	r2, r1
 80015a4:	5ad1      	ldrh	r1, [r2, r3]
 80015a6:	1cbb      	adds	r3, r7, #2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2234      	movs	r2, #52	; 0x34
 80015ac:	4353      	muls	r3, r2
 80015ae:	3308      	adds	r3, #8
 80015b0:	001a      	movs	r2, r3
 80015b2:	4b61      	ldr	r3, [pc, #388]	; (8001738 <main+0x60c>)
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	3304      	adds	r3, #4
 80015b8:	4861      	ldr	r0, [pc, #388]	; (8001740 <main+0x614>)
 80015ba:	22fa      	movs	r2, #250	; 0xfa
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	9202      	str	r2, [sp, #8]
 80015c0:	2202      	movs	r2, #2
 80015c2:	9201      	str	r2, [sp, #4]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	2258      	movs	r2, #88	; 0x58
 80015ca:	f001 fd37 	bl	800303c <HAL_I2C_Mem_Write>
			  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, VIN_OV_WARN_LIMIT, 1, (uint8_t *)&INA[i].VIN_OV, 2, 1000);
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	4b59      	ldr	r3, [pc, #356]	; (8001738 <main+0x60c>)
 80015d4:	2134      	movs	r1, #52	; 0x34
 80015d6:	434a      	muls	r2, r1
 80015d8:	5ad1      	ldrh	r1, [r2, r3]
 80015da:	1cbb      	adds	r3, r7, #2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2234      	movs	r2, #52	; 0x34
 80015e0:	4353      	muls	r3, r2
 80015e2:	3310      	adds	r3, #16
 80015e4:	001a      	movs	r2, r3
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <main+0x60c>)
 80015e8:	18d3      	adds	r3, r2, r3
 80015ea:	4855      	ldr	r0, [pc, #340]	; (8001740 <main+0x614>)
 80015ec:	22fa      	movs	r2, #250	; 0xfa
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	9202      	str	r2, [sp, #8]
 80015f2:	2202      	movs	r2, #2
 80015f4:	9201      	str	r2, [sp, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	2257      	movs	r2, #87	; 0x57
 80015fc:	f001 fd1e 	bl	800303c <HAL_I2C_Mem_Write>
			  HAL_I2C_Mem_Write(&hi2c2, INA[i].Address, IOUT_OC_WARN_LIMIT, 1, (uint8_t *)&INA[i].IIN_OV, 2, 1000);
 8001600:	1cbb      	adds	r3, r7, #2
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <main+0x60c>)
 8001606:	2134      	movs	r1, #52	; 0x34
 8001608:	434a      	muls	r2, r1
 800160a:	5ad1      	ldrh	r1, [r2, r3]
 800160c:	1cbb      	adds	r3, r7, #2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2234      	movs	r2, #52	; 0x34
 8001612:	4353      	muls	r3, r2
 8001614:	3328      	adds	r3, #40	; 0x28
 8001616:	001a      	movs	r2, r3
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <main+0x60c>)
 800161a:	18d3      	adds	r3, r2, r3
 800161c:	4848      	ldr	r0, [pc, #288]	; (8001740 <main+0x614>)
 800161e:	22fa      	movs	r2, #250	; 0xfa
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	9202      	str	r2, [sp, #8]
 8001624:	2202      	movs	r2, #2
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	224a      	movs	r2, #74	; 0x4a
 800162e:	f001 fd05 	bl	800303c <HAL_I2C_Mem_Write>

			  CONTROL[INA1_ASSIGN_WARN_LIMIT + 0x20 * (i - 1)] = 0;
 8001632:	1cbb      	adds	r3, r7, #2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	3387      	adds	r3, #135	; 0x87
 800163c:	4a3d      	ldr	r2, [pc, #244]	; (8001734 <main+0x608>)
 800163e:	2100      	movs	r1, #0
 8001640:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001642:	1cbb      	adds	r3, r7, #2
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	1cbb      	adds	r3, r7, #2
 8001648:	3201      	adds	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	1cbb      	adds	r3, r7, #2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b04      	cmp	r3, #4
 8001652:	d800      	bhi.n	8001656 <main+0x52a>
 8001654:	e712      	b.n	800147c <main+0x350>
		  }
	  }

	  if(MYTIMELOOP_Run(&INA_TimeLoop, uwTick))
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <main+0x618>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <main+0x61c>)
 800165c:	0011      	movs	r1, r2
 800165e:	0018      	movs	r0, r3
 8001660:	f000 fd0a 	bl	8002078 <MYTIMELOOP_Run>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d100      	bne.n	800166a <main+0x53e>
 8001668:	e699      	b.n	800139e <main+0x272>
	  {
		  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800166a:	1c7b      	adds	r3, r7, #1
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e05a      	b.n	8001728 <main+0x5fc>
		  {
			  //azzerra i fault
			  i2c2_Data = CLEAR_FAULTS;
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <main+0x610>)
 8001674:	2203      	movs	r2, #3
 8001676:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c2, INA[i].Address, (uint8_t *)&i2c2_Data, 1, 1000);
 8001678:	1c7b      	adds	r3, r7, #1
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <main+0x60c>)
 800167e:	2134      	movs	r1, #52	; 0x34
 8001680:	434a      	muls	r2, r1
 8001682:	5ad1      	ldrh	r1, [r2, r3]
 8001684:	4a2d      	ldr	r2, [pc, #180]	; (800173c <main+0x610>)
 8001686:	482e      	ldr	r0, [pc, #184]	; (8001740 <main+0x614>)
 8001688:	23fa      	movs	r3, #250	; 0xfa
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	f001 fbcc 	bl	8002e2c <HAL_I2C_Master_Transmit>
			  //interroga l'adc
			  HAL_I2C_Mem_Read(&hi2c2, INA[i].Address, READ_VIN, 1, (uint8_t *)&INA[i].VIN, 2, 1000);
 8001694:	1c7b      	adds	r3, r7, #1
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <main+0x60c>)
 800169a:	2134      	movs	r1, #52	; 0x34
 800169c:	434a      	muls	r2, r1
 800169e:	5ad1      	ldrh	r1, [r2, r3]
 80016a0:	1c7b      	adds	r3, r7, #1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2234      	movs	r2, #52	; 0x34
 80016a6:	4353      	muls	r3, r2
 80016a8:	3308      	adds	r3, #8
 80016aa:	001a      	movs	r2, r3
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <main+0x60c>)
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <main+0x614>)
 80016b2:	22fa      	movs	r2, #250	; 0xfa
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	9202      	str	r2, [sp, #8]
 80016b8:	2202      	movs	r2, #2
 80016ba:	9201      	str	r2, [sp, #4]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	2288      	movs	r2, #136	; 0x88
 80016c2:	f001 fde9 	bl	8003298 <HAL_I2C_Mem_Read>
			  HAL_I2C_Mem_Read(&hi2c2, INA[i].Address, READ_IIN, 1, (uint8_t *)&INA[i].IIN, 2, 1000);
 80016c6:	1c7b      	adds	r3, r7, #1
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <main+0x60c>)
 80016cc:	2134      	movs	r1, #52	; 0x34
 80016ce:	434a      	muls	r2, r1
 80016d0:	5ad1      	ldrh	r1, [r2, r3]
 80016d2:	1c7b      	adds	r3, r7, #1
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2234      	movs	r2, #52	; 0x34
 80016d8:	4353      	muls	r3, r2
 80016da:	3320      	adds	r3, #32
 80016dc:	001a      	movs	r2, r3
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <main+0x60c>)
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	3304      	adds	r3, #4
 80016e4:	4816      	ldr	r0, [pc, #88]	; (8001740 <main+0x614>)
 80016e6:	22fa      	movs	r2, #250	; 0xfa
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	9202      	str	r2, [sp, #8]
 80016ec:	2202      	movs	r2, #2
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2301      	movs	r3, #1
 80016f4:	2289      	movs	r2, #137	; 0x89
 80016f6:	f001 fdcf 	bl	8003298 <HAL_I2C_Mem_Read>
			  //converte i valori ottenuti
			  INA233_VIN_Conversion(&INA[i]);
 80016fa:	1c7b      	adds	r3, r7, #1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2234      	movs	r2, #52	; 0x34
 8001700:	435a      	muls	r2, r3
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <main+0x60c>)
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff fcb0 	bl	800106c <INA233_VIN_Conversion>
			  INA233_IIN_Conversion(&INA[i]);
 800170c:	1c7b      	adds	r3, r7, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2234      	movs	r2, #52	; 0x34
 8001712:	435a      	muls	r2, r3
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <main+0x60c>)
 8001716:	18d3      	adds	r3, r2, r3
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fce0 	bl	80010de <INA233_IIN_Conversion>
		  for(uint8_t i = 1; i < INA233_SIZE; i++)
 800171e:	1c7b      	adds	r3, r7, #1
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	1c7b      	adds	r3, r7, #1
 8001724:	3201      	adds	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	1c7b      	adds	r3, r7, #1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d9a0      	bls.n	8001672 <main+0x546>
	  for(uint8_t i = 1; i < ADDRESS_SIZE; i++)
 8001730:	e635      	b.n	800139e <main+0x272>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20000274 	.word	0x20000274
 8001738:	20000170 	.word	0x20000170
 800173c:	2000037c 	.word	0x2000037c
 8001740:	2000007c 	.word	0x2000007c
 8001744:	20000380 	.word	0x20000380
 8001748:	20000374 	.word	0x20000374

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b09b      	sub	sp, #108	; 0x6c
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	2434      	movs	r4, #52	; 0x34
 8001754:	193b      	adds	r3, r7, r4
 8001756:	0018      	movs	r0, r3
 8001758:	2334      	movs	r3, #52	; 0x34
 800175a:	001a      	movs	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	f004 fd07 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001762:	2320      	movs	r3, #32
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	0018      	movs	r0, r3
 8001768:	2314      	movs	r3, #20
 800176a:	001a      	movs	r2, r3
 800176c:	2100      	movs	r1, #0
 800176e:	f004 fcff 	bl	8006170 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	0018      	movs	r0, r3
 8001776:	231c      	movs	r3, #28
 8001778:	001a      	movs	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	f004 fcf8 	bl	8006170 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <SystemClock_Config+0xd4>)
 8001786:	401a      	ands	r2, r3
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <SystemClock_Config+0xd0>)
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	0109      	lsls	r1, r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001792:	0021      	movs	r1, r4
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2210      	movs	r2, #16
 8001798:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2201      	movs	r2, #1
 800179e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	22a0      	movs	r2, #160	; 0xa0
 80017aa:	0212      	lsls	r2, r2, #8
 80017ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	0018      	movs	r0, r3
 80017b8:	f003 fe48 	bl	800544c <HAL_RCC_OscConfig>
 80017bc:	1e03      	subs	r3, r0, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80017c0:	f000 fc02 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	2120      	movs	r1, #32
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	220f      	movs	r2, #15
 80017ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2100      	movs	r1, #0
 80017e8:	0018      	movs	r0, r3
 80017ea:	f004 f999 	bl	8005b20 <HAL_RCC_ClockConfig>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017f2:	f000 fbe9 	bl	8001fc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2208      	movs	r2, #8
 80017fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	0018      	movs	r0, r3
 8001806:	f004 fb79 	bl	8005efc <HAL_RCCEx_PeriphCLKConfig>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800180e:	f000 fbdb 	bl	8001fc8 <Error_Handler>
  }
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b01b      	add	sp, #108	; 0x6c
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40007000 	.word	0x40007000
 8001820:	ffffe7ff 	.word	0xffffe7ff

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_I2C1_Init+0x78>)
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <MX_I2C1_Init+0x7c>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_I2C1_Init+0x78>)
 8001830:	22e1      	movs	r2, #225	; 0xe1
 8001832:	00d2      	lsls	r2, r2, #3
 8001834:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 128;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_I2C1_Init+0x78>)
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_I2C1_Init+0x78>)
 800183e:	2201      	movs	r2, #1
 8001840:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_I2C1_Init+0x78>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_I2C1_Init+0x78>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_I2C1_Init+0x78>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C1_Init+0x78>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_I2C1_Init+0x78>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_I2C1_Init+0x78>)
 8001862:	0018      	movs	r0, r3
 8001864:	f001 fa1c 	bl	8002ca0 <HAL_I2C_Init>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 fbac 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_I2C1_Init+0x78>)
 8001872:	2100      	movs	r1, #0
 8001874:	0018      	movs	r0, r3
 8001876:	f003 fd51 	bl	800531c <HAL_I2CEx_ConfigAnalogFilter>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800187e:	f000 fba3 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_I2C1_Init+0x78>)
 8001884:	2100      	movs	r1, #0
 8001886:	0018      	movs	r0, r3
 8001888:	f003 fd94 	bl	80053b4 <HAL_I2CEx_ConfigDigitalFilter>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001890:	f000 fb9a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000028 	.word	0x20000028
 80018a0:	40005400 	.word	0x40005400

080018a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_I2C2_Init+0x78>)
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <MX_I2C2_Init+0x7c>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MX_I2C2_Init+0x78>)
 80018b0:	22e1      	movs	r2, #225	; 0xe1
 80018b2:	00d2      	lsls	r2, r2, #3
 80018b4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 128;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_I2C2_Init+0x78>)
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_I2C2_Init+0x78>)
 80018be:	2201      	movs	r2, #1
 80018c0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_I2C2_Init+0x78>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_I2C2_Init+0x78>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_I2C2_Init+0x78>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_I2C2_Init+0x78>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_I2C2_Init+0x78>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_I2C2_Init+0x78>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f001 f9dc 	bl	8002ca0 <HAL_I2C_Init>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 fb6c 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_I2C2_Init+0x78>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	0018      	movs	r0, r3
 80018f6:	f003 fd11 	bl	800531c <HAL_I2CEx_ConfigAnalogFilter>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80018fe:	f000 fb63 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_I2C2_Init+0x78>)
 8001904:	2100      	movs	r1, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f003 fd54 	bl	80053b4 <HAL_I2CEx_ConfigDigitalFilter>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001910:	f000 fb5a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	2000007c 	.word	0x2000007c
 8001920:	40005800 	.word	0x40005800

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	240c      	movs	r4, #12
 800192c:	193b      	adds	r3, r7, r4
 800192e:	0018      	movs	r0, r3
 8001930:	2314      	movs	r3, #20
 8001932:	001a      	movs	r2, r3
 8001934:	2100      	movs	r1, #0
 8001936:	f004 fc1b 	bl	8006170 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 800193c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193e:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001940:	2104      	movs	r1, #4
 8001942:	430a      	orrs	r2, r1
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
 8001946:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	2204      	movs	r2, #4
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001956:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
 800195e:	4b5c      	ldr	r3, [pc, #368]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	2201      	movs	r2, #1
 8001964:	4013      	ands	r3, r2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 800196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001970:	2102      	movs	r1, #2
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
 8001976:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <MX_GPIO_Init+0x1ac>)
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	4853      	ldr	r0, [pc, #332]	; (8001ad4 <MX_GPIO_Init+0x1b0>)
 8001988:	2200      	movs	r2, #0
 800198a:	0019      	movs	r1, r3
 800198c:	f001 f94f 	bl	8002c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001990:	4951      	ldr	r1, [pc, #324]	; (8001ad8 <MX_GPIO_Init+0x1b4>)
 8001992:	23a0      	movs	r3, #160	; 0xa0
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	2200      	movs	r2, #0
 8001998:	0018      	movs	r0, r3
 800199a:	f001 f948 	bl	8002c2e <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	484e      	ldr	r0, [pc, #312]	; (8001adc <MX_GPIO_Init+0x1b8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	0019      	movs	r1, r3
 80019a8:	f001 f941 	bl	8002c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ac:	193b      	adds	r3, r7, r4
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0192      	lsls	r2, r2, #6
 80019b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2201      	movs	r2, #1
 80019b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <MX_GPIO_Init+0x1b0>)
 80019ca:	0019      	movs	r1, r3
 80019cc:	0010      	movs	r0, r2
 80019ce:	f000 fec1 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	4a40      	ldr	r2, [pc, #256]	; (8001ad8 <MX_GPIO_Init+0x1b4>)
 80019d6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	2201      	movs	r2, #1
 80019dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	193a      	adds	r2, r7, r4
 80019ec:	23a0      	movs	r3, #160	; 0xa0
 80019ee:	05db      	lsls	r3, r3, #23
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 feae 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <MX_GPIO_Init+0x1bc>)
 80019fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	22c4      	movs	r2, #196	; 0xc4
 8001a02:	0392      	lsls	r2, r2, #14
 8001a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	193a      	adds	r2, r7, r4
 8001a0e:	23a0      	movs	r3, #160	; 0xa0
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 fe9d 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	22c0      	movs	r2, #192	; 0xc0
 8001a20:	0192      	lsls	r2, r2, #6
 8001a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	000c      	movs	r4, r1
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2201      	movs	r2, #1
 8001a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <MX_GPIO_Init+0x1b8>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f000 fe88 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	22c0      	movs	r2, #192	; 0xc0
 8001a48:	0212      	lsls	r2, r2, #8
 8001a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	22c4      	movs	r2, #196	; 0xc4
 8001a50:	0392      	lsls	r2, r2, #14
 8001a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <MX_GPIO_Init+0x1b8>)
 8001a5e:	0019      	movs	r1, r3
 8001a60:	0010      	movs	r0, r2
 8001a62:	f000 fe77 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0212      	lsls	r2, r2, #8
 8001a6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	193b      	adds	r3, r7, r4
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	193a      	adds	r2, r7, r4
 8001a7c:	23a0      	movs	r3, #160	; 0xa0
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 fe66 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	2218      	movs	r2, #24
 8001a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <MX_GPIO_Init+0x1b8>)
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	f000 fe57 	bl	8002754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2006      	movs	r0, #6
 8001aac:	f000 fdbc 	bl	8002628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001ab0:	2006      	movs	r0, #6
 8001ab2:	f000 fdce 	bl	8002652 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2007      	movs	r0, #7
 8001abc:	f000 fdb4 	bl	8002628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001ac0:	2007      	movs	r0, #7
 8001ac2:	f000 fdc6 	bl	8002652 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b009      	add	sp, #36	; 0x24
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	50000800 	.word	0x50000800
 8001ad8:	00000f03 	.word	0x00000f03
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	00001004 	.word	0x00001004

08001ae4 <MYGPIO_ALM_RELE_Init>:

/* USER CODE BEGIN 4 */
void MYGPIO_ALM_RELE_Init(MyGPIO* Self)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&Self[1], GPIOB, GPIO_PIN_15, INPUT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3308      	adds	r3, #8
 8001af0:	0018      	movs	r0, r3
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	4912      	ldr	r1, [pc, #72]	; (8001b40 <MYGPIO_ALM_RELE_Init+0x5c>)
 8001af8:	2300      	movs	r3, #0
 8001afa:	f000 fa6a 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[2], GPIOA, GPIO_PIN_2, INPUT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3310      	adds	r3, #16
 8001b02:	0018      	movs	r0, r3
 8001b04:	23a0      	movs	r3, #160	; 0xa0
 8001b06:	05d9      	lsls	r1, r3, #23
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	f000 fa61 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[3], GPIOA, GPIO_PIN_12, INPUT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3318      	adds	r3, #24
 8001b14:	0018      	movs	r0, r3
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	23a0      	movs	r3, #160	; 0xa0
 8001b1c:	05d9      	lsls	r1, r3, #23
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f000 fa57 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[4], GPIOB, GPIO_PIN_14, INPUT);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3320      	adds	r3, #32
 8001b28:	0018      	movs	r0, r3
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	01da      	lsls	r2, r3, #7
 8001b2e:	4904      	ldr	r1, [pc, #16]	; (8001b40 <MYGPIO_ALM_RELE_Init+0x5c>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	f000 fa4e 	bl	8001fd2 <MYGPIO_Init>
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	50000400 	.word	0x50000400

08001b44 <MYGPIO_CMD_RELE_Init>:

void MYGPIO_CMD_RELE_Init(MyGPIO* Self)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&Self[1], GPIOA, GPIO_PIN_8, OUTPUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	0018      	movs	r0, r3
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	005a      	lsls	r2, r3, #1
 8001b56:	23a0      	movs	r3, #160	; 0xa0
 8001b58:	05d9      	lsls	r1, r3, #23
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f000 fa39 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[2], GPIOA, GPIO_PIN_1, OUTPUT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3310      	adds	r3, #16
 8001b64:	0018      	movs	r0, r3
 8001b66:	23a0      	movs	r3, #160	; 0xa0
 8001b68:	05d9      	lsls	r1, r3, #23
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f000 fa30 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[3], GPIOA, GPIO_PIN_11, OUTPUT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3318      	adds	r3, #24
 8001b76:	0018      	movs	r0, r3
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	011a      	lsls	r2, r3, #4
 8001b7c:	23a0      	movs	r3, #160	; 0xa0
 8001b7e:	05d9      	lsls	r1, r3, #23
 8001b80:	2301      	movs	r3, #1
 8001b82:	f000 fa26 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[4], GPIOB, GPIO_PIN_13, OUTPUT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3320      	adds	r3, #32
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	019a      	lsls	r2, r3, #6
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <MYGPIO_CMD_RELE_Init+0x5c>)
 8001b92:	2301      	movs	r3, #1
 8001b94:	f000 fa1d 	bl	8001fd2 <MYGPIO_Init>
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	50000400 	.word	0x50000400

08001ba4 <MYGPIO_FAULT_RELE_Init>:

void MYGPIO_FAULT_RELE_Init(MyGPIO* Self)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&Self[1], GPIOA, GPIO_PIN_9, OUTPUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3308      	adds	r3, #8
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	23a0      	movs	r3, #160	; 0xa0
 8001bb8:	05d9      	lsls	r1, r3, #23
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f000 fa09 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[2], GPIOA, GPIO_PIN_0, OUTPUT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3310      	adds	r3, #16
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	23a0      	movs	r3, #160	; 0xa0
 8001bc8:	05d9      	lsls	r1, r3, #23
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f000 fa00 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[3], GPIOA, GPIO_PIN_10, OUTPUT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	00da      	lsls	r2, r3, #3
 8001bdc:	23a0      	movs	r3, #160	; 0xa0
 8001bde:	05d9      	lsls	r1, r3, #23
 8001be0:	2301      	movs	r3, #1
 8001be2:	f000 f9f6 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&Self[4], GPIOB, GPIO_PIN_12, OUTPUT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3320      	adds	r3, #32
 8001bea:	0018      	movs	r0, r3
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <MYGPIO_FAULT_RELE_Init+0x5c>)
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f000 f9ed 	bl	8001fd2 <MYGPIO_Init>
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	50000400 	.word	0x50000400

08001c04 <MYGPIO_ADDRESS_Init>:

void MYGPIO_ADDRESS_Init(MyGPIO* ADDRESS)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(&ADDRESS[1], GPIOA, GPIO_PIN_15, INPUT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	0018      	movs	r0, r3
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	021a      	lsls	r2, r3, #8
 8001c16:	23a0      	movs	r3, #160	; 0xa0
 8001c18:	05d9      	lsls	r1, r3, #23
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f000 f9d9 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&ADDRESS[2], GPIOB, GPIO_PIN_3, INPUT);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3310      	adds	r3, #16
 8001c24:	0018      	movs	r0, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <MYGPIO_ADDRESS_Init+0x44>)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	f000 f9d1 	bl	8001fd2 <MYGPIO_Init>
	MYGPIO_Init(&ADDRESS[3], GPIOB, GPIO_PIN_4, INPUT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3318      	adds	r3, #24
 8001c34:	0018      	movs	r0, r3
 8001c36:	4904      	ldr	r1, [pc, #16]	; (8001c48 <MYGPIO_ADDRESS_Init+0x44>)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	f000 f9c9 	bl	8001fd2 <MYGPIO_Init>
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	50000400 	.word	0x50000400

08001c4c <MYGPIO_EXT_INT_Init>:

void MYGPIO_EXT_INT_Init(MyGPIO* EXT_INT)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	MYGPIO_Init(EXT_INT, GPIOC, GPIO_PIN_13, OUTPUT);
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	019a      	lsls	r2, r3, #6
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <MYGPIO_EXT_INT_Init+0x20>)
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f000 f9b8 	bl	8001fd2 <MYGPIO_Init>
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	50000800 	.word	0x50000800

08001c70 <MX_GPIO_I2C_OwnAddress1_Update>:

void MX_GPIO_I2C_OwnAddress1_Update(I2C_HandleTypeDef* hi2c, uint8_t ADDRESS1_PinState, uint8_t ADDRESS2_PinState, uint8_t ADDRESS3_PinState)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	000c      	movs	r4, r1
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	1cfb      	adds	r3, r7, #3
 8001c80:	1c22      	adds	r2, r4, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	1cbb      	adds	r3, r7, #2
 8001c86:	1c02      	adds	r2, r0, #0
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	1c7b      	adds	r3, r7, #1
 8001c8c:	1c0a      	adds	r2, r1, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
	uint8_t hi2c_Init_OwnAddress1 = 0x40;
 8001c90:	200f      	movs	r0, #15
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 += (ADDRESS1_PinState << 0);
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	1839      	adds	r1, r7, r0
 8001c9c:	1cfa      	adds	r2, r7, #3
 8001c9e:	7809      	ldrb	r1, [r1, #0]
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	188a      	adds	r2, r1, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 += (ADDRESS2_PinState << 1);
 8001ca6:	1cbb      	adds	r3, r7, #2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	18db      	adds	r3, r3, r3
 8001cac:	b2d9      	uxtb	r1, r3
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	183a      	adds	r2, r7, r0
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	188a      	adds	r2, r1, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 += (ADDRESS3_PinState << 2);
 8001cb8:	1c7b      	adds	r3, r7, #1
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	b2d9      	uxtb	r1, r3
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	183a      	adds	r2, r7, r0
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	188a      	adds	r2, r1, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
	hi2c_Init_OwnAddress1 = hi2c_Init_OwnAddress1 << 1;
 8001cca:	183a      	adds	r2, r7, r0
 8001ccc:	0001      	movs	r1, r0
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	18db      	adds	r3, r3, r3
 8001cd4:	7013      	strb	r3, [r2, #0]

	//Update I2C Slave Address
	if(hi2c->Init.OwnAddress1 != hi2c_Init_OwnAddress1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d01d      	beq.n	8001d1e <MX_GPIO_I2C_OwnAddress1_Update+0xae>
	{
		hi2c->Init.OwnAddress1 = hi2c_Init_OwnAddress1;
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
		if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 ffd7 	bl	8002ca0 <HAL_I2C_Init>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_GPIO_I2C_OwnAddress1_Update+0x8a>
		{
		Error_Handler();
 8001cf6:	f000 f967 	bl	8001fc8 <Error_Handler>
		}

		/** Configure Analogue filter
		*/
		if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f003 fb0c 	bl	800531c <HAL_I2CEx_ConfigAnalogFilter>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d001      	beq.n	8001d0c <MX_GPIO_I2C_OwnAddress1_Update+0x9c>
		{
		Error_Handler();
 8001d08:	f000 f95e 	bl	8001fc8 <Error_Handler>
		}

		/** Configure Digital filter
		*/
		if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2100      	movs	r1, #0
 8001d10:	0018      	movs	r0, r3
 8001d12:	f003 fb4f 	bl	80053b4 <HAL_I2CEx_ConfigDigitalFilter>
 8001d16:	1e03      	subs	r3, r0, #0
 8001d18:	d001      	beq.n	8001d1e <MX_GPIO_I2C_OwnAddress1_Update+0xae>
		{
		Error_Handler();
 8001d1a:	f000 f955 	bl	8001fc8 <Error_Handler>
		}
	}
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b005      	add	sp, #20
 8001d24:	bd90      	pop	{r4, r7, pc}

08001d26 <CMD_RELE_Update>:

void CMD_RELE_Update(MyGPIO* Self, uint8_t Rele_IDNumber, uint8_t ReleControl)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	0008      	movs	r0, r1
 8001d30:	0011      	movs	r1, r2
 8001d32:	1cfb      	adds	r3, r7, #3
 8001d34:	1c02      	adds	r2, r0, #0
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	1cbb      	adds	r3, r7, #2
 8001d3a:	1c0a      	adds	r2, r1, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
	uint8_t BitPosition = 1 << (Rele_IDNumber - 1);
 8001d3e:	1cfb      	adds	r3, r7, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	2201      	movs	r2, #1
 8001d46:	409a      	lsls	r2, r3
 8001d48:	210f      	movs	r1, #15
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	701a      	strb	r2, [r3, #0]
	Self->PinState = (BitPosition & ReleControl);
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	1cba      	adds	r2, r7, #2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	4013      	ands	r3, r2
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	71da      	strb	r2, [r3, #7]
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	0008      	movs	r0, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	1cfb      	adds	r3, r7, #3
 8001d76:	1c02      	adds	r2, r0, #0
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	1c0a      	adds	r2, r1, #0
 8001d7e:	801a      	strh	r2, [r3, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8001d80:	1cfb      	adds	r3, r7, #3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_I2C_AddrCallback+0x34>
	{
		rxcount = 0;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_I2C_AddrCallback+0x5c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&i2c1_Register, 1, I2C_FIRST_FRAME);
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_I2C_AddrCallback+0x60>)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2201      	movs	r2, #1
 8001d96:	f001 fc73 	bl	8003680 <HAL_I2C_Slave_Seq_Receive_IT>
	else
	{
		txcount = 0;
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&CONTROL[i2c1_Register + txcount], 1, I2C_FIRST_FRAME);
	}
}
 8001d9a:	e00f      	b.n	8001dbc <HAL_I2C_AddrCallback+0x54>
		txcount = 0;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_I2C_AddrCallback+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&CONTROL[i2c1_Register + txcount], 1, I2C_FIRST_FRAME);
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_I2C_AddrCallback+0x60>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	001a      	movs	r2, r3
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_I2C_AddrCallback+0x64>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	18d2      	adds	r2, r2, r3
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_I2C_AddrCallback+0x68>)
 8001db0:	18d1      	adds	r1, r2, r3
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	2300      	movs	r3, #0
 8001db6:	2201      	movs	r2, #1
 8001db8:	f001 fba2 	bl	8003500 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000037d 	.word	0x2000037d
 8001dc8:	2000037f 	.word	0x2000037f
 8001dcc:	2000037e 	.word	0x2000037e
 8001dd0:	20000274 	.word	0x20000274

08001dd4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	txcount++;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001de6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t *)&CONTROL[i2c1_Register + txcount], 1, I2C_NEXT_FRAME);
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	001a      	movs	r2, r3
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	18d2      	adds	r2, r2, r3
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 8001df6:	18d1      	adds	r1, r2, r3
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	045b      	lsls	r3, r3, #17
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f001 fb7e 	bl	8003500 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000037e 	.word	0x2000037e
 8001e10:	2000037f 	.word	0x2000037f
 8001e14:	20000274 	.word	0x20000274

08001e18 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&CONTROL[i2c1_Register + rxcount], 1, I2C_NEXT_FRAME);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	001a      	movs	r2, r3
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	18d2      	adds	r2, r2, r3
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8001e2e:	18d1      	adds	r1, r2, r3
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	045b      	lsls	r3, r3, #17
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f001 fc22 	bl	8003680 <HAL_I2C_Slave_Seq_Receive_IT>

	rxcount++;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8001e46:	701a      	strb	r2, [r3, #0]
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000037f 	.word	0x2000037f
 8001e54:	2000037d 	.word	0x2000037d
 8001e58:	20000274 	.word	0x20000274

08001e5c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f001 fccc 	bl	8003804 <HAL_I2C_EnableListen_IT>
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetError(hi2c) == 0x04)  // AF error
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f001 fd7d 	bl	800397e <HAL_I2C_GetError>
 8001e84:	0003      	movs	r3, r0
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d011      	beq.n	8001eae <HAL_I2C_ErrorCallback+0x3a>
	/* BERR Error commonly occurs during the Direction switch
	 * Here we the software reset bit is set by the HAL error handler
	 * Before resetting this bit, we make sure the I2C lines are released and the bus is free
	 * I am simply reinitializing the I2C to do so
	 */
	else if (HAL_I2C_GetError(hi2c) == 0x01)  // BERR Error
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f001 fd76 	bl	800397e <HAL_I2C_GetError>
 8001e92:	0003      	movs	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d10a      	bne.n	8001eae <HAL_I2C_ErrorCallback+0x3a>
	{
		HAL_I2C_DeInit(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 ff96 	bl	8002dcc <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 fefc 	bl	8002ca0 <HAL_I2C_Init>
		rxcount = 0;  // reset the count
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_I2C_ErrorCallback+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_EnableListen_IT(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f001 fca7 	bl	8003804 <HAL_I2C_EnableListen_IT>
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	2000037d 	.word	0x2000037d

08001ec4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e02b      	b.n	8001f32 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		MYGPIO_PinState_Update(&ALM_RELE[i]);
 8001eda:	240f      	movs	r4, #15
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	00da      	lsls	r2, r3, #3
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 f88d 	bl	8002006 <MYGPIO_PinState_Update>
		FAULT_RELE[i].PinState = !(ALM_RELE[i].PinState);
 8001eec:	0021      	movs	r1, r4
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	18d3      	adds	r3, r2, r3
 8001ef8:	3307      	adds	r3, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	425a      	negs	r2, r3
 8001efe:	4153      	adcs	r3, r2
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	0008      	movs	r0, r1
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	0011      	movs	r1, r2
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	18d3      	adds	r3, r2, r3
 8001f10:	3307      	adds	r3, #7
 8001f12:	1c0a      	adds	r2, r1, #0
 8001f14:	701a      	strb	r2, [r3, #0]
		MYGPIO_PinState_Update(&FAULT_RELE[i]);
 8001f16:	0004      	movs	r4, r0
 8001f18:	183b      	adds	r3, r7, r0
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	00da      	lsls	r2, r3, #3
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f20:	18d3      	adds	r3, r2, r3
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f86f 	bl	8002006 <MYGPIO_PinState_Update>
	for(uint8_t i = 1; i < INA233_SIZE; i++)
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	3201      	adds	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	230f      	movs	r3, #15
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d9ce      	bls.n	8001eda <HAL_GPIO_EXTI_Callback+0x16>
	}

	CONTROL[ALM_RELE_PinState] = (ALM_RELE[1].PinState << 0) + (ALM_RELE[2].PinState << 1) + (ALM_RELE[3].PinState << 2) + (ALM_RELE[4].PinState << 3);
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001f3e:	7bda      	ldrb	r2, [r3, #15]
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001f42:	7ddb      	ldrb	r3, [r3, #23]
 8001f44:	18db      	adds	r3, r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001f4e:	7fdb      	ldrb	r3, [r3, #31]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001f5a:	2127      	movs	r1, #39	; 0x27
 8001f5c:	5c5b      	ldrb	r3, [r3, r1]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f68:	709a      	strb	r2, [r3, #2]
	CONTROL[FAULT_RELE_PinState] = (FAULT_RELE[1].PinState << 0) + (FAULT_RELE[2].PinState << 1) + (FAULT_RELE[3].PinState << 2) + (FAULT_RELE[4].PinState << 3);
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f6c:	7bda      	ldrb	r2, [r3, #15]
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f70:	7ddb      	ldrb	r3, [r3, #23]
 8001f72:	18db      	adds	r3, r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	18d3      	adds	r3, r2, r3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f7c:	7fdb      	ldrb	r3, [r3, #31]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	18d3      	adds	r3, r2, r3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f88:	2127      	movs	r1, #39	; 0x27
 8001f8a:	5c5b      	ldrb	r3, [r3, r1]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f96:	70da      	strb	r2, [r3, #3]

	EXT_INT.PinState = !(CONTROL[FAULT_RELE_PinState]);
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f9a:	78db      	ldrb	r3, [r3, #3]
 8001f9c:	425a      	negs	r2, r3
 8001f9e:	4153      	adcs	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x100>)
 8001fa6:	71da      	strb	r2, [r3, #7]
	MYGPIO_PinState_Update(&EXT_INT);
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x100>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 f82b 	bl	8002006 <MYGPIO_PinState_Update>
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b005      	add	sp, #20
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	200000d0 	.word	0x200000d0
 8001fbc:	200000f8 	.word	0x200000f8
 8001fc0:	20000274 	.word	0x20000274
 8001fc4:	20000168 	.word	0x20000168

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>

08001fd2 <MYGPIO_Init>:
 * @param 	GPIO Port
 * @param 	GPIO Pin
 * @param 	GPIO Mode
 */
void MYGPIO_Init(MyGPIO* Self, 	GPIO_TypeDef* GPIO, uint16_t Pin, MyGPIO_Mode Mode)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	1dbb      	adds	r3, r7, #6
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	1d7b      	adds	r3, r7, #5
 8001fe4:	1c0a      	adds	r2, r1, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
	Self->GPIO = GPIO;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	601a      	str	r2, [r3, #0]
	Self->Pin = Pin;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1dba      	adds	r2, r7, #6
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	809a      	strh	r2, [r3, #4]
	Self->Mode = Mode;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1d7a      	adds	r2, r7, #5
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	719a      	strb	r2, [r3, #6]
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}

08002006 <MYGPIO_PinState_Update>:
 * @brief 	OUTPUT GPIO: Modify GPIO's PinState based on MYGPIO's PinState
 * 			INPUT GPIO:  Modify MYGPIO's PinState based on GPIO's PinState
 * @param 	Self, MYGPIO
 */
void MYGPIO_PinState_Update(MyGPIO* Self)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	if(Self->Mode == OUTPUT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d109      	bne.n	800202a <MYGPIO_PinState_Update+0x24>
		HAL_GPIO_WritePin(Self->GPIO, Self->Pin, Self->PinState);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8899      	ldrh	r1, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	79db      	ldrb	r3, [r3, #7]
 8002022:	001a      	movs	r2, r3
 8002024:	f000 fe03 	bl	8002c2e <HAL_GPIO_WritePin>
	else
		Self->PinState = HAL_GPIO_ReadPin(Self->GPIO, Self->Pin);
}
 8002028:	e00b      	b.n	8002042 <MYGPIO_PinState_Update+0x3c>
		Self->PinState = HAL_GPIO_ReadPin(Self->GPIO, Self->Pin);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	889b      	ldrh	r3, [r3, #4]
 8002032:	0019      	movs	r1, r3
 8002034:	0010      	movs	r0, r2
 8002036:	f000 fddd 	bl	8002bf4 <HAL_GPIO_ReadPin>
 800203a:	0003      	movs	r3, r0
 800203c:	001a      	movs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	71da      	strb	r2, [r3, #7]
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}

0800204a <MYTIMELOOP_Init>:
 * @author William Favaro
 * @date
 * @note
 */
void MYTIMELOOP_Init(TimeLoop* Self, uint16_t SpanTime, uint32_t ActualTime)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	200a      	movs	r0, #10
 8002056:	183b      	adds	r3, r7, r0
 8002058:	1c0a      	adds	r2, r1, #0
 800205a:	801a      	strh	r2, [r3, #0]
	Self->_LastRunTime 	= ActualTime;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
	Self->_SpanTime 	= SpanTime;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	183a      	adds	r2, r7, r0
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	809a      	strh	r2, [r3, #4]
	Self->_Enable 		= 1;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	719a      	strb	r2, [r3, #6]
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b004      	add	sp, #16
 8002076:	bd80      	pop	{r7, pc}

08002078 <MYTIMELOOP_Run>:
 * @author William Favaro
 * @date
 * @note
 */
uint8_t MYTIMELOOP_Run(TimeLoop* Self, uint32_t ActualTime)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	if((ActualTime - Self->_LastRunTime) > Self->_SpanTime)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	8892      	ldrh	r2, [r2, #4]
 800208e:	4293      	cmp	r3, r2
 8002090:	d908      	bls.n	80020a4 <MYTIMELOOP_Run+0x2c>
	{
		Self->_LastRunTime += Self->_SpanTime;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	8892      	ldrh	r2, [r2, #4]
 800209a:	189a      	adds	r2, r3, r2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]
		return 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <MYTIMELOOP_Run+0x2e>
	}
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_MspInit+0x24>)
 80020b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_MspInit+0x24>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	430a      	orrs	r2, r1
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_MspInit+0x24>)
 80020c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_MspInit+0x24>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0549      	lsls	r1, r1, #21
 80020ca:	430a      	orrs	r2, r1
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b08b      	sub	sp, #44	; 0x2c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	2414      	movs	r4, #20
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	0018      	movs	r0, r3
 80020e6:	2314      	movs	r3, #20
 80020e8:	001a      	movs	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f004 f840 	bl	8006170 <memset>
  if(hi2c->Instance==I2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a38      	ldr	r2, [pc, #224]	; (80021d8 <HAL_I2C_MspInit+0x100>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d132      	bne.n	8002160 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_I2C_MspInit+0x104>)
 80020fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <HAL_I2C_MspInit+0x104>)
 8002100:	2102      	movs	r1, #2
 8002102:	430a      	orrs	r2, r1
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
 8002106:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_I2C_MspInit+0x104>)
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002112:	193b      	adds	r3, r7, r4
 8002114:	22c0      	movs	r2, #192	; 0xc0
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211a:	0021      	movs	r1, r4
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2212      	movs	r2, #18
 8002120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2203      	movs	r2, #3
 800212c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2204      	movs	r2, #4
 8002132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	187b      	adds	r3, r7, r1
 8002136:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_I2C_MspInit+0x108>)
 8002138:	0019      	movs	r1, r3
 800213a:	0010      	movs	r0, r2
 800213c:	f000 fb0a 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_I2C_MspInit+0x104>)
 8002142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_I2C_MspInit+0x104>)
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0389      	lsls	r1, r1, #14
 800214a:	430a      	orrs	r2, r1
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2101      	movs	r1, #1
 8002152:	2017      	movs	r0, #23
 8002154:	f000 fa68 	bl	8002628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002158:	2017      	movs	r0, #23
 800215a:	f000 fa7a 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800215e:	e036      	b.n	80021ce <HAL_I2C_MspInit+0xf6>
  else if(hi2c->Instance==I2C2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_I2C_MspInit+0x10c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d131      	bne.n	80021ce <HAL_I2C_MspInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_I2C_MspInit+0x104>)
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_I2C_MspInit+0x104>)
 8002170:	2102      	movs	r1, #2
 8002172:	430a      	orrs	r2, r1
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_I2C_MspInit+0x104>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	2202      	movs	r2, #2
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002182:	2114      	movs	r1, #20
 8002184:	187b      	adds	r3, r7, r1
 8002186:	22c0      	movs	r2, #192	; 0xc0
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218c:	187b      	adds	r3, r7, r1
 800218e:	2212      	movs	r2, #18
 8002190:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	187b      	adds	r3, r7, r1
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2203      	movs	r2, #3
 800219c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2206      	movs	r2, #6
 80021a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_I2C_MspInit+0x108>)
 80021a8:	0019      	movs	r1, r3
 80021aa:	0010      	movs	r0, r2
 80021ac:	f000 fad2 	bl	8002754 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_I2C_MspInit+0x104>)
 80021b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_I2C_MspInit+0x104>)
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	03c9      	lsls	r1, r1, #15
 80021ba:	430a      	orrs	r2, r1
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2101      	movs	r1, #1
 80021c2:	2018      	movs	r0, #24
 80021c4:	f000 fa30 	bl	8002628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80021c8:	2018      	movs	r0, #24
 80021ca:	f000 fa42 	bl	8002652 <HAL_NVIC_EnableIRQ>
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b00b      	add	sp, #44	; 0x2c
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	40005400 	.word	0x40005400
 80021dc:	40021000 	.word	0x40021000
 80021e0:	50000400 	.word	0x50000400
 80021e4:	40005800 	.word	0x40005800

080021e8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_I2C_MspDeInit+0x84>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d117      	bne.n	800222a <HAL_I2C_MspDeInit+0x42>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_I2C_MspDeInit+0x88>)
 80021fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_I2C_MspDeInit+0x88>)
 8002200:	491c      	ldr	r1, [pc, #112]	; (8002274 <HAL_I2C_MspDeInit+0x8c>)
 8002202:	400a      	ands	r2, r1
 8002204:	639a      	str	r2, [r3, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <HAL_I2C_MspDeInit+0x90>)
 800220c:	0019      	movs	r1, r3
 800220e:	0010      	movs	r0, r2
 8002210:	f000 fc16 	bl	8002a40 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_I2C_MspDeInit+0x90>)
 800221a:	0019      	movs	r1, r3
 800221c:	0010      	movs	r0, r2
 800221e:	f000 fc0f 	bl	8002a40 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8002222:	2017      	movs	r0, #23
 8002224:	f000 fa25 	bl	8002672 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002228:	e01b      	b.n	8002262 <HAL_I2C_MspDeInit+0x7a>
  else if(hi2c->Instance==I2C2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_I2C_MspDeInit+0x94>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d116      	bne.n	8002262 <HAL_I2C_MspDeInit+0x7a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_I2C_MspDeInit+0x88>)
 8002236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_I2C_MspDeInit+0x88>)
 800223a:	4911      	ldr	r1, [pc, #68]	; (8002280 <HAL_I2C_MspDeInit+0x98>)
 800223c:	400a      	ands	r2, r1
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_I2C_MspDeInit+0x90>)
 8002246:	0019      	movs	r1, r3
 8002248:	0010      	movs	r0, r2
 800224a:	f000 fbf9 	bl	8002a40 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_I2C_MspDeInit+0x90>)
 8002254:	0019      	movs	r1, r3
 8002256:	0010      	movs	r0, r2
 8002258:	f000 fbf2 	bl	8002a40 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_IRQn);
 800225c:	2018      	movs	r0, #24
 800225e:	f000 fa08 	bl	8002672 <HAL_NVIC_DisableIRQ>
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b002      	add	sp, #8
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	40005400 	.word	0x40005400
 8002270:	40021000 	.word	0x40021000
 8002274:	ffdfffff 	.word	0xffdfffff
 8002278:	50000400 	.word	0x50000400
 800227c:	40005800 	.word	0x40005800
 8002280:	ffbfffff 	.word	0xffbfffff

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <NMI_Handler+0x4>

0800228a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <HardFault_Handler+0x4>

08002290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a8:	f000 f8d4 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80022b6:	2004      	movs	r0, #4
 80022b8:	f000 fcd6 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	015b      	lsls	r3, r3, #5
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 fccc 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fcc7 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fcc2 	bl	8002c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <I2C1_IRQHandler+0x2c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	23e0      	movs	r3, #224	; 0xe0
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	d004      	beq.n	8002308 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <I2C1_IRQHandler+0x2c>)
 8002300:	0018      	movs	r0, r3
 8002302:	f001 fabb 	bl	800387c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002306:	e003      	b.n	8002310 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <I2C1_IRQHandler+0x2c>)
 800230a:	0018      	movs	r0, r3
 800230c:	f001 fa9c 	bl	8003848 <HAL_I2C_EV_IRQHandler>
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	20000028 	.word	0x20000028

0800231c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 interrupt.
  */
void I2C2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <I2C2_IRQHandler+0x2c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	23e0      	movs	r3, #224	; 0xe0
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4013      	ands	r3, r2
 800232c:	d004      	beq.n	8002338 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <I2C2_IRQHandler+0x2c>)
 8002330:	0018      	movs	r0, r3
 8002332:	f001 faa3 	bl	800387c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8002336:	e003      	b.n	8002340 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <I2C2_IRQHandler+0x2c>)
 800233a:	0018      	movs	r0, r3
 800233c:	f001 fa84 	bl	8003848 <HAL_I2C_EV_IRQHandler>
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	2000007c 	.word	0x2000007c

0800234c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800235a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800235c:	f7ff fff6 	bl	800234c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f003 fefb 	bl	8006180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238a:	f7fe fecf 	bl	800112c <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
   ldr   r0, =_estack
 8002390:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800239c:	0800628c 	.word	0x0800628c
  ldr r2, =_sbss
 80023a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023a4:	20000384 	.word	0x20000384

080023a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_COMP_IRQHandler>
	...

080023ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_Init+0x3c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_Init+0x3c>)
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f811 	bl	80023ec <HAL_InitTick>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e001      	b.n	80023da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023d6:	f7ff fe6b 	bl	80020b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_InitTick+0x5c>)
 80023f6:	681c      	ldr	r4, [r3, #0]
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_InitTick+0x60>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	0019      	movs	r1, r3
 80023fe:	23fa      	movs	r3, #250	; 0xfa
 8002400:	0098      	lsls	r0, r3, #2
 8002402:	f7fd fe81 	bl	8000108 <__udivsi3>
 8002406:	0003      	movs	r3, r0
 8002408:	0019      	movs	r1, r3
 800240a:	0020      	movs	r0, r4
 800240c:	f7fd fe7c 	bl	8000108 <__udivsi3>
 8002410:	0003      	movs	r3, r0
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f93d 	bl	8002692 <HAL_SYSTICK_Config>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00f      	b.n	8002440 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d80b      	bhi.n	800243e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	2301      	movs	r3, #1
 800242a:	425b      	negs	r3, r3
 800242c:	2200      	movs	r2, #0
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f8fa 	bl	8002628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_InitTick+0x64>)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b003      	add	sp, #12
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	20000000 	.word	0x20000000
 800244c:	20000008 	.word	0x20000008
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_IncTick+0x1c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	001a      	movs	r2, r3
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_IncTick+0x20>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	18d2      	adds	r2, r2, r3
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_IncTick+0x20>)
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20000008 	.word	0x20000008
 8002474:	20000380 	.word	0x20000380

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <HAL_GetTick+0x10>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	20000380 	.word	0x20000380

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	0002      	movs	r2, r0
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002498:	1dfb      	adds	r3, r7, #7
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b7f      	cmp	r3, #127	; 0x7f
 800249e:	d809      	bhi.n	80024b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	001a      	movs	r2, r3
 80024a6:	231f      	movs	r3, #31
 80024a8:	401a      	ands	r2, r3
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <__NVIC_EnableIRQ+0x30>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	4091      	lsls	r1, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
  }
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	0002      	movs	r2, r0
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b7f      	cmp	r3, #127	; 0x7f
 80024d2:	d810      	bhi.n	80024f6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	001a      	movs	r2, r3
 80024da:	231f      	movs	r3, #31
 80024dc:	4013      	ands	r3, r2
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_DisableIRQ+0x40>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024ea:	f3bf 8f4f 	dsb	sy
}
 80024ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80024f0:	f3bf 8f6f 	isb	sy
}
 80024f4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	0002      	movs	r2, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b7f      	cmp	r3, #127	; 0x7f
 8002518:	d828      	bhi.n	800256c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251a:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <__NVIC_SetPriority+0xd4>)
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b25b      	sxtb	r3, r3
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	33c0      	adds	r3, #192	; 0xc0
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	589b      	ldr	r3, [r3, r2]
 800252a:	1dfa      	adds	r2, r7, #7
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	0011      	movs	r1, r2
 8002530:	2203      	movs	r2, #3
 8002532:	400a      	ands	r2, r1
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	21ff      	movs	r1, #255	; 0xff
 8002538:	4091      	lsls	r1, r2
 800253a:	000a      	movs	r2, r1
 800253c:	43d2      	mvns	r2, r2
 800253e:	401a      	ands	r2, r3
 8002540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	22ff      	movs	r2, #255	; 0xff
 8002548:	401a      	ands	r2, r3
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	0018      	movs	r0, r3
 8002550:	2303      	movs	r3, #3
 8002552:	4003      	ands	r3, r0
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002558:	481f      	ldr	r0, [pc, #124]	; (80025d8 <__NVIC_SetPriority+0xd4>)
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	430a      	orrs	r2, r1
 8002564:	33c0      	adds	r3, #192	; 0xc0
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800256a:	e031      	b.n	80025d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <__NVIC_SetPriority+0xd8>)
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	0019      	movs	r1, r3
 8002574:	230f      	movs	r3, #15
 8002576:	400b      	ands	r3, r1
 8002578:	3b08      	subs	r3, #8
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3306      	adds	r3, #6
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	18d3      	adds	r3, r2, r3
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1dfa      	adds	r2, r7, #7
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	0011      	movs	r1, r2
 800258c:	2203      	movs	r2, #3
 800258e:	400a      	ands	r2, r1
 8002590:	00d2      	lsls	r2, r2, #3
 8002592:	21ff      	movs	r1, #255	; 0xff
 8002594:	4091      	lsls	r1, r2
 8002596:	000a      	movs	r2, r1
 8002598:	43d2      	mvns	r2, r2
 800259a:	401a      	ands	r2, r3
 800259c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	401a      	ands	r2, r3
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	0018      	movs	r0, r3
 80025ac:	2303      	movs	r3, #3
 80025ae:	4003      	ands	r3, r0
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b4:	4809      	ldr	r0, [pc, #36]	; (80025dc <__NVIC_SetPriority+0xd8>)
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	001c      	movs	r4, r3
 80025bc:	230f      	movs	r3, #15
 80025be:	4023      	ands	r3, r4
 80025c0:	3b08      	subs	r3, #8
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	430a      	orrs	r2, r1
 80025c6:	3306      	adds	r3, #6
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	18c3      	adds	r3, r0, r3
 80025cc:	3304      	adds	r3, #4
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b003      	add	sp, #12
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	045b      	lsls	r3, r3, #17
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d301      	bcc.n	80025f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f4:	2301      	movs	r3, #1
 80025f6:	e010      	b.n	800261a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <SysTick_Config+0x44>)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	3a01      	subs	r2, #1
 80025fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002600:	2301      	movs	r3, #1
 8002602:	425b      	negs	r3, r3
 8002604:	2103      	movs	r1, #3
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff ff7c 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x44>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x44>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	210f      	movs	r1, #15
 8002634:	187b      	adds	r3, r7, r1
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	187b      	adds	r3, r7, r1
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b25b      	sxtb	r3, r3
 8002642:	0011      	movs	r1, r2
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b004      	add	sp, #16
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	0002      	movs	r2, r0
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b25b      	sxtb	r3, r3
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ff11 	bl	800248c <__NVIC_EnableIRQ>
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	0002      	movs	r2, r0
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b25b      	sxtb	r3, r3
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff ff1b 	bl	80024c0 <__NVIC_DisableIRQ>
}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b002      	add	sp, #8
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff ff9f 	bl	80025e0 <SysTick_Config>
 80026a2:	0003      	movs	r3, r0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b4:	210f      	movs	r1, #15
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2225      	movs	r2, #37	; 0x25
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d006      	beq.n	80026d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e02a      	b.n	800272c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	210e      	movs	r1, #14
 80026e2:	438a      	bics	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	438a      	bics	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	221c      	movs	r2, #28
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2101      	movs	r1, #1
 8002704:	4091      	lsls	r1, r2
 8002706:	000a      	movs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2225      	movs	r2, #37	; 0x25
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2224      	movs	r2, #36	; 0x24
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	0010      	movs	r0, r2
 800272a:	4798      	blx	r3
    }
  }
  return status;
 800272c:	230f      	movs	r3, #15
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2225      	movs	r2, #37	; 0x25
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	b2db      	uxtb	r3, r3
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800276a:	e14f      	b.n	8002a0c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4091      	lsls	r1, r2
 8002776:	000a      	movs	r2, r1
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d100      	bne.n	8002784 <HAL_GPIO_Init+0x30>
 8002782:	e140      	b.n	8002a06 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	4013      	ands	r3, r2
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2203      	movs	r2, #3
 8002796:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	409a      	lsls	r2, r3
 80027aa:	0013      	movs	r3, r2
 80027ac:	43da      	mvns	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	0013      	movs	r3, r2
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
 80027d8:	0013      	movs	r3, r2
 80027da:	43da      	mvns	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	2201      	movs	r2, #1
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
 80027f0:	0013      	movs	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	409a      	lsls	r2, r3
 800282c:	0013      	movs	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2203      	movs	r2, #3
 8002840:	4013      	ands	r3, r2
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	58d3      	ldr	r3, [r2, r3]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2207      	movs	r2, #7
 8002858:	4013      	ands	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2107      	movs	r1, #7
 8002872:	400b      	ands	r3, r1
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	409a      	lsls	r2, r3
 8002878:	0013      	movs	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	43da      	mvns	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	401a      	ands	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	0013      	movs	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	23c0      	movs	r3, #192	; 0xc0
 80028c8:	029b      	lsls	r3, r3, #10
 80028ca:	4013      	ands	r3, r2
 80028cc:	d100      	bne.n	80028d0 <HAL_GPIO_Init+0x17c>
 80028ce:	e09a      	b.n	8002a06 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80028d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_GPIO_Init+0x2d4>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	589b      	ldr	r3, [r3, r2]
 80028e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2203      	movs	r2, #3
 80028ee:	4013      	ands	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	43da      	mvns	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	23a0      	movs	r3, #160	; 0xa0
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	429a      	cmp	r2, r3
 8002908:	d019      	beq.n	800293e <HAL_GPIO_Init+0x1ea>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_GPIO_Init+0x2d8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0x1e6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a46      	ldr	r2, [pc, #280]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00d      	beq.n	8002936 <HAL_GPIO_Init+0x1e2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <HAL_GPIO_Init+0x2e0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <HAL_GPIO_Init+0x1de>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a44      	ldr	r2, [pc, #272]	; (8002a38 <HAL_GPIO_Init+0x2e4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_GPIO_Init+0x1da>
 800292a:	2305      	movs	r3, #5
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x1ec>
 800292e:	2306      	movs	r3, #6
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x1ec>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x1ec>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x1ec>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x1ec>
 800293e:	2300      	movs	r3, #0
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	2103      	movs	r1, #3
 8002944:	400a      	ands	r2, r1
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x2d4>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43da      	mvns	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	035b      	lsls	r3, r3, #13
 8002976:	4013      	ands	r3, r2
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43da      	mvns	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	039b      	lsls	r3, r3, #14
 80029a0:	4013      	ands	r3, r2
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	025b      	lsls	r3, r3, #9
 80029f4:	4013      	ands	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	40da      	lsrs	r2, r3
 8002a14:	1e13      	subs	r3, r2, #0
 8002a16:	d000      	beq.n	8002a1a <HAL_GPIO_Init+0x2c6>
 8002a18:	e6a8      	b.n	800276c <HAL_GPIO_Init+0x18>
  }
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b006      	add	sp, #24
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	50000400 	.word	0x50000400
 8002a30:	50000800 	.word	0x50000800
 8002a34:	50000c00 	.word	0x50000c00
 8002a38:	50001c00 	.word	0x50001c00
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002a56:	e0b6      	b.n	8002bc6 <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d100      	bne.n	8002a6c <HAL_GPIO_DeInit+0x2c>
 8002a6a:	e0a9      	b.n	8002bc0 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a6c:	4a5b      	ldr	r2, [pc, #364]	; (8002bdc <HAL_GPIO_DeInit+0x19c>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	589b      	ldr	r3, [r3, r2]
 8002a78:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	4013      	ands	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	220f      	movs	r2, #15
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	23a0      	movs	r3, #160	; 0xa0
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_DeInit+0x8a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a51      	ldr	r2, [pc, #324]	; (8002be0 <HAL_GPIO_DeInit+0x1a0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_DeInit+0x86>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a50      	ldr	r2, [pc, #320]	; (8002be4 <HAL_GPIO_DeInit+0x1a4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_DeInit+0x82>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4f      	ldr	r2, [pc, #316]	; (8002be8 <HAL_GPIO_DeInit+0x1a8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_DeInit+0x7e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4e      	ldr	r2, [pc, #312]	; (8002bec <HAL_GPIO_DeInit+0x1ac>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_DeInit+0x7a>
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_DeInit+0x8c>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_DeInit+0x8c>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_DeInit+0x8c>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_DeInit+0x8c>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_DeInit+0x8c>
 8002aca:	2300      	movs	r3, #0
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	2103      	movs	r1, #3
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d132      	bne.n	8002b42 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43d9      	mvns	r1, r3
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002af8:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43d9      	mvns	r1, r3
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_GPIO_DeInit+0x1b0>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2203      	movs	r2, #3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b24:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <HAL_GPIO_DeInit+0x19c>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	589a      	ldr	r2, [r3, r2]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	4829      	ldr	r0, [pc, #164]	; (8002bdc <HAL_GPIO_DeInit+0x19c>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4099      	lsls	r1, r3
 8002b4e:	000b      	movs	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	58d3      	ldr	r3, [r2, r3]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	2107      	movs	r1, #7
 8002b66:	400a      	ands	r2, r1
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	4091      	lsls	r1, r2
 8002b6e:	000a      	movs	r2, r1
 8002b70:	43d1      	mvns	r1, r2
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	08d2      	lsrs	r2, r2, #3
 8002b76:	4019      	ands	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	2103      	movs	r1, #3
 8002b8a:	4091      	lsls	r1, r2
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	43d2      	mvns	r2, r2
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4091      	lsls	r1, r2
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	43d2      	mvns	r2, r2
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	0052      	lsls	r2, r2, #1
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	4091      	lsls	r1, r2
 8002bb6:	000a      	movs	r2, r1
 8002bb8:	43d2      	mvns	r2, r2
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
    }
    position++;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	40da      	lsrs	r2, r3
 8002bcc:	1e13      	subs	r3, r2, #0
 8002bce:	d000      	beq.n	8002bd2 <HAL_GPIO_DeInit+0x192>
 8002bd0:	e742      	b.n	8002a58 <HAL_GPIO_DeInit+0x18>
  }
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b006      	add	sp, #24
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	50000400 	.word	0x50000400
 8002be4:	50000800 	.word	0x50000800
 8002be8:	50000c00 	.word	0x50000c00
 8002bec:	50001c00 	.word	0x50001c00
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	1cba      	adds	r2, r7, #2
 8002c08:	8812      	ldrh	r2, [r2, #0]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0e:	230f      	movs	r3, #15
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c18:	230f      	movs	r3, #15
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	0008      	movs	r0, r1
 8002c38:	0011      	movs	r1, r2
 8002c3a:	1cbb      	adds	r3, r7, #2
 8002c3c:	1c02      	adds	r2, r0, #0
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	1c7b      	adds	r3, r7, #1
 8002c42:	1c0a      	adds	r2, r1, #0
 8002c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c46:	1c7b      	adds	r3, r7, #1
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	1cbb      	adds	r3, r7, #2
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c56:	e003      	b.n	8002c60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c58:	1cbb      	adds	r3, r7, #2
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	0002      	movs	r2, r0
 8002c70:	1dbb      	adds	r3, r7, #6
 8002c72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	1dba      	adds	r2, r7, #6
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d008      	beq.n	8002c92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c82:	1dba      	adds	r2, r7, #6
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff f919 	bl	8001ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e082      	b.n	8002db8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2241      	movs	r2, #65	; 0x41
 8002cb6:	5c9b      	ldrb	r3, [r3, r2]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2240      	movs	r2, #64	; 0x40
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff fa05 	bl	80020d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2241      	movs	r2, #65	; 0x41
 8002cd2:	2124      	movs	r1, #36	; 0x24
 8002cd4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4934      	ldr	r1, [pc, #208]	; (8002dc0 <HAL_I2C_Init+0x120>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4931      	ldr	r1, [pc, #196]	; (8002dc4 <HAL_I2C_Init+0x124>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	0209      	lsls	r1, r1, #8
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e007      	b.n	8002d2e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2184      	movs	r1, #132	; 0x84
 8002d28:	0209      	lsls	r1, r1, #8
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d104      	bne.n	8002d40 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	491f      	ldr	r1, [pc, #124]	; (8002dc8 <HAL_I2C_Init+0x128>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	491a      	ldr	r1, [pc, #104]	; (8002dc4 <HAL_I2C_Init+0x124>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69d9      	ldr	r1, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2241      	movs	r2, #65	; 0x41
 8002da4:	2120      	movs	r1, #32
 8002da6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2242      	movs	r2, #66	; 0x42
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	f0ffffff 	.word	0xf0ffffff
 8002dc4:	ffff7fff 	.word	0xffff7fff
 8002dc8:	02008000 	.word	0x02008000

08002dcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e022      	b.n	8002e24 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2241      	movs	r2, #65	; 0x41
 8002de2:	2124      	movs	r1, #36	; 0x24
 8002de4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	438a      	bics	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff f9f5 	bl	80021e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2241      	movs	r2, #65	; 0x41
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2242      	movs	r2, #66	; 0x42
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	0008      	movs	r0, r1
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	0019      	movs	r1, r3
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	1c02      	adds	r2, r0, #0
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	2308      	movs	r3, #8
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	1c0a      	adds	r2, r1, #0
 8002e48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2241      	movs	r2, #65	; 0x41
 8002e4e:	5c9b      	ldrb	r3, [r3, r2]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d000      	beq.n	8002e58 <HAL_I2C_Master_Transmit+0x2c>
 8002e56:	e0e7      	b.n	8003028 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Master_Transmit+0x3a>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0e1      	b.n	800302a <HAL_I2C_Master_Transmit+0x1fe>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2240      	movs	r2, #64	; 0x40
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e6e:	f7ff fb03 	bl	8002478 <HAL_GetTick>
 8002e72:	0003      	movs	r3, r0
 8002e74:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	0219      	lsls	r1, r3, #8
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	f001 ff46 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0cc      	b.n	800302a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2241      	movs	r2, #65	; 0x41
 8002e94:	2121      	movs	r1, #33	; 0x21
 8002e96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2242      	movs	r2, #66	; 0x42
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	18ba      	adds	r2, r7, r2
 8002eb2:	8812      	ldrh	r2, [r2, #0]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2bff      	cmp	r3, #255	; 0xff
 8002ec4:	d911      	bls.n	8002eea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	22ff      	movs	r2, #255	; 0xff
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	045c      	lsls	r4, r3, #17
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	8819      	ldrh	r1, [r3, #0]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	4b55      	ldr	r3, [pc, #340]	; (8003034 <HAL_I2C_Master_Transmit+0x208>)
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	0023      	movs	r3, r4
 8002ee4:	f002 f8ee 	bl	80050c4 <I2C_TransferConfig>
 8002ee8:	e075      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	049c      	lsls	r4, r3, #18
 8002efe:	230a      	movs	r3, #10
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	8819      	ldrh	r1, [r3, #0]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_I2C_Master_Transmit+0x208>)
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	0023      	movs	r3, r4
 8002f0c:	f002 f8da 	bl	80050c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f10:	e061      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f001 ff49 	bl	8004db0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e081      	b.n	800302a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d03a      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0x1aa>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d136      	bne.n	8002fd6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	0013      	movs	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	f001 fecd 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e053      	b.n	800302a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d911      	bls.n	8002fb0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	045c      	lsls	r4, r3, #17
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	8819      	ldrh	r1, [r3, #0]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	0023      	movs	r3, r4
 8002faa:	f002 f88b 	bl	80050c4 <I2C_TransferConfig>
 8002fae:	e012      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	049c      	lsls	r4, r3, #18
 8002fc4:	230a      	movs	r3, #10
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	8819      	ldrh	r1, [r3, #0]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	0023      	movs	r3, r4
 8002fd2:	f002 f877 	bl	80050c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d198      	bne.n	8002f12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 ff28 	bl	8004e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01a      	b.n	800302a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	490c      	ldr	r1, [pc, #48]	; (8003038 <HAL_I2C_Master_Transmit+0x20c>)
 8003008:	400a      	ands	r2, r1
 800300a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2241      	movs	r2, #65	; 0x41
 8003010:	2120      	movs	r1, #32
 8003012:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2242      	movs	r2, #66	; 0x42
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2240      	movs	r2, #64	; 0x40
 8003020:	2100      	movs	r1, #0
 8003022:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b007      	add	sp, #28
 8003030:	bd90      	pop	{r4, r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	80002000 	.word	0x80002000
 8003038:	fe00e800 	.word	0xfe00e800

0800303c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	000c      	movs	r4, r1
 8003046:	0010      	movs	r0, r2
 8003048:	0019      	movs	r1, r3
 800304a:	230a      	movs	r3, #10
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	1c22      	adds	r2, r4, #0
 8003050:	801a      	strh	r2, [r3, #0]
 8003052:	2308      	movs	r3, #8
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	1c02      	adds	r2, r0, #0
 8003058:	801a      	strh	r2, [r3, #0]
 800305a:	1dbb      	adds	r3, r7, #6
 800305c:	1c0a      	adds	r2, r1, #0
 800305e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2241      	movs	r2, #65	; 0x41
 8003064:	5c9b      	ldrb	r3, [r3, r2]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b20      	cmp	r3, #32
 800306a:	d000      	beq.n	800306e <HAL_I2C_Mem_Write+0x32>
 800306c:	e10c      	b.n	8003288 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <HAL_I2C_Mem_Write+0x42>
 8003074:	232c      	movs	r3, #44	; 0x2c
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0ff      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	5c9b      	ldrb	r3, [r3, r2]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_Mem_Write+0x5c>
 8003094:	2302      	movs	r3, #2
 8003096:	e0f8      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	2101      	movs	r1, #1
 800309e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a0:	f7ff f9ea 	bl	8002478 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	0219      	lsls	r1, r3, #8
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2319      	movs	r3, #25
 80030b4:	2201      	movs	r2, #1
 80030b6:	f001 fe2d 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0e3      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2241      	movs	r2, #65	; 0x41
 80030c6:	2121      	movs	r1, #33	; 0x21
 80030c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2242      	movs	r2, #66	; 0x42
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	222c      	movs	r2, #44	; 0x2c
 80030e2:	18ba      	adds	r2, r7, r2
 80030e4:	8812      	ldrh	r2, [r2, #0]
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ee:	1dbb      	adds	r3, r7, #6
 80030f0:	881c      	ldrh	r4, [r3, #0]
 80030f2:	2308      	movs	r3, #8
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	230a      	movs	r3, #10
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	8819      	ldrh	r1, [r3, #0]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	0023      	movs	r3, r4
 800310a:	f001 f841 	bl	8004190 <I2C_RequestMemoryWrite>
 800310e:	1e03      	subs	r3, r0, #0
 8003110:	d005      	beq.n	800311e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0b5      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	2bff      	cmp	r3, #255	; 0xff
 8003126:	d911      	bls.n	800314c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	22ff      	movs	r2, #255	; 0xff
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	b2da      	uxtb	r2, r3
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	045c      	lsls	r4, r3, #17
 8003138:	230a      	movs	r3, #10
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	8819      	ldrh	r1, [r3, #0]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	0023      	movs	r3, r4
 8003146:	f001 ffbd 	bl	80050c4 <I2C_TransferConfig>
 800314a:	e012      	b.n	8003172 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	b2da      	uxtb	r2, r3
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	049c      	lsls	r4, r3, #18
 8003160:	230a      	movs	r3, #10
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	8819      	ldrh	r1, [r3, #0]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	2300      	movs	r3, #0
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	0023      	movs	r3, r4
 800316e:	f001 ffa9 	bl	80050c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	0018      	movs	r0, r3
 800317a:	f001 fe19 	bl	8004db0 <I2C_WaitOnTXISFlagUntilTimeout>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e081      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d03a      	beq.n	8003236 <HAL_I2C_Mem_Write+0x1fa>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d136      	bne.n	8003236 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	0013      	movs	r3, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	f001 fd9d 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80031da:	1e03      	subs	r3, r0, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e053      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2bff      	cmp	r3, #255	; 0xff
 80031ea:	d911      	bls.n	8003210 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	22ff      	movs	r2, #255	; 0xff
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	045c      	lsls	r4, r3, #17
 80031fc:	230a      	movs	r3, #10
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	8819      	ldrh	r1, [r3, #0]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	2300      	movs	r3, #0
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	0023      	movs	r3, r4
 800320a:	f001 ff5b 	bl	80050c4 <I2C_TransferConfig>
 800320e:	e012      	b.n	8003236 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	b2da      	uxtb	r2, r3
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	049c      	lsls	r4, r3, #18
 8003224:	230a      	movs	r3, #10
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	8819      	ldrh	r1, [r3, #0]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	2300      	movs	r3, #0
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	0023      	movs	r3, r4
 8003232:	f001 ff47 	bl	80050c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d198      	bne.n	8003172 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	0018      	movs	r0, r3
 8003248:	f001 fdf8 	bl	8004e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e01a      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2220      	movs	r2, #32
 800325a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_I2C_Mem_Write+0x258>)
 8003268:	400a      	ands	r2, r1
 800326a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2241      	movs	r2, #65	; 0x41
 8003270:	2120      	movs	r1, #32
 8003272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2242      	movs	r2, #66	; 0x42
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b007      	add	sp, #28
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	fe00e800 	.word	0xfe00e800

08003298 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	000c      	movs	r4, r1
 80032a2:	0010      	movs	r0, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	230a      	movs	r3, #10
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	1c22      	adds	r2, r4, #0
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	2308      	movs	r3, #8
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	1c02      	adds	r2, r0, #0
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	1dbb      	adds	r3, r7, #6
 80032b8:	1c0a      	adds	r2, r1, #0
 80032ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2241      	movs	r2, #65	; 0x41
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d000      	beq.n	80032ca <HAL_I2C_Mem_Read+0x32>
 80032c8:	e110      	b.n	80034ec <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <HAL_I2C_Mem_Read+0x42>
 80032d0:	232c      	movs	r3, #44	; 0x2c
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e103      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_Mem_Read+0x5c>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0fc      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	2101      	movs	r1, #1
 80032fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032fc:	f7ff f8bc 	bl	8002478 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	0219      	lsls	r1, r3, #8
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2319      	movs	r3, #25
 8003310:	2201      	movs	r2, #1
 8003312:	f001 fcff 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0e7      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2241      	movs	r2, #65	; 0x41
 8003322:	2122      	movs	r1, #34	; 0x22
 8003324:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2242      	movs	r2, #66	; 0x42
 800332a:	2140      	movs	r1, #64	; 0x40
 800332c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	222c      	movs	r2, #44	; 0x2c
 800333e:	18ba      	adds	r2, r7, r2
 8003340:	8812      	ldrh	r2, [r2, #0]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800334a:	1dbb      	adds	r3, r7, #6
 800334c:	881c      	ldrh	r4, [r3, #0]
 800334e:	2308      	movs	r3, #8
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	230a      	movs	r3, #10
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	8819      	ldrh	r1, [r3, #0]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	0023      	movs	r3, r4
 8003366:	f000 ff77 	bl	8004258 <I2C_RequestMemoryRead>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d005      	beq.n	800337a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2240      	movs	r2, #64	; 0x40
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0b9      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	2bff      	cmp	r3, #255	; 0xff
 8003382:	d911      	bls.n	80033a8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	b2da      	uxtb	r2, r3
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	045c      	lsls	r4, r3, #17
 8003394:	230a      	movs	r3, #10
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	8819      	ldrh	r1, [r3, #0]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	4b56      	ldr	r3, [pc, #344]	; (80034f8 <HAL_I2C_Mem_Read+0x260>)
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	0023      	movs	r3, r4
 80033a2:	f001 fe8f 	bl	80050c4 <I2C_TransferConfig>
 80033a6:	e012      	b.n	80033ce <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	049c      	lsls	r4, r3, #18
 80033bc:	230a      	movs	r3, #10
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	8819      	ldrh	r1, [r3, #0]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <HAL_I2C_Mem_Read+0x260>)
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	0023      	movs	r3, r4
 80033ca:	f001 fe7b 	bl	80050c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	0013      	movs	r3, r2
 80033d8:	2200      	movs	r2, #0
 80033da:	2104      	movs	r1, #4
 80033dc:	f001 fc9a 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e082      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d03a      	beq.n	800349a <HAL_I2C_Mem_Read+0x202>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d136      	bne.n	800349a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	0013      	movs	r3, r2
 8003436:	2200      	movs	r2, #0
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	f001 fc6b 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e053      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	2bff      	cmp	r3, #255	; 0xff
 800344e:	d911      	bls.n	8003474 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	b2da      	uxtb	r2, r3
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	045c      	lsls	r4, r3, #17
 8003460:	230a      	movs	r3, #10
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	8819      	ldrh	r1, [r3, #0]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	2300      	movs	r3, #0
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	0023      	movs	r3, r4
 800346e:	f001 fe29 	bl	80050c4 <I2C_TransferConfig>
 8003472:	e012      	b.n	800349a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	b2da      	uxtb	r2, r3
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	049c      	lsls	r4, r3, #18
 8003488:	230a      	movs	r3, #10
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	8819      	ldrh	r1, [r3, #0]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	0023      	movs	r3, r4
 8003496:	f001 fe15 	bl	80050c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d194      	bne.n	80033ce <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f001 fcc6 	bl	8004e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e01a      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2220      	movs	r2, #32
 80034be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	490c      	ldr	r1, [pc, #48]	; (80034fc <HAL_I2C_Mem_Read+0x264>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2241      	movs	r2, #65	; 0x41
 80034d4:	2120      	movs	r1, #32
 80034d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2242      	movs	r2, #66	; 0x42
 80034dc:	2100      	movs	r1, #0
 80034de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b007      	add	sp, #28
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	80002400 	.word	0x80002400
 80034fc:	fe00e800 	.word	0xfe00e800

08003500 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	1dbb      	adds	r3, r7, #6
 800350e:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2241      	movs	r2, #65	; 0x41
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	001a      	movs	r2, r3
 800351a:	2328      	movs	r3, #40	; 0x28
 800351c:	4013      	ands	r3, r2
 800351e:	2b28      	cmp	r3, #40	; 0x28
 8003520:	d000      	beq.n	8003524 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8003522:	e09f      	b.n	8003664 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 800352a:	1dbb      	adds	r3, r7, #6
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e093      	b.n	8003666 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800353e:	4a4c      	ldr	r2, [pc, #304]	; (8003670 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	0011      	movs	r1, r2
 8003544:	0018      	movs	r0, r3
 8003546:	f001 fe85 	bl	8005254 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	5c9b      	ldrb	r3, [r3, r2]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8003554:	2302      	movs	r3, #2
 8003556:	e086      	b.n	8003666 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	2101      	movs	r1, #1
 800355e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2241      	movs	r2, #65	; 0x41
 8003564:	5c9b      	ldrb	r3, [r3, r2]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b2a      	cmp	r3, #42	; 0x2a
 800356a:	d12c      	bne.n	80035c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2102      	movs	r1, #2
 8003570:	0018      	movs	r0, r3
 8003572:	f001 fe6f 	bl	8005254 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	401a      	ands	r2, r3
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	429a      	cmp	r2, r3
 8003588:	d11d      	bne.n	80035c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4937      	ldr	r1, [pc, #220]	; (8003674 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d011      	beq.n	80035c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7ff f87c 	bl	80026ac <HAL_DMA_Abort_IT>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	0018      	movs	r0, r3
 80035c4:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2241      	movs	r2, #65	; 0x41
 80035ca:	2129      	movs	r1, #41	; 0x29
 80035cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2242      	movs	r2, #66	; 0x42
 80035d2:	2120      	movs	r1, #32
 80035d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4923      	ldr	r1, [pc, #140]	; (8003674 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1dba      	adds	r2, r7, #6
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 800360e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2208      	movs	r2, #8
 8003618:	4013      	ands	r3, r2
 800361a:	3b08      	subs	r3, #8
 800361c:	425a      	negs	r2, r3
 800361e:	4153      	adcs	r3, r2
 8003620:	b2da      	uxtb	r2, r3
 8003622:	2117      	movs	r1, #23
 8003624:	187b      	adds	r3, r7, r1
 8003626:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2201      	movs	r2, #1
 8003634:	4013      	ands	r3, r2
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 800363c:	187b      	adds	r3, r7, r1
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003654:	4a06      	ldr	r2, [pc, #24]	; (8003670 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	0011      	movs	r1, r2
 800365a:	0018      	movs	r0, r3
 800365c:	f001 fd6c 	bl	8005138 <I2C_Enable_IRQ>

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
  }
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b006      	add	sp, #24
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	00008001 	.word	0x00008001
 8003674:	ffff7fff 	.word	0xffff7fff
 8003678:	08004cd7 	.word	0x08004cd7
 800367c:	08003995 	.word	0x08003995

08003680 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	1dbb      	adds	r3, r7, #6
 800368e:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2241      	movs	r2, #65	; 0x41
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	001a      	movs	r2, r3
 800369a:	2328      	movs	r3, #40	; 0x28
 800369c:	4013      	ands	r3, r2
 800369e:	2b28      	cmp	r3, #40	; 0x28
 80036a0:	d000      	beq.n	80036a4 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80036a2:	e09f      	b.n	80037e4 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80036aa:	1dbb      	adds	r3, r7, #6
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e093      	b.n	80037e6 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80036be:	4a4c      	ldr	r2, [pc, #304]	; (80037f0 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f001 fdc5 	bl	8005254 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e086      	b.n	80037e6 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	2101      	movs	r1, #1
 80036de:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2241      	movs	r2, #65	; 0x41
 80036e4:	5c9b      	ldrb	r3, [r3, r2]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b29      	cmp	r3, #41	; 0x29
 80036ea:	d12c      	bne.n	8003746 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2101      	movs	r1, #1
 80036f0:	0018      	movs	r0, r3
 80036f2:	f001 fdaf 	bl	8005254 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	401a      	ands	r2, r3
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	01db      	lsls	r3, r3, #7
 8003706:	429a      	cmp	r2, r3
 8003708:	d11d      	bne.n	8003746 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4937      	ldr	r1, [pc, #220]	; (80037f4 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 8003716:	400a      	ands	r2, r1
 8003718:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d011      	beq.n	8003746 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8003728:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	0018      	movs	r0, r3
 8003730:	f7fe ffbc 	bl	80026ac <HAL_DMA_Abort_IT>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d006      	beq.n	8003746 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	0018      	movs	r0, r3
 8003744:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2241      	movs	r2, #65	; 0x41
 800374a:	212a      	movs	r1, #42	; 0x2a
 800374c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2242      	movs	r2, #66	; 0x42
 8003752:	2120      	movs	r1, #32
 8003754:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4925      	ldr	r1, [pc, #148]	; (80037fc <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8003768:	400a      	ands	r2, r1
 800376a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1dba      	adds	r2, r7, #6
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2208      	movs	r2, #8
 8003798:	4013      	ands	r3, r2
 800379a:	3b08      	subs	r3, #8
 800379c:	425a      	negs	r2, r3
 800379e:	4153      	adcs	r3, r2
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	2117      	movs	r1, #23
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2201      	movs	r2, #1
 80037b4:	4013      	ands	r3, r2
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2208      	movs	r2, #8
 80037ca:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80037d4:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0011      	movs	r1, r2
 80037da:	0018      	movs	r0, r3
 80037dc:	f001 fcac 	bl	8005138 <I2C_Enable_IRQ>

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
  }
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b006      	add	sp, #24
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	00008002 	.word	0x00008002
 80037f4:	ffffbfff 	.word	0xffffbfff
 80037f8:	08004cd7 	.word	0x08004cd7
 80037fc:	ffff7fff 	.word	0xffff7fff
 8003800:	08003995 	.word	0x08003995

08003804 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2241      	movs	r2, #65	; 0x41
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d10f      	bne.n	8003838 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2241      	movs	r2, #65	; 0x41
 800381c:	2128      	movs	r1, #40	; 0x28
 800381e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_I2C_EnableListen_IT+0x40>)
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f001 fc82 	bl	8005138 <I2C_Enable_IRQ>

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	08003995 	.word	0x08003995

08003848 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
  }
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4013      	ands	r3, r2
 800389c:	d00e      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038a4:	d00a      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	2201      	movs	r2, #1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	0052      	lsls	r2, r2, #1
 80038ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4013      	ands	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038cc:	d00a      	beq.n	80038e4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	2208      	movs	r2, #8
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	00d2      	lsls	r2, r2, #3
 80038e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038f4:	d00a      	beq.n	800390c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	2202      	movs	r2, #2
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	220b      	movs	r2, #11
 8003916:	4013      	ands	r3, r2
 8003918:	d005      	beq.n	8003926 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f001 f88b 	bl	8004a3c <I2C_ITError>
  }
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b002      	add	sp, #8
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <I2C_Slave_ISR_IT+0x24>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0e6      	b.n	8003b86 <I2C_Slave_ISR_IT+0x1f2>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	2101      	movs	r1, #1
 80039be:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2220      	movs	r2, #32
 80039c4:	4013      	ands	r3, r2
 80039c6:	d009      	beq.n	80039dc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039ce:	d005      	beq.n	80039dc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	0011      	movs	r1, r2
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 feb8 	bl	800474c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2210      	movs	r2, #16
 80039e0:	4013      	ands	r3, r2
 80039e2:	d052      	beq.n	8003a8a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2210      	movs	r2, #16
 80039e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039ea:	d04e      	beq.n	8003a8a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d12d      	bne.n	8003a52 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2241      	movs	r2, #65	; 0x41
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b28      	cmp	r3, #40	; 0x28
 8003a00:	d10b      	bne.n	8003a1a <I2C_Slave_ISR_IT+0x86>
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	049b      	lsls	r3, r3, #18
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d106      	bne.n	8003a1a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	0011      	movs	r1, r2
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 ffba 	bl	800498c <I2C_ITListenCplt>
 8003a18:	e036      	b.n	8003a88 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2241      	movs	r2, #65	; 0x41
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b29      	cmp	r3, #41	; 0x29
 8003a24:	d110      	bne.n	8003a48 <I2C_Slave_ISR_IT+0xb4>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	4a59      	ldr	r2, [pc, #356]	; (8003b90 <I2C_Slave_ISR_IT+0x1fc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00c      	beq.n	8003a48 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2210      	movs	r2, #16
 8003a34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f001 f92a 	bl	8004c92 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 fd51 	bl	80044e8 <I2C_ITSlaveSeqCplt>
 8003a46:	e01f      	b.n	8003a88 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a50:	e091      	b.n	8003b76 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2210      	movs	r2, #16
 8003a58:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	2204      	movs	r2, #4
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <I2C_Slave_ISR_IT+0xe4>
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	045b      	lsls	r3, r3, #17
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d000      	beq.n	8003a78 <I2C_Slave_ISR_IT+0xe4>
 8003a76:	e07e      	b.n	8003b76 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 ffdb 	bl	8004a3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a86:	e076      	b.n	8003b76 <I2C_Slave_ISR_IT+0x1e2>
 8003a88:	e075      	b.n	8003b76 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d02f      	beq.n	8003af2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2204      	movs	r2, #4
 8003a96:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a98:	d02b      	beq.n	8003af2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d14c      	bne.n	8003b7a <I2C_Slave_ISR_IT+0x1e6>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <I2C_Slave_ISR_IT+0x1fc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d048      	beq.n	8003b7a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fcfc 	bl	80044e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003af0:	e043      	b.n	8003b7a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4013      	ands	r3, r2
 8003af8:	d00a      	beq.n	8003b10 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2208      	movs	r2, #8
 8003afe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b00:	d006      	beq.n	8003b10 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 fc07 	bl	800431c <I2C_ITAddrCplt>
 8003b0e:	e035      	b.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d031      	beq.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b1e:	d02d      	beq.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
 8003b5a:	e00f      	b.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	045b      	lsls	r3, r3, #17
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d002      	beq.n	8003b6c <I2C_Slave_ISR_IT+0x1d8>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fcba 	bl	80044e8 <I2C_ITSlaveSeqCplt>
 8003b74:	e002      	b.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	e000      	b.n	8003b7c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8003b7a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2240      	movs	r2, #64	; 0x40
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b089      	sub	sp, #36	; 0x24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2240      	movs	r2, #64	; 0x40
 8003ba4:	5c9b      	ldrb	r3, [r3, r2]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <I2C_Master_ISR_DMA+0x1a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0e7      	b.n	8003d7e <I2C_Master_ISR_DMA+0x1ea>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d017      	beq.n	8003bee <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bc4:	d013      	beq.n	8003bee <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2210      	movs	r2, #16
 8003bcc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2120      	movs	r1, #32
 8003bde:	0018      	movs	r0, r3
 8003be0:	f001 faaa 	bl	8005138 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f001 f853 	bl	8004c92 <I2C_Flush_TXDR>
 8003bec:	e0c2      	b.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d100      	bne.n	8003bf8 <I2C_Master_ISR_DMA+0x64>
 8003bf6:	e07c      	b.n	8003cf2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003bfe:	d100      	bne.n	8003c02 <I2C_Master_ISR_DMA+0x6e>
 8003c00:	e077      	b.n	8003cf2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	438a      	bics	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d055      	beq.n	8003cc8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	2312      	movs	r3, #18
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	0592      	lsls	r2, r2, #22
 8003c2a:	0d92      	lsrs	r2, r2, #22
 8003c2c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2bff      	cmp	r3, #255	; 0xff
 8003c36:	d906      	bls.n	8003c46 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	045b      	lsls	r3, r3, #17
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e010      	b.n	8003c68 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <I2C_Master_ISR_DMA+0x1f4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e002      	b.n	8003c68 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	049b      	lsls	r3, r3, #18
 8003c66:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	697c      	ldr	r4, [r7, #20]
 8003c70:	2312      	movs	r3, #18
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	8819      	ldrh	r1, [r3, #0]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	0023      	movs	r3, r4
 8003c7e:	f001 fa21 	bl	80050c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2241      	movs	r2, #65	; 0x41
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	; 0x22
 8003c9e:	d109      	bne.n	8003cb4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	0209      	lsls	r1, r1, #8
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003cb2:	e05f      	b.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	01c9      	lsls	r1, r1, #7
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003cc6:	e055      	b.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	049b      	lsls	r3, r3, #18
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	049b      	lsls	r3, r3, #18
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d004      	beq.n	8003ce6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 fbc0 	bl	8004464 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003ce4:	e046      	b.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2140      	movs	r1, #64	; 0x40
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fea6 	bl	8004a3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003cf0:	e040      	b.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d02c      	beq.n	8003d54 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d00:	d028      	beq.n	8003d54 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11d      	bne.n	8003d48 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	049b      	lsls	r3, r3, #18
 8003d16:	401a      	ands	r2, r3
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	049b      	lsls	r3, r3, #18
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d028      	beq.n	8003d72 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <I2C_Master_ISR_DMA+0x1f4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d109      	bne.n	8003d3e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	01c9      	lsls	r1, r1, #7
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003d3c:	e019      	b.n	8003d72 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 fb8f 	bl	8004464 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003d46:	e014      	b.n	8003d72 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fe75 	bl	8004a3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d52:	e00e      	b.n	8003d72 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2220      	movs	r2, #32
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d62:	d007      	beq.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0011      	movs	r1, r2
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f000 fc20 	bl	80045b0 <I2C_ITMasterCplt>
 8003d70:	e000      	b.n	8003d74 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8003d72:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b007      	add	sp, #28
 8003d84:	bd90      	pop	{r4, r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003d98:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <I2C_Mem_ISR_DMA+0x230>)
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <I2C_Mem_ISR_DMA+0x1e>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e104      	b.n	8003fb4 <I2C_Mem_ISR_DMA+0x228>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2210      	movs	r2, #16
 8003db6:	4013      	ands	r3, r2
 8003db8:	d017      	beq.n	8003dea <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003dc0:	d013      	beq.n	8003dea <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	2204      	movs	r2, #4
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2120      	movs	r1, #32
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f001 f9ac 	bl	8005138 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 ff55 	bl	8004c92 <I2C_Flush_TXDR>
 8003de8:	e0df      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2202      	movs	r2, #2
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00d      	beq.n	8003e0e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003df8:	d009      	beq.n	8003e0e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	4252      	negs	r2, r2
 8003e0a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e0c:	e0cd      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	4013      	ands	r3, r2
 8003e14:	d05e      	beq.n	8003ed4 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2240      	movs	r2, #64	; 0x40
 8003e1a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e1c:	d05a      	beq.n	8003ed4 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2110      	movs	r1, #16
 8003e22:	0018      	movs	r0, r3
 8003e24:	f001 f988 	bl	8005138 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04a      	beq.n	8003ec8 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2bff      	cmp	r3, #255	; 0xff
 8003e3a:	d910      	bls.n	8003e5e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	22ff      	movs	r2, #255	; 0xff
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	b299      	uxth	r1, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	045b      	lsls	r3, r3, #17
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	2400      	movs	r4, #0
 8003e56:	9400      	str	r4, [sp, #0]
 8003e58:	f001 f934 	bl	80050c4 <I2C_TransferConfig>
 8003e5c:	e011      	b.n	8003e82 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6c:	b299      	uxth	r1, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	049b      	lsls	r3, r3, #18
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	2400      	movs	r4, #0
 8003e7c:	9400      	str	r4, [sp, #0]
 8003e7e:	f001 f921 	bl	80050c4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2241      	movs	r2, #65	; 0x41
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b22      	cmp	r3, #34	; 0x22
 8003e9e:	d109      	bne.n	8003eb4 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	0209      	lsls	r1, r1, #8
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003eb2:	e07a      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	01c9      	lsls	r1, r1, #7
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ec6:	e070      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2140      	movs	r1, #64	; 0x40
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 fdb5 	bl	8004a3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003ed2:	e06a      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d058      	beq.n	8003f8e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ee2:	d054      	beq.n	8003f8e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2241      	movs	r2, #65	; 0x41
 8003ee8:	5c9b      	ldrb	r3, [r3, r2]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b22      	cmp	r3, #34	; 0x22
 8003eee:	d101      	bne.n	8003ef4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8003ef0:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <I2C_Mem_ISR_DMA+0x234>)
 8003ef2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2bff      	cmp	r3, #255	; 0xff
 8003efc:	d911      	bls.n	8003f22 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	22ff      	movs	r2, #255	; 0xff
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	b299      	uxth	r1, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	045c      	lsls	r4, r3, #17
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	0023      	movs	r3, r4
 8003f1c:	f001 f8d2 	bl	80050c4 <I2C_TransferConfig>
 8003f20:	e012      	b.n	8003f48 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	b299      	uxth	r1, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	049c      	lsls	r4, r3, #18
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	0023      	movs	r3, r4
 8003f44:	f001 f8be 	bl	80050c4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2241      	movs	r2, #65	; 0x41
 8003f5e:	5c9b      	ldrb	r3, [r3, r2]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b22      	cmp	r3, #34	; 0x22
 8003f64:	d109      	bne.n	8003f7a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0209      	lsls	r1, r1, #8
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f78:	e017      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	01c9      	lsls	r1, r1, #7
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f8c:	e00d      	b.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2220      	movs	r2, #32
 8003f92:	4013      	ands	r3, r2
 8003f94:	d009      	beq.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f9c:	d005      	beq.n	8003faa <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 fb03 	bl	80045b0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2240      	movs	r2, #64	; 0x40
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b007      	add	sp, #28
 8003fba:	bd90      	pop	{r4, r7, pc}
 8003fbc:	80002000 	.word	0x80002000
 8003fc0:	80002400 	.word	0x80002400

08003fc4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2240      	movs	r2, #64	; 0x40
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <I2C_Slave_ISR_DMA+0x24>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e0cd      	b.n	8004184 <I2C_Slave_ISR_DMA+0x1c0>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	2101      	movs	r1, #1
 8003fee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d009      	beq.n	800400c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ffe:	d005      	beq.n	800400c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fba0 	bl	800474c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2210      	movs	r2, #16
 8004010:	4013      	ands	r3, r2
 8004012:	d100      	bne.n	8004016 <I2C_Slave_ISR_DMA+0x52>
 8004014:	e0a3      	b.n	800415e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2210      	movs	r2, #16
 800401a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800401c:	d100      	bne.n	8004020 <I2C_Slave_ISR_DMA+0x5c>
 800401e:	e09e      	b.n	800415e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	01db      	lsls	r3, r3, #7
 8004026:	4013      	ands	r3, r2
 8004028:	d105      	bne.n	8004036 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004032:	d100      	bne.n	8004036 <I2C_Slave_ISR_DMA+0x72>
 8004034:	e08c      	b.n	8004150 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	4013      	ands	r3, r2
 8004046:	d007      	beq.n	8004058 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8004054:	2301      	movs	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4013      	ands	r3, r2
 8004068:	d007      	beq.n	800407a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12d      	bne.n	80040dc <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2241      	movs	r2, #65	; 0x41
 8004084:	5c9b      	ldrb	r3, [r3, r2]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b28      	cmp	r3, #40	; 0x28
 800408a:	d10b      	bne.n	80040a4 <I2C_Slave_ISR_DMA+0xe0>
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	049b      	lsls	r3, r3, #18
 8004092:	429a      	cmp	r2, r3
 8004094:	d106      	bne.n	80040a4 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	0011      	movs	r1, r2
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fc75 	bl	800498c <I2C_ITListenCplt>
 80040a2:	e054      	b.n	800414e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2241      	movs	r2, #65	; 0x41
 80040a8:	5c9b      	ldrb	r3, [r3, r2]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b29      	cmp	r3, #41	; 0x29
 80040ae:	d110      	bne.n	80040d2 <I2C_Slave_ISR_DMA+0x10e>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4a36      	ldr	r2, [pc, #216]	; (800418c <I2C_Slave_ISR_DMA+0x1c8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00c      	beq.n	80040d2 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2210      	movs	r2, #16
 80040be:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	0018      	movs	r0, r3
 80040c4:	f000 fde5 	bl	8004c92 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 fa0c 	bl	80044e8 <I2C_ITSlaveSeqCplt>
 80040d0:	e03d      	b.n	800414e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2210      	movs	r2, #16
 80040d8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80040da:	e03e      	b.n	800415a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	2204      	movs	r2, #4
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80040f0:	2317      	movs	r3, #23
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	2141      	movs	r1, #65	; 0x41
 80040f8:	5c52      	ldrb	r2, [r2, r1]
 80040fa:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <I2C_Slave_ISR_DMA+0x148>
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	045b      	lsls	r3, r3, #17
 8004108:	429a      	cmp	r2, r3
 800410a:	d126      	bne.n	800415a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800410c:	2217      	movs	r2, #23
 800410e:	18bb      	adds	r3, r7, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d003      	beq.n	800411e <I2C_Slave_ISR_DMA+0x15a>
 8004116:	18bb      	adds	r3, r7, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b29      	cmp	r3, #41	; 0x29
 800411c:	d103      	bne.n	8004126 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2221      	movs	r2, #33	; 0x21
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
 8004124:	e00b      	b.n	800413e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004126:	2217      	movs	r2, #23
 8004128:	18bb      	adds	r3, r7, r2
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b22      	cmp	r3, #34	; 0x22
 800412e:	d003      	beq.n	8004138 <I2C_Slave_ISR_DMA+0x174>
 8004130:	18bb      	adds	r3, r7, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b2a      	cmp	r3, #42	; 0x2a
 8004136:	d102      	bne.n	800413e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2222      	movs	r2, #34	; 0x22
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	0011      	movs	r1, r2
 8004146:	0018      	movs	r0, r3
 8004148:	f000 fc78 	bl	8004a3c <I2C_ITError>
      if (treatdmanack == 1U)
 800414c:	e005      	b.n	800415a <I2C_Slave_ISR_DMA+0x196>
 800414e:	e004      	b.n	800415a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004158:	e00f      	b.n	800417a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800415a:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800415c:	e00d      	b.n	800417a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2208      	movs	r2, #8
 8004162:	4013      	ands	r3, r2
 8004164:	d009      	beq.n	800417a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2208      	movs	r2, #8
 800416a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800416c:	d005      	beq.n	800417a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f000 f8d1 	bl	800431c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	2100      	movs	r1, #0
 8004180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b008      	add	sp, #32
 800418a:	bd80      	pop	{r7, pc}
 800418c:	ffff0000 	.word	0xffff0000

08004190 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004190:	b5b0      	push	{r4, r5, r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	000c      	movs	r4, r1
 800419a:	0010      	movs	r0, r2
 800419c:	0019      	movs	r1, r3
 800419e:	250a      	movs	r5, #10
 80041a0:	197b      	adds	r3, r7, r5
 80041a2:	1c22      	adds	r2, r4, #0
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	2308      	movs	r3, #8
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	1c02      	adds	r2, r0, #0
 80041ac:	801a      	strh	r2, [r3, #0]
 80041ae:	1dbb      	adds	r3, r7, #6
 80041b0:	1c0a      	adds	r2, r1, #0
 80041b2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041b4:	1dbb      	adds	r3, r7, #6
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	045c      	lsls	r4, r3, #17
 80041be:	197b      	adds	r3, r7, r5
 80041c0:	8819      	ldrh	r1, [r3, #0]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <I2C_RequestMemoryWrite+0xc4>)
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	0023      	movs	r3, r4
 80041ca:	f000 ff7b 	bl	80050c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	6a39      	ldr	r1, [r7, #32]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 fdeb 	bl	8004db0 <I2C_WaitOnTXISFlagUntilTimeout>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e033      	b.n	800424a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041e2:	1dbb      	adds	r3, r7, #6
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ea:	2308      	movs	r3, #8
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
 80041f8:	e019      	b.n	800422e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041fa:	2308      	movs	r3, #8
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	b29b      	uxth	r3, r3
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	6a39      	ldr	r1, [r7, #32]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	0018      	movs	r0, r3
 8004214:	f000 fdcc 	bl	8004db0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d001      	beq.n	8004220 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e014      	b.n	800424a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004220:	2308      	movs	r3, #8
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	0013      	movs	r3, r2
 8004238:	2200      	movs	r2, #0
 800423a:	2180      	movs	r1, #128	; 0x80
 800423c:	f000 fd6a 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d001      	beq.n	8004248 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bdb0      	pop	{r4, r5, r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	80002000 	.word	0x80002000

08004258 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	000c      	movs	r4, r1
 8004262:	0010      	movs	r0, r2
 8004264:	0019      	movs	r1, r3
 8004266:	250a      	movs	r5, #10
 8004268:	197b      	adds	r3, r7, r5
 800426a:	1c22      	adds	r2, r4, #0
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	2308      	movs	r3, #8
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	1c02      	adds	r2, r0, #0
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	1dbb      	adds	r3, r7, #6
 8004278:	1c0a      	adds	r2, r1, #0
 800427a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800427c:	1dbb      	adds	r3, r7, #6
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	197b      	adds	r3, r7, r5
 8004284:	8819      	ldrh	r1, [r3, #0]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	4b23      	ldr	r3, [pc, #140]	; (8004318 <I2C_RequestMemoryRead+0xc0>)
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2300      	movs	r3, #0
 800428e:	f000 ff19 	bl	80050c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	6a39      	ldr	r1, [r7, #32]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 fd89 	bl	8004db0 <I2C_WaitOnTXISFlagUntilTimeout>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e033      	b.n	800430e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a6:	1dbb      	adds	r3, r7, #6
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d107      	bne.n	80042be <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ae:	2308      	movs	r3, #8
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
 80042bc:	e019      	b.n	80042f2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042be:	2308      	movs	r3, #8
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	6a39      	ldr	r1, [r7, #32]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 fd6a 	bl	8004db0 <I2C_WaitOnTXISFlagUntilTimeout>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e014      	b.n	800430e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042e4:	2308      	movs	r3, #8
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	0013      	movs	r3, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	f000 fd08 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d001      	beq.n	800430c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bdb0      	pop	{r4, r5, r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	80002000 	.word	0x80002000

0800431c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800431c:	b5b0      	push	{r4, r5, r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2241      	movs	r2, #65	; 0x41
 800432a:	5c9b      	ldrb	r3, [r3, r2]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	001a      	movs	r2, r3
 8004330:	2328      	movs	r3, #40	; 0x28
 8004332:	4013      	ands	r3, r2
 8004334:	2b28      	cmp	r3, #40	; 0x28
 8004336:	d000      	beq.n	800433a <I2C_ITAddrCplt+0x1e>
 8004338:	e088      	b.n	800444c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2da      	uxtb	r2, r3
 8004344:	250f      	movs	r5, #15
 8004346:	197b      	adds	r3, r7, r5
 8004348:	2101      	movs	r1, #1
 800434a:	400a      	ands	r2, r1
 800434c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	b29a      	uxth	r2, r3
 8004358:	200c      	movs	r0, #12
 800435a:	183b      	adds	r3, r7, r0
 800435c:	21fe      	movs	r1, #254	; 0xfe
 800435e:	400a      	ands	r2, r1
 8004360:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	b29a      	uxth	r2, r3
 800436a:	240a      	movs	r4, #10
 800436c:	193b      	adds	r3, r7, r4
 800436e:	0592      	lsls	r2, r2, #22
 8004370:	0d92      	lsrs	r2, r2, #22
 8004372:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	b29a      	uxth	r2, r3
 800437c:	2308      	movs	r3, #8
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	21fe      	movs	r1, #254	; 0xfe
 8004382:	400a      	ands	r2, r1
 8004384:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d148      	bne.n	8004420 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800438e:	0021      	movs	r1, r4
 8004390:	187b      	adds	r3, r7, r1
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	09db      	lsrs	r3, r3, #7
 8004396:	b29a      	uxth	r2, r3
 8004398:	183b      	adds	r3, r7, r0
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	4053      	eors	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	001a      	movs	r2, r3
 80043a2:	2306      	movs	r3, #6
 80043a4:	4013      	ands	r3, r2
 80043a6:	d120      	bne.n	80043ea <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	187a      	adds	r2, r7, r1
 80043ac:	8812      	ldrh	r2, [r2, #0]
 80043ae:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d14c      	bne.n	800445c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2208      	movs	r2, #8
 80043ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	2100      	movs	r1, #0
 80043d6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043d8:	183b      	adds	r3, r7, r0
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	197b      	adds	r3, r7, r5
 80043de:	7819      	ldrb	r1, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7fd fcc0 	bl	8001d68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043e8:	e038      	b.n	800445c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80043ea:	240c      	movs	r4, #12
 80043ec:	193b      	adds	r3, r7, r4
 80043ee:	2208      	movs	r2, #8
 80043f0:	18ba      	adds	r2, r7, r2
 80043f2:	8812      	ldrh	r2, [r2, #0]
 80043f4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 ff28 	bl	8005254 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800440c:	193b      	adds	r3, r7, r4
 800440e:	881a      	ldrh	r2, [r3, #0]
 8004410:	230f      	movs	r3, #15
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	7819      	ldrb	r1, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fd fca5 	bl	8001d68 <HAL_I2C_AddrCallback>
}
 800441e:	e01d      	b.n	800445c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	021a      	lsls	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0011      	movs	r1, r2
 8004428:	0018      	movs	r0, r3
 800442a:	f000 ff13 	bl	8005254 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004436:	230c      	movs	r3, #12
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	230f      	movs	r3, #15
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	7819      	ldrb	r1, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f7fd fc8f 	bl	8001d68 <HAL_I2C_AddrCallback>
}
 800444a:	e007      	b.n	800445c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2208      	movs	r2, #8
 8004452:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b004      	add	sp, #16
 8004462:	bdb0      	pop	{r4, r5, r7, pc}

08004464 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2242      	movs	r2, #66	; 0x42
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2241      	movs	r2, #65	; 0x41
 8004478:	5c9b      	ldrb	r3, [r3, r2]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b21      	cmp	r3, #33	; 0x21
 800447e:	d117      	bne.n	80044b0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2241      	movs	r2, #65	; 0x41
 8004484:	2120      	movs	r1, #32
 8004486:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2211      	movs	r2, #17
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2101      	movs	r1, #1
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fedb 	bl	8005254 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2240      	movs	r2, #64	; 0x40
 80044a2:	2100      	movs	r1, #0
 80044a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7ff fa40 	bl	800392e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044ae:	e016      	b.n	80044de <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2241      	movs	r2, #65	; 0x41
 80044b4:	2120      	movs	r1, #32
 80044b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2212      	movs	r2, #18
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2102      	movs	r1, #2
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fec3 	bl	8005254 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2240      	movs	r2, #64	; 0x40
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fa30 	bl	800393e <HAL_I2C_MasterRxCpltCallback>
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2242      	movs	r2, #66	; 0x42
 80044fc:	2100      	movs	r1, #0
 80044fe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	01db      	lsls	r3, r3, #7
 8004506:	4013      	ands	r3, r2
 8004508:	d008      	beq.n	800451c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4924      	ldr	r1, [pc, #144]	; (80045a8 <I2C_ITSlaveSeqCplt+0xc0>)
 8004516:	400a      	ands	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e00c      	b.n	8004536 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	4013      	ands	r3, r2
 8004524:	d007      	beq.n	8004536 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	491e      	ldr	r1, [pc, #120]	; (80045ac <I2C_ITSlaveSeqCplt+0xc4>)
 8004532:	400a      	ands	r2, r1
 8004534:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2241      	movs	r2, #65	; 0x41
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b29      	cmp	r3, #41	; 0x29
 8004540:	d114      	bne.n	800456c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2241      	movs	r2, #65	; 0x41
 8004546:	2128      	movs	r1, #40	; 0x28
 8004548:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2221      	movs	r2, #33	; 0x21
 800454e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2101      	movs	r1, #1
 8004554:	0018      	movs	r0, r3
 8004556:	f000 fe7d 	bl	8005254 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2240      	movs	r2, #64	; 0x40
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f7fd fc35 	bl	8001dd4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800456a:	e019      	b.n	80045a0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2241      	movs	r2, #65	; 0x41
 8004570:	5c9b      	ldrb	r3, [r3, r2]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b2a      	cmp	r3, #42	; 0x2a
 8004576:	d113      	bne.n	80045a0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2241      	movs	r2, #65	; 0x41
 800457c:	2128      	movs	r1, #40	; 0x28
 800457e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2222      	movs	r2, #34	; 0x22
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2102      	movs	r1, #2
 800458a:	0018      	movs	r0, r3
 800458c:	f000 fe62 	bl	8005254 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	2100      	movs	r1, #0
 8004596:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f7fd fc3c 	bl	8001e18 <HAL_I2C_SlaveRxCpltCallback>
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b004      	add	sp, #16
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	ffffbfff 	.word	0xffffbfff
 80045ac:	ffff7fff 	.word	0xffff7fff

080045b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2220      	movs	r2, #32
 80045c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2241      	movs	r2, #65	; 0x41
 80045ca:	5c9b      	ldrb	r3, [r3, r2]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b21      	cmp	r3, #33	; 0x21
 80045d0:	d108      	bne.n	80045e4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2101      	movs	r1, #1
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 fe3c 	bl	8005254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2211      	movs	r2, #17
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
 80045e2:	e00d      	b.n	8004600 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2241      	movs	r2, #65	; 0x41
 80045e8:	5c9b      	ldrb	r3, [r3, r2]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b22      	cmp	r3, #34	; 0x22
 80045ee:	d107      	bne.n	8004600 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2102      	movs	r1, #2
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 fe2d 	bl	8005254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2212      	movs	r2, #18
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	494e      	ldr	r1, [pc, #312]	; (8004744 <I2C_ITMasterCplt+0x194>)
 800460c:	400a      	ands	r2, r1
 800460e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a4b      	ldr	r2, [pc, #300]	; (8004748 <I2C_ITMasterCplt+0x198>)
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2210      	movs	r2, #16
 8004620:	4013      	ands	r3, r2
 8004622:	d009      	beq.n	8004638 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2210      	movs	r2, #16
 800462a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	2204      	movs	r2, #4
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2241      	movs	r2, #65	; 0x41
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b60      	cmp	r3, #96	; 0x60
 8004642:	d109      	bne.n	8004658 <I2C_ITMasterCplt+0xa8>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2204      	movs	r2, #4
 8004648:	4013      	ands	r3, r2
 800464a:	d005      	beq.n	8004658 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	b2db      	uxtb	r3, r3
 8004654:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004656:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0018      	movs	r0, r3
 800465c:	f000 fb19 	bl	8004c92 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2241      	movs	r2, #65	; 0x41
 800466a:	5c9b      	ldrb	r3, [r3, r2]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b60      	cmp	r3, #96	; 0x60
 8004670:	d002      	beq.n	8004678 <I2C_ITMasterCplt+0xc8>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f9db 	bl	8004a3c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004686:	e058      	b.n	800473a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2241      	movs	r2, #65	; 0x41
 800468c:	5c9b      	ldrb	r3, [r3, r2]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b21      	cmp	r3, #33	; 0x21
 8004692:	d126      	bne.n	80046e2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2241      	movs	r2, #65	; 0x41
 8004698:	2120      	movs	r1, #32
 800469a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2242      	movs	r2, #66	; 0x42
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d10c      	bne.n	80046c8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2242      	movs	r2, #66	; 0x42
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2240      	movs	r2, #64	; 0x40
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7ff f944 	bl	800394e <HAL_I2C_MemTxCpltCallback>
}
 80046c6:	e038      	b.n	800473a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2242      	movs	r2, #66	; 0x42
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2240      	movs	r2, #64	; 0x40
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0018      	movs	r0, r3
 80046dc:	f7ff f927 	bl	800392e <HAL_I2C_MasterTxCpltCallback>
}
 80046e0:	e02b      	b.n	800473a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2241      	movs	r2, #65	; 0x41
 80046e6:	5c9b      	ldrb	r3, [r3, r2]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b22      	cmp	r3, #34	; 0x22
 80046ec:	d125      	bne.n	800473a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2241      	movs	r2, #65	; 0x41
 80046f2:	2120      	movs	r1, #32
 80046f4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2242      	movs	r2, #66	; 0x42
 8004700:	5c9b      	ldrb	r3, [r3, r2]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d10c      	bne.n	8004722 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2242      	movs	r2, #66	; 0x42
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2240      	movs	r2, #64	; 0x40
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f7ff f91f 	bl	800395e <HAL_I2C_MemRxCpltCallback>
}
 8004720:	e00b      	b.n	800473a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2242      	movs	r2, #66	; 0x42
 8004726:	2100      	movs	r1, #0
 8004728:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2240      	movs	r2, #64	; 0x40
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f7ff f902 	bl	800393e <HAL_I2C_MasterRxCpltCallback>
}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b006      	add	sp, #24
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	fe00e800 	.word	0xfe00e800
 8004748:	ffff0000 	.word	0xffff0000

0800474c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004762:	200f      	movs	r0, #15
 8004764:	183b      	adds	r3, r7, r0
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	2141      	movs	r1, #65	; 0x41
 800476a:	5c52      	ldrb	r2, [r2, r1]
 800476c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2220      	movs	r2, #32
 8004774:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004776:	183b      	adds	r3, r7, r0
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b21      	cmp	r3, #33	; 0x21
 800477c:	d003      	beq.n	8004786 <I2C_ITSlaveCplt+0x3a>
 800477e:	183b      	adds	r3, r7, r0
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b29      	cmp	r3, #41	; 0x29
 8004784:	d109      	bne.n	800479a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004786:	4a7b      	ldr	r2, [pc, #492]	; (8004974 <I2C_ITSlaveCplt+0x228>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0011      	movs	r1, r2
 800478c:	0018      	movs	r0, r3
 800478e:	f000 fd61 	bl	8005254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2221      	movs	r2, #33	; 0x21
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
 8004798:	e011      	b.n	80047be <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800479a:	220f      	movs	r2, #15
 800479c:	18bb      	adds	r3, r7, r2
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b22      	cmp	r3, #34	; 0x22
 80047a2:	d003      	beq.n	80047ac <I2C_ITSlaveCplt+0x60>
 80047a4:	18bb      	adds	r3, r7, r2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b2a      	cmp	r3, #42	; 0x2a
 80047aa:	d108      	bne.n	80047be <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80047ac:	4a72      	ldr	r2, [pc, #456]	; (8004978 <I2C_ITSlaveCplt+0x22c>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0011      	movs	r1, r2
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 fd4e 	bl	8005254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	0209      	lsls	r1, r1, #8
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4968      	ldr	r1, [pc, #416]	; (800497c <I2C_ITSlaveCplt+0x230>)
 80047dc:	400a      	ands	r2, r1
 80047de:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 fa55 	bl	8004c92 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	4013      	ands	r3, r2
 80047f0:	d013      	beq.n	800481a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4960      	ldr	r1, [pc, #384]	; (8004980 <I2C_ITSlaveCplt+0x234>)
 80047fe:	400a      	ands	r2, r1
 8004800:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01f      	beq.n	800484a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004818:	e017      	b.n	800484a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4013      	ands	r3, r2
 8004822:	d012      	beq.n	800484a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4955      	ldr	r1, [pc, #340]	; (8004984 <I2C_ITSlaveCplt+0x238>)
 8004830:	400a      	ands	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d006      	beq.n	800484a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2204      	movs	r2, #4
 800484e:	4013      	ands	r3, r2
 8004850:	d020      	beq.n	8004894 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2204      	movs	r2, #4
 8004856:	4393      	bics	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	2204      	movs	r2, #4
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2242      	movs	r2, #66	; 0x42
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d013      	beq.n	80048e8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	0011      	movs	r1, r2
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 f8b7 	bl	8004a3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2241      	movs	r2, #65	; 0x41
 80048d2:	5c9b      	ldrb	r3, [r3, r2]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b28      	cmp	r3, #40	; 0x28
 80048d8:	d147      	bne.n	800496a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	0011      	movs	r1, r2
 80048e0:	0018      	movs	r0, r3
 80048e2:	f000 f853 	bl	800498c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048e6:	e040      	b.n	800496a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4a26      	ldr	r2, [pc, #152]	; (8004988 <I2C_ITSlaveCplt+0x23c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d016      	beq.n	8004920 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7ff fdf7 	bl	80044e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <I2C_ITSlaveCplt+0x23c>)
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2241      	movs	r2, #65	; 0x41
 8004904:	2120      	movs	r1, #32
 8004906:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f7fd fa9f 	bl	8001e5c <HAL_I2C_ListenCpltCallback>
}
 800491e:	e024      	b.n	800496a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2241      	movs	r2, #65	; 0x41
 8004924:	5c9b      	ldrb	r3, [r3, r2]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b22      	cmp	r3, #34	; 0x22
 800492a:	d10f      	bne.n	800494c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2241      	movs	r2, #65	; 0x41
 8004930:	2120      	movs	r1, #32
 8004932:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fd fa67 	bl	8001e18 <HAL_I2C_SlaveRxCpltCallback>
}
 800494a:	e00e      	b.n	800496a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2241      	movs	r2, #65	; 0x41
 8004950:	2120      	movs	r1, #32
 8004952:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2240      	movs	r2, #64	; 0x40
 800495e:	2100      	movs	r1, #0
 8004960:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f7fd fa35 	bl	8001dd4 <HAL_I2C_SlaveTxCpltCallback>
}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	46bd      	mov	sp, r7
 800496e:	b006      	add	sp, #24
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	00008001 	.word	0x00008001
 8004978:	00008002 	.word	0x00008002
 800497c:	fe00e800 	.word	0xfe00e800
 8004980:	ffffbfff 	.word	0xffffbfff
 8004984:	ffff7fff 	.word	0xffff7fff
 8004988:	ffff0000 	.word	0xffff0000

0800498c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <I2C_ITListenCplt+0xa8>)
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	2120      	movs	r1, #32
 80049a8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2242      	movs	r2, #66	; 0x42
 80049ae:	2100      	movs	r1, #0
 80049b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2204      	movs	r2, #4
 80049bc:	4013      	ands	r3, r2
 80049be:	d022      	beq.n	8004a06 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	2204      	movs	r2, #4
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <I2C_ITListenCplt+0xac>)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	0011      	movs	r1, r2
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 fc21 	bl	8005254 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2210      	movs	r2, #16
 8004a18:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2240      	movs	r2, #64	; 0x40
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fd fa19 	bl	8001e5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b002      	add	sp, #8
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	ffff0000 	.word	0xffff0000
 8004a38:	00008003 	.word	0x00008003

08004a3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a46:	200f      	movs	r0, #15
 8004a48:	183b      	adds	r3, r7, r0
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	2141      	movs	r1, #65	; 0x41
 8004a4e:	5c52      	ldrb	r2, [r2, r1]
 8004a50:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2242      	movs	r2, #66	; 0x42
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <I2C_ITError+0x1ec>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a72:	183b      	adds	r3, r7, r0
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b28      	cmp	r3, #40	; 0x28
 8004a78:	d007      	beq.n	8004a8a <I2C_ITError+0x4e>
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b29      	cmp	r3, #41	; 0x29
 8004a80:	d003      	beq.n	8004a8a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b2a      	cmp	r3, #42	; 0x2a
 8004a88:	d10c      	bne.n	8004aa4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2103      	movs	r1, #3
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fbe0 	bl	8005254 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2241      	movs	r2, #65	; 0x41
 8004a98:	2128      	movs	r1, #40	; 0x28
 8004a9a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a63      	ldr	r2, [pc, #396]	; (8004c2c <I2C_ITError+0x1f0>)
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8004aa2:	e032      	b.n	8004b0a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004aa4:	4a62      	ldr	r2, [pc, #392]	; (8004c30 <I2C_ITError+0x1f4>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0011      	movs	r1, r2
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 fbd2 	bl	8005254 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 f8ed 	bl	8004c92 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2241      	movs	r2, #65	; 0x41
 8004abc:	5c9b      	ldrb	r3, [r3, r2]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b60      	cmp	r3, #96	; 0x60
 8004ac2:	d01f      	beq.n	8004b04 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2241      	movs	r2, #65	; 0x41
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d114      	bne.n	8004b04 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d109      	bne.n	8004afc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2210      	movs	r2, #16
 8004aee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	2204      	movs	r2, #4
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2220      	movs	r2, #32
 8004b02:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03b      	beq.n	8004b90 <I2C_ITError+0x154>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b11      	cmp	r3, #17
 8004b1c:	d002      	beq.n	8004b24 <I2C_ITError+0xe8>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b21      	cmp	r3, #33	; 0x21
 8004b22:	d135      	bne.n	8004b90 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	401a      	ands	r2, r3
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	493c      	ldr	r1, [pc, #240]	; (8004c34 <I2C_ITError+0x1f8>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7fd fdf4 	bl	800273a <HAL_DMA_GetState>
 8004b52:	0003      	movs	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d016      	beq.n	8004b86 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <I2C_ITError+0x1fc>)
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	2100      	movs	r1, #0
 8004b66:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7fd fd9d 	bl	80026ac <HAL_DMA_Abort_IT>
 8004b72:	1e03      	subs	r3, r0, #0
 8004b74:	d051      	beq.n	8004c1a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	0018      	movs	r0, r3
 8004b82:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b84:	e049      	b.n	8004c1a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 f859 	bl	8004c40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b8e:	e044      	b.n	8004c1a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03b      	beq.n	8004c10 <I2C_ITError+0x1d4>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b12      	cmp	r3, #18
 8004b9c:	d002      	beq.n	8004ba4 <I2C_ITError+0x168>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b22      	cmp	r3, #34	; 0x22
 8004ba2:	d135      	bne.n	8004c10 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	401a      	ands	r2, r3
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d107      	bne.n	8004bc8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	491e      	ldr	r1, [pc, #120]	; (8004c3c <I2C_ITError+0x200>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fd fdb4 	bl	800273a <HAL_DMA_GetState>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d016      	beq.n	8004c06 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <I2C_ITError+0x1fc>)
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2240      	movs	r2, #64	; 0x40
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7fd fd5d 	bl	80026ac <HAL_DMA_Abort_IT>
 8004bf2:	1e03      	subs	r3, r0, #0
 8004bf4:	d013      	beq.n	8004c1e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	0018      	movs	r0, r3
 8004c02:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c04:	e00b      	b.n	8004c1e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 f819 	bl	8004c40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c0e:	e006      	b.n	8004c1e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0018      	movs	r0, r3
 8004c14:	f000 f814 	bl	8004c40 <I2C_TreatErrorCallback>
  }
}
 8004c18:	e002      	b.n	8004c20 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	e000      	b.n	8004c20 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c1e:	46c0      	nop			; (mov r8, r8)
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	ffff0000 	.word	0xffff0000
 8004c2c:	08003995 	.word	0x08003995
 8004c30:	00008003 	.word	0x00008003
 8004c34:	ffffbfff 	.word	0xffffbfff
 8004c38:	08004cd7 	.word	0x08004cd7
 8004c3c:	ffff7fff 	.word	0xffff7fff

08004c40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2241      	movs	r2, #65	; 0x41
 8004c4c:	5c9b      	ldrb	r3, [r3, r2]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d10f      	bne.n	8004c74 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2241      	movs	r2, #65	; 0x41
 8004c58:	2120      	movs	r1, #32
 8004c5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2240      	movs	r2, #64	; 0x40
 8004c66:	2100      	movs	r1, #0
 8004c68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fe fe7e 	bl	800396e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c72:	e00a      	b.n	8004c8a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2240      	movs	r2, #64	; 0x40
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fd f8f5 	bl	8001e74 <HAL_I2C_ErrorCallback>
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d103      	bne.n	8004cb0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2200      	movs	r2, #0
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d007      	beq.n	8004cce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699a      	ldr	r2, [r3, #24]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2101      	movs	r1, #1
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	619a      	str	r2, [r3, #24]
  }
}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b002      	add	sp, #8
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	2200      	movs	r2, #0
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7ff ff9a 	bl	8004c40 <I2C_TreatErrorCallback>
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	e030      	b.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	d02d      	beq.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2c:	f7fd fba4 	bl	8002478 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d122      	bne.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	425a      	negs	r2, r3
 8004d52:	4153      	adcs	r3, r2
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	001a      	movs	r2, r3
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d113      	bne.n	8004d88 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	2220      	movs	r2, #32
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2241      	movs	r2, #65	; 0x41
 8004d70:	2120      	movs	r1, #32
 8004d72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2242      	movs	r2, #66	; 0x42
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e00f      	b.n	8004da8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	425a      	negs	r2, r3
 8004d98:	4153      	adcs	r3, r2
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	1dfb      	adds	r3, r7, #7
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d0bf      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dbc:	e032      	b.n	8004e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f000 f87d 	bl	8004ec4 <I2C_IsErrorOccurred>
 8004dca:	1e03      	subs	r3, r0, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e030      	b.n	8004e34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	d025      	beq.n	8004e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd8:	f7fd fb4e 	bl	8002478 <HAL_GetTick>
 8004ddc:	0002      	movs	r2, r0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d11a      	bne.n	8004e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2202      	movs	r2, #2
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d013      	beq.n	8004e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	2220      	movs	r2, #32
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2241      	movs	r2, #65	; 0x41
 8004e0c:	2120      	movs	r1, #32
 8004e0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2242      	movs	r2, #66	; 0x42
 8004e14:	2100      	movs	r1, #0
 8004e16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e007      	b.n	8004e34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d1c5      	bne.n	8004dbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e48:	e02f      	b.n	8004eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 f837 	bl	8004ec4 <I2C_IsErrorOccurred>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e02d      	b.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fd fb0b 	bl	8002478 <HAL_GetTick>
 8004e62:	0002      	movs	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11a      	bne.n	8004eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d013      	beq.n	8004eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	2220      	movs	r2, #32
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2241      	movs	r2, #65	; 0x41
 8004e92:	2120      	movs	r1, #32
 8004e94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2242      	movs	r2, #66	; 0x42
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2240      	movs	r2, #64	; 0x40
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e007      	b.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d1c8      	bne.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b004      	add	sp, #16
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b08b      	sub	sp, #44	; 0x2c
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed0:	2327      	movs	r3, #39	; 0x27
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2210      	movs	r2, #16
 8004eec:	4013      	ands	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <I2C_IsErrorOccurred+0x2e>
 8004ef0:	e082      	b.n	8004ff8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004efa:	e060      	b.n	8004fbe <I2C_IsErrorOccurred+0xfa>
 8004efc:	2427      	movs	r4, #39	; 0x27
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	193a      	adds	r2, r7, r4
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	d058      	beq.n	8004fbe <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fd fab4 	bl	8002478 <HAL_GetTick>
 8004f10:	0002      	movs	r2, r0
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d306      	bcc.n	8004f2a <I2C_IsErrorOccurred+0x66>
 8004f1c:	193b      	adds	r3, r7, r4
 8004f1e:	193a      	adds	r2, r7, r4
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d149      	bne.n	8004fbe <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	01db      	lsls	r3, r3, #7
 8004f34:	4013      	ands	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f38:	2013      	movs	r0, #19
 8004f3a:	183b      	adds	r3, r7, r0
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	2142      	movs	r1, #66	; 0x42
 8004f40:	5c52      	ldrb	r2, [r2, r1]
 8004f42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	401a      	ands	r2, r3
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d126      	bne.n	8004fa6 <I2C_IsErrorOccurred+0xe2>
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	01db      	lsls	r3, r3, #7
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d021      	beq.n	8004fa6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004f62:	183b      	adds	r3, r7, r0
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d01d      	beq.n	8004fa6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2180      	movs	r1, #128	; 0x80
 8004f76:	01c9      	lsls	r1, r1, #7
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f7c:	f7fd fa7c 	bl	8002478 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f84:	e00f      	b.n	8004fa6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f86:	f7fd fa77 	bl	8002478 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b19      	cmp	r3, #25
 8004f92:	d908      	bls.n	8004fa6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2220      	movs	r2, #32
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f9c:	2327      	movs	r3, #39	; 0x27
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]

              break;
 8004fa4:	e00b      	b.n	8004fbe <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2220      	movs	r2, #32
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2127      	movs	r1, #39	; 0x27
 8004fb2:	187a      	adds	r2, r7, r1
 8004fb4:	1879      	adds	r1, r7, r1
 8004fb6:	7809      	ldrb	r1, [r1, #0]
 8004fb8:	7011      	strb	r1, [r2, #0]
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d1e3      	bne.n	8004f86 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d004      	beq.n	8004fd6 <I2C_IsErrorOccurred+0x112>
 8004fcc:	2327      	movs	r3, #39	; 0x27
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d092      	beq.n	8004efc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fd6:	2327      	movs	r3, #39	; 0x27
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	2204      	movs	r2, #4
 8004fec:	4313      	orrs	r3, r2
 8004fee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ff0:	2327      	movs	r3, #39	; 0x27
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4013      	ands	r3, r2
 8005008:	d00c      	beq.n	8005024 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2201      	movs	r2, #1
 800500e:	4313      	orrs	r3, r2
 8005010:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	0052      	lsls	r2, r2, #1
 800501a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800501c:	2327      	movs	r3, #39	; 0x27
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4013      	ands	r3, r2
 800502c:	d00c      	beq.n	8005048 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2208      	movs	r2, #8
 8005032:	4313      	orrs	r3, r2
 8005034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2280      	movs	r2, #128	; 0x80
 800503c:	00d2      	lsls	r2, r2, #3
 800503e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005040:	2327      	movs	r3, #39	; 0x27
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4013      	ands	r3, r2
 8005050:	d00c      	beq.n	800506c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2202      	movs	r2, #2
 8005056:	4313      	orrs	r3, r2
 8005058:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	0092      	lsls	r2, r2, #2
 8005062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005064:	2327      	movs	r3, #39	; 0x27
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800506c:	2327      	movs	r3, #39	; 0x27
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01d      	beq.n	80050b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff fe0a 	bl	8004c92 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	490d      	ldr	r1, [pc, #52]	; (80050c0 <I2C_IsErrorOccurred+0x1fc>)
 800508a:	400a      	ands	r2, r1
 800508c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2241      	movs	r2, #65	; 0x41
 800509e:	2120      	movs	r1, #32
 80050a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2242      	movs	r2, #66	; 0x42
 80050a6:	2100      	movs	r1, #0
 80050a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2240      	movs	r2, #64	; 0x40
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80050b2:	2327      	movs	r3, #39	; 0x27
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	781b      	ldrb	r3, [r3, #0]
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b00b      	add	sp, #44	; 0x2c
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	fe00e800 	.word	0xfe00e800

080050c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	0008      	movs	r0, r1
 80050ce:	0011      	movs	r1, r2
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	240a      	movs	r4, #10
 80050d4:	193b      	adds	r3, r7, r4
 80050d6:	1c02      	adds	r2, r0, #0
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	2009      	movs	r0, #9
 80050dc:	183b      	adds	r3, r7, r0
 80050de:	1c0a      	adds	r2, r1, #0
 80050e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050e2:	193b      	adds	r3, r7, r4
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	059b      	lsls	r3, r3, #22
 80050e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050ea:	183b      	adds	r3, r7, r0
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	0419      	lsls	r1, r3, #16
 80050f0:	23ff      	movs	r3, #255	; 0xff
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	4313      	orrs	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	0d51      	lsrs	r1, r2, #21
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	00d2      	lsls	r2, r2, #3
 8005114:	400a      	ands	r2, r1
 8005116:	4907      	ldr	r1, [pc, #28]	; (8005134 <I2C_TransferConfig+0x70>)
 8005118:	430a      	orrs	r2, r1
 800511a:	43d2      	mvns	r2, r2
 800511c:	401a      	ands	r2, r3
 800511e:	0011      	movs	r1, r2
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b007      	add	sp, #28
 8005130:	bd90      	pop	{r4, r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	03ff63ff 	.word	0x03ff63ff

08005138 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	000a      	movs	r2, r1
 8005142:	1cbb      	adds	r3, r7, #2
 8005144:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514e:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <I2C_Enable_IRQ+0x110>)
 8005150:	429a      	cmp	r2, r3
 8005152:	d035      	beq.n	80051c0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005158:	4b3c      	ldr	r3, [pc, #240]	; (800524c <I2C_Enable_IRQ+0x114>)
 800515a:	429a      	cmp	r2, r3
 800515c:	d030      	beq.n	80051c0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005162:	4b3b      	ldr	r3, [pc, #236]	; (8005250 <I2C_Enable_IRQ+0x118>)
 8005164:	429a      	cmp	r2, r3
 8005166:	d02b      	beq.n	80051c0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005168:	1cbb      	adds	r3, r7, #2
 800516a:	2200      	movs	r2, #0
 800516c:	5e9b      	ldrsh	r3, [r3, r2]
 800516e:	2b00      	cmp	r3, #0
 8005170:	da03      	bge.n	800517a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	22b8      	movs	r2, #184	; 0xb8
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800517a:	1cbb      	adds	r3, r7, #2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	4013      	ands	r3, r2
 8005182:	d003      	beq.n	800518c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22f2      	movs	r2, #242	; 0xf2
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800518c:	1cbb      	adds	r3, r7, #2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	2202      	movs	r2, #2
 8005192:	4013      	ands	r3, r2
 8005194:	d003      	beq.n	800519e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22f4      	movs	r2, #244	; 0xf4
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800519e:	1cbb      	adds	r3, r7, #2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d103      	bne.n	80051ae <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2290      	movs	r2, #144	; 0x90
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051ae:	1cbb      	adds	r3, r7, #2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d13c      	bne.n	8005230 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051be:	e037      	b.n	8005230 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051c0:	1cbb      	adds	r3, r7, #2
 80051c2:	2200      	movs	r2, #0
 80051c4:	5e9b      	ldrsh	r3, [r3, r2]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da03      	bge.n	80051d2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	22b8      	movs	r2, #184	; 0xb8
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051d2:	1cbb      	adds	r3, r7, #2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	2201      	movs	r2, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	d003      	beq.n	80051e4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	22f2      	movs	r2, #242	; 0xf2
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051e4:	1cbb      	adds	r3, r7, #2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	2202      	movs	r2, #2
 80051ea:	4013      	ands	r3, r2
 80051ec:	d003      	beq.n	80051f6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	22f4      	movs	r2, #244	; 0xf4
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80051f6:	1cbb      	adds	r3, r7, #2
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d103      	bne.n	8005206 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2290      	movs	r2, #144	; 0x90
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005206:	1cbb      	adds	r3, r7, #2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	2b20      	cmp	r3, #32
 800520c:	d103      	bne.n	8005216 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2260      	movs	r2, #96	; 0x60
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <I2C_Enable_IRQ+0x118>)
 800521c:	429a      	cmp	r2, r3
 800521e:	d007      	beq.n	8005230 <I2C_Enable_IRQ+0xf8>
 8005220:	1cbb      	adds	r3, r7, #2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d103      	bne.n	8005230 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	430a      	orrs	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b004      	add	sp, #16
 8005246:	bd80      	pop	{r7, pc}
 8005248:	08003b95 	.word	0x08003b95
 800524c:	08003fc5 	.word	0x08003fc5
 8005250:	08003d8d 	.word	0x08003d8d

08005254 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	000a      	movs	r2, r1
 800525e:	1cbb      	adds	r3, r7, #2
 8005260:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005266:	1cbb      	adds	r3, r7, #2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	2201      	movs	r2, #1
 800526c:	4013      	ands	r3, r2
 800526e:	d010      	beq.n	8005292 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2242      	movs	r2, #66	; 0x42
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2241      	movs	r2, #65	; 0x41
 800527c:	5c9b      	ldrb	r3, [r3, r2]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	001a      	movs	r2, r3
 8005282:	2328      	movs	r3, #40	; 0x28
 8005284:	4013      	ands	r3, r2
 8005286:	2b28      	cmp	r3, #40	; 0x28
 8005288:	d003      	beq.n	8005292 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22b0      	movs	r2, #176	; 0xb0
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005292:	1cbb      	adds	r3, r7, #2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	2202      	movs	r2, #2
 8005298:	4013      	ands	r3, r2
 800529a:	d010      	beq.n	80052be <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2244      	movs	r2, #68	; 0x44
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2241      	movs	r2, #65	; 0x41
 80052a8:	5c9b      	ldrb	r3, [r3, r2]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	001a      	movs	r2, r3
 80052ae:	2328      	movs	r3, #40	; 0x28
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b28      	cmp	r3, #40	; 0x28
 80052b4:	d003      	beq.n	80052be <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	22b0      	movs	r2, #176	; 0xb0
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052be:	1cbb      	adds	r3, r7, #2
 80052c0:	2200      	movs	r2, #0
 80052c2:	5e9b      	ldrsh	r3, [r3, r2]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da03      	bge.n	80052d0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	22b8      	movs	r2, #184	; 0xb8
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052d0:	1cbb      	adds	r3, r7, #2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d103      	bne.n	80052e0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2290      	movs	r2, #144	; 0x90
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052e0:	1cbb      	adds	r3, r7, #2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d103      	bne.n	80052f0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052f0:	1cbb      	adds	r3, r7, #2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d103      	bne.n	8005300 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	43d9      	mvns	r1, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	400a      	ands	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	46bd      	mov	sp, r7
 8005316:	b004      	add	sp, #16
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2241      	movs	r2, #65	; 0x41
 800532a:	5c9b      	ldrb	r3, [r3, r2]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b20      	cmp	r3, #32
 8005330:	d138      	bne.n	80053a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2240      	movs	r2, #64	; 0x40
 8005336:	5c9b      	ldrb	r3, [r3, r2]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800533c:	2302      	movs	r3, #2
 800533e:	e032      	b.n	80053a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	2101      	movs	r1, #1
 8005346:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2241      	movs	r2, #65	; 0x41
 800534c:	2124      	movs	r1, #36	; 0x24
 800534e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2101      	movs	r1, #1
 800535c:	438a      	bics	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4911      	ldr	r1, [pc, #68]	; (80053b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800536c:	400a      	ands	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2101      	movs	r1, #1
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2241      	movs	r2, #65	; 0x41
 8005394:	2120      	movs	r1, #32
 8005396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2240      	movs	r2, #64	; 0x40
 800539c:	2100      	movs	r1, #0
 800539e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b002      	add	sp, #8
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	ffffefff 	.word	0xffffefff

080053b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2241      	movs	r2, #65	; 0x41
 80053c2:	5c9b      	ldrb	r3, [r3, r2]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d139      	bne.n	800543e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	5c9b      	ldrb	r3, [r3, r2]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e033      	b.n	8005440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2240      	movs	r2, #64	; 0x40
 80053dc:	2101      	movs	r1, #1
 80053de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2241      	movs	r2, #65	; 0x41
 80053e4:	2124      	movs	r1, #36	; 0x24
 80053e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2101      	movs	r1, #1
 80053f4:	438a      	bics	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a11      	ldr	r2, [pc, #68]	; (8005448 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2101      	movs	r1, #1
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2241      	movs	r2, #65	; 0x41
 800542e:	2120      	movs	r1, #32
 8005430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	2100      	movs	r1, #0
 8005438:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b004      	add	sp, #16
 8005446:	bd80      	pop	{r7, pc}
 8005448:	fffff0ff 	.word	0xfffff0ff

0800544c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b5b0      	push	{r4, r5, r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f000 fb5a 	bl	8005b14 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005460:	4bce      	ldr	r3, [pc, #824]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	220c      	movs	r2, #12
 8005466:	4013      	ands	r3, r2
 8005468:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800546a:	4bcc      	ldr	r3, [pc, #816]	; (800579c <HAL_RCC_OscConfig+0x350>)
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	025b      	lsls	r3, r3, #9
 8005472:	4013      	ands	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2201      	movs	r2, #1
 800547c:	4013      	ands	r3, r2
 800547e:	d100      	bne.n	8005482 <HAL_RCC_OscConfig+0x36>
 8005480:	e07c      	b.n	800557c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d007      	beq.n	8005498 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d111      	bne.n	80054b2 <HAL_RCC_OscConfig+0x66>
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	025b      	lsls	r3, r3, #9
 8005494:	429a      	cmp	r2, r3
 8005496:	d10c      	bne.n	80054b2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005498:	4bc0      	ldr	r3, [pc, #768]	; (800579c <HAL_RCC_OscConfig+0x350>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	4013      	ands	r3, r2
 80054a2:	d100      	bne.n	80054a6 <HAL_RCC_OscConfig+0x5a>
 80054a4:	e069      	b.n	800557a <HAL_RCC_OscConfig+0x12e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d165      	bne.n	800557a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e330      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	025b      	lsls	r3, r3, #9
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d107      	bne.n	80054ce <HAL_RCC_OscConfig+0x82>
 80054be:	4bb7      	ldr	r3, [pc, #732]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4bb6      	ldr	r3, [pc, #728]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054c4:	2180      	movs	r1, #128	; 0x80
 80054c6:	0249      	lsls	r1, r1, #9
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e027      	b.n	800551e <HAL_RCC_OscConfig+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	23a0      	movs	r3, #160	; 0xa0
 80054d4:	02db      	lsls	r3, r3, #11
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d10e      	bne.n	80054f8 <HAL_RCC_OscConfig+0xac>
 80054da:	4bb0      	ldr	r3, [pc, #704]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4baf      	ldr	r3, [pc, #700]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	02c9      	lsls	r1, r1, #11
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	4bac      	ldr	r3, [pc, #688]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4bab      	ldr	r3, [pc, #684]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	0249      	lsls	r1, r1, #9
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e012      	b.n	800551e <HAL_RCC_OscConfig+0xd2>
 80054f8:	4ba8      	ldr	r3, [pc, #672]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4ba7      	ldr	r3, [pc, #668]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80054fe:	49a8      	ldr	r1, [pc, #672]	; (80057a0 <HAL_RCC_OscConfig+0x354>)
 8005500:	400a      	ands	r2, r1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	4ba5      	ldr	r3, [pc, #660]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	025b      	lsls	r3, r3, #9
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4ba2      	ldr	r3, [pc, #648]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4ba1      	ldr	r3, [pc, #644]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005518:	49a2      	ldr	r1, [pc, #648]	; (80057a4 <HAL_RCC_OscConfig+0x358>)
 800551a:	400a      	ands	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d014      	beq.n	8005550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005526:	f7fc ffa7 	bl	8002478 <HAL_GetTick>
 800552a:	0003      	movs	r3, r0
 800552c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005530:	f7fc ffa2 	bl	8002478 <HAL_GetTick>
 8005534:	0002      	movs	r2, r0
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	; 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e2e8      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005542:	4b96      	ldr	r3, [pc, #600]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	4013      	ands	r3, r2
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0xe4>
 800554e:	e015      	b.n	800557c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7fc ff92 	bl	8002478 <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555a:	f7fc ff8d 	bl	8002478 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b64      	cmp	r3, #100	; 0x64
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e2d3      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800556c:	4b8b      	ldr	r3, [pc, #556]	; (800579c <HAL_RCC_OscConfig+0x350>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	4013      	ands	r3, r2
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0x10e>
 8005578:	e000      	b.n	800557c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2202      	movs	r2, #2
 8005582:	4013      	ands	r3, r2
 8005584:	d100      	bne.n	8005588 <HAL_RCC_OscConfig+0x13c>
 8005586:	e08b      	b.n	80056a0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d13e      	bne.n	8005618 <HAL_RCC_OscConfig+0x1cc>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d13b      	bne.n	8005618 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80055a0:	4b7e      	ldr	r3, [pc, #504]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2204      	movs	r2, #4
 80055a6:	4013      	ands	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_RCC_OscConfig+0x168>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e2af      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b4:	4b79      	ldr	r3, [pc, #484]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a7b      	ldr	r2, [pc, #492]	; (80057a8 <HAL_RCC_OscConfig+0x35c>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	4b75      	ldr	r3, [pc, #468]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80055ca:	4b74      	ldr	r3, [pc, #464]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2209      	movs	r2, #9
 80055d0:	4393      	bics	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	4b71      	ldr	r3, [pc, #452]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	430a      	orrs	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055dc:	f000 fbe8 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 80055e0:	0001      	movs	r1, r0
 80055e2:	4b6e      	ldr	r3, [pc, #440]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	220f      	movs	r2, #15
 80055ea:	4013      	ands	r3, r2
 80055ec:	4a6f      	ldr	r2, [pc, #444]	; (80057ac <HAL_RCC_OscConfig+0x360>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	000a      	movs	r2, r1
 80055f2:	40da      	lsrs	r2, r3
 80055f4:	4b6e      	ldr	r3, [pc, #440]	; (80057b0 <HAL_RCC_OscConfig+0x364>)
 80055f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80055f8:	4b6e      	ldr	r3, [pc, #440]	; (80057b4 <HAL_RCC_OscConfig+0x368>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2513      	movs	r5, #19
 80055fe:	197c      	adds	r4, r7, r5
 8005600:	0018      	movs	r0, r3
 8005602:	f7fc fef3 	bl	80023ec <HAL_InitTick>
 8005606:	0003      	movs	r3, r0
 8005608:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800560a:	197b      	adds	r3, r7, r5
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d046      	beq.n	80056a0 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005612:	197b      	adds	r3, r7, r5
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	e27d      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d027      	beq.n	800566e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2209      	movs	r2, #9
 8005624:	4393      	bics	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	4b5c      	ldr	r3, [pc, #368]	; (800579c <HAL_RCC_OscConfig+0x350>)
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fc ff22 	bl	8002478 <HAL_GetTick>
 8005634:	0003      	movs	r3, r0
 8005636:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563a:	f7fc ff1d 	bl	8002478 <HAL_GetTick>
 800563e:	0002      	movs	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e263      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800564c:	4b53      	ldr	r3, [pc, #332]	; (800579c <HAL_RCC_OscConfig+0x350>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2204      	movs	r2, #4
 8005652:	4013      	ands	r3, r2
 8005654:	d0f1      	beq.n	800563a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	4b51      	ldr	r3, [pc, #324]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4a53      	ldr	r2, [pc, #332]	; (80057a8 <HAL_RCC_OscConfig+0x35c>)
 800565c:	4013      	ands	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	4b4d      	ldr	r3, [pc, #308]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	e018      	b.n	80056a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800566e:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b4a      	ldr	r3, [pc, #296]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005674:	2101      	movs	r1, #1
 8005676:	438a      	bics	r2, r1
 8005678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567a:	f7fc fefd 	bl	8002478 <HAL_GetTick>
 800567e:	0003      	movs	r3, r0
 8005680:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005684:	f7fc fef8 	bl	8002478 <HAL_GetTick>
 8005688:	0002      	movs	r2, r0
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e23e      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005696:	4b41      	ldr	r3, [pc, #260]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2204      	movs	r2, #4
 800569c:	4013      	ands	r3, r2
 800569e:	d1f1      	bne.n	8005684 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2210      	movs	r2, #16
 80056a6:	4013      	ands	r3, r2
 80056a8:	d100      	bne.n	80056ac <HAL_RCC_OscConfig+0x260>
 80056aa:	e0a1      	b.n	80057f0 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d140      	bne.n	8005734 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056b2:	4b3a      	ldr	r3, [pc, #232]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4013      	ands	r3, r2
 80056bc:	d005      	beq.n	80056ca <HAL_RCC_OscConfig+0x27e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e224      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056ca:	4b34      	ldr	r3, [pc, #208]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4a3a      	ldr	r2, [pc, #232]	; (80057b8 <HAL_RCC_OscConfig+0x36c>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	0019      	movs	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	4b30      	ldr	r3, [pc, #192]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	0a19      	lsrs	r1, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	061a      	lsls	r2, r3, #24
 80056ec:	4b2b      	ldr	r3, [pc, #172]	; (800579c <HAL_RCC_OscConfig+0x350>)
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	0b5b      	lsrs	r3, r3, #13
 80056f8:	3301      	adds	r3, #1
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	0212      	lsls	r2, r2, #8
 80056fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	210f      	movs	r1, #15
 8005708:	400b      	ands	r3, r1
 800570a:	4928      	ldr	r1, [pc, #160]	; (80057ac <HAL_RCC_OscConfig+0x360>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <HAL_RCC_OscConfig+0x364>)
 8005712:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005714:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x368>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2513      	movs	r5, #19
 800571a:	197c      	adds	r4, r7, r5
 800571c:	0018      	movs	r0, r3
 800571e:	f7fc fe65 	bl	80023ec <HAL_InitTick>
 8005722:	0003      	movs	r3, r0
 8005724:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005726:	197b      	adds	r3, r7, r5
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d060      	beq.n	80057f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800572e:	197b      	adds	r3, r7, r5
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	e1ef      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d03f      	beq.n	80057bc <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800573c:	4b17      	ldr	r3, [pc, #92]	; (800579c <HAL_RCC_OscConfig+0x350>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b16      	ldr	r3, [pc, #88]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	0049      	lsls	r1, r1, #1
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fc fe95 	bl	8002478 <HAL_GetTick>
 800574e:	0003      	movs	r3, r0
 8005750:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005754:	f7fc fe90 	bl	8002478 <HAL_GetTick>
 8005758:	0002      	movs	r2, r0
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1d6      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <HAL_RCC_OscConfig+0x36c>)
 8005778:	4013      	ands	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	0a19      	lsrs	r1, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	061a      	lsls	r2, r3, #24
 8005794:	4b01      	ldr	r3, [pc, #4]	; (800579c <HAL_RCC_OscConfig+0x350>)
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	e029      	b.n	80057f0 <HAL_RCC_OscConfig+0x3a4>
 800579c:	40021000 	.word	0x40021000
 80057a0:	fffeffff 	.word	0xfffeffff
 80057a4:	fffbffff 	.word	0xfffbffff
 80057a8:	ffffe0ff 	.word	0xffffe0ff
 80057ac:	08006260 	.word	0x08006260
 80057b0:	20000000 	.word	0x20000000
 80057b4:	20000004 	.word	0x20000004
 80057b8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057bc:	4bbe      	ldr	r3, [pc, #760]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4bbd      	ldr	r3, [pc, #756]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80057c2:	49be      	ldr	r1, [pc, #760]	; (8005abc <HAL_RCC_OscConfig+0x670>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fc fe56 	bl	8002478 <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057d2:	f7fc fe51 	bl	8002478 <HAL_GetTick>
 80057d6:	0002      	movs	r2, r0
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e197      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80057e4:	4bb4      	ldr	r3, [pc, #720]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4013      	ands	r3, r2
 80057ee:	d1f0      	bne.n	80057d2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2208      	movs	r2, #8
 80057f6:	4013      	ands	r3, r2
 80057f8:	d036      	beq.n	8005868 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d019      	beq.n	8005836 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005802:	4bad      	ldr	r3, [pc, #692]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005806:	4bac      	ldr	r3, [pc, #688]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005808:	2101      	movs	r1, #1
 800580a:	430a      	orrs	r2, r1
 800580c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580e:	f7fc fe33 	bl	8002478 <HAL_GetTick>
 8005812:	0003      	movs	r3, r0
 8005814:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005818:	f7fc fe2e 	bl	8002478 <HAL_GetTick>
 800581c:	0002      	movs	r2, r0
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e174      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800582a:	4ba3      	ldr	r3, [pc, #652]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	2202      	movs	r2, #2
 8005830:	4013      	ands	r3, r2
 8005832:	d0f1      	beq.n	8005818 <HAL_RCC_OscConfig+0x3cc>
 8005834:	e018      	b.n	8005868 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005836:	4ba0      	ldr	r3, [pc, #640]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800583a:	4b9f      	ldr	r3, [pc, #636]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800583c:	2101      	movs	r1, #1
 800583e:	438a      	bics	r2, r1
 8005840:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005842:	f7fc fe19 	bl	8002478 <HAL_GetTick>
 8005846:	0003      	movs	r3, r0
 8005848:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584c:	f7fc fe14 	bl	8002478 <HAL_GetTick>
 8005850:	0002      	movs	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e15a      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800585e:	4b96      	ldr	r3, [pc, #600]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005862:	2202      	movs	r2, #2
 8005864:	4013      	ands	r3, r2
 8005866:	d1f1      	bne.n	800584c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2204      	movs	r2, #4
 800586e:	4013      	ands	r3, r2
 8005870:	d100      	bne.n	8005874 <HAL_RCC_OscConfig+0x428>
 8005872:	e0ae      	b.n	80059d2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005874:	2027      	movs	r0, #39	; 0x27
 8005876:	183b      	adds	r3, r7, r0
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800587c:	4b8e      	ldr	r3, [pc, #568]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800587e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	055b      	lsls	r3, r3, #21
 8005884:	4013      	ands	r3, r2
 8005886:	d109      	bne.n	800589c <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005888:	4b8b      	ldr	r3, [pc, #556]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800588a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588c:	4b8a      	ldr	r3, [pc, #552]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	0549      	lsls	r1, r1, #21
 8005892:	430a      	orrs	r2, r1
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005896:	183b      	adds	r3, r7, r0
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589c:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <HAL_RCC_OscConfig+0x674>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	d11a      	bne.n	80058de <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a8:	4b85      	ldr	r3, [pc, #532]	; (8005ac0 <HAL_RCC_OscConfig+0x674>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <HAL_RCC_OscConfig+0x674>)
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	0049      	lsls	r1, r1, #1
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fc fddf 	bl	8002478 <HAL_GetTick>
 80058ba:	0003      	movs	r3, r0
 80058bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fc fdda 	bl	8002478 <HAL_GetTick>
 80058c4:	0002      	movs	r2, r0
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e120      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d2:	4b7b      	ldr	r3, [pc, #492]	; (8005ac0 <HAL_RCC_OscConfig+0x674>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4013      	ands	r3, r2
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d107      	bne.n	80058fa <HAL_RCC_OscConfig+0x4ae>
 80058ea:	4b73      	ldr	r3, [pc, #460]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80058ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ee:	4b72      	ldr	r3, [pc, #456]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	0049      	lsls	r1, r1, #1
 80058f4:	430a      	orrs	r2, r1
 80058f6:	651a      	str	r2, [r3, #80]	; 0x50
 80058f8:	e031      	b.n	800595e <HAL_RCC_OscConfig+0x512>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10c      	bne.n	800591c <HAL_RCC_OscConfig+0x4d0>
 8005902:	4b6d      	ldr	r3, [pc, #436]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005906:	4b6c      	ldr	r3, [pc, #432]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005908:	496c      	ldr	r1, [pc, #432]	; (8005abc <HAL_RCC_OscConfig+0x670>)
 800590a:	400a      	ands	r2, r1
 800590c:	651a      	str	r2, [r3, #80]	; 0x50
 800590e:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005912:	4b69      	ldr	r3, [pc, #420]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005914:	496b      	ldr	r1, [pc, #428]	; (8005ac4 <HAL_RCC_OscConfig+0x678>)
 8005916:	400a      	ands	r2, r1
 8005918:	651a      	str	r2, [r3, #80]	; 0x50
 800591a:	e020      	b.n	800595e <HAL_RCC_OscConfig+0x512>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	23a0      	movs	r3, #160	; 0xa0
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	429a      	cmp	r2, r3
 8005926:	d10e      	bne.n	8005946 <HAL_RCC_OscConfig+0x4fa>
 8005928:	4b63      	ldr	r3, [pc, #396]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800592a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800592c:	4b62      	ldr	r3, [pc, #392]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	00c9      	lsls	r1, r1, #3
 8005932:	430a      	orrs	r2, r1
 8005934:	651a      	str	r2, [r3, #80]	; 0x50
 8005936:	4b60      	ldr	r3, [pc, #384]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800593a:	4b5f      	ldr	r3, [pc, #380]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	0049      	lsls	r1, r1, #1
 8005940:	430a      	orrs	r2, r1
 8005942:	651a      	str	r2, [r3, #80]	; 0x50
 8005944:	e00b      	b.n	800595e <HAL_RCC_OscConfig+0x512>
 8005946:	4b5c      	ldr	r3, [pc, #368]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800594a:	4b5b      	ldr	r3, [pc, #364]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 800594c:	495b      	ldr	r1, [pc, #364]	; (8005abc <HAL_RCC_OscConfig+0x670>)
 800594e:	400a      	ands	r2, r1
 8005950:	651a      	str	r2, [r3, #80]	; 0x50
 8005952:	4b59      	ldr	r3, [pc, #356]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005956:	4b58      	ldr	r3, [pc, #352]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005958:	495a      	ldr	r1, [pc, #360]	; (8005ac4 <HAL_RCC_OscConfig+0x678>)
 800595a:	400a      	ands	r2, r1
 800595c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d015      	beq.n	8005992 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005966:	f7fc fd87 	bl	8002478 <HAL_GetTick>
 800596a:	0003      	movs	r3, r0
 800596c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800596e:	e009      	b.n	8005984 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005970:	f7fc fd82 	bl	8002478 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a53      	ldr	r2, [pc, #332]	; (8005ac8 <HAL_RCC_OscConfig+0x67c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e0c7      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005984:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4013      	ands	r3, r2
 800598e:	d0ef      	beq.n	8005970 <HAL_RCC_OscConfig+0x524>
 8005990:	e014      	b.n	80059bc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005992:	f7fc fd71 	bl	8002478 <HAL_GetTick>
 8005996:	0003      	movs	r3, r0
 8005998:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800599a:	e009      	b.n	80059b0 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f7fc fd6c 	bl	8002478 <HAL_GetTick>
 80059a0:	0002      	movs	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	4a48      	ldr	r2, [pc, #288]	; (8005ac8 <HAL_RCC_OscConfig+0x67c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0b1      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059b0:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80059b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4013      	ands	r3, r2
 80059ba:	d1ef      	bne.n	800599c <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059bc:	2327      	movs	r3, #39	; 0x27
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d105      	bne.n	80059d2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c6:	4b3c      	ldr	r3, [pc, #240]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80059c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ca:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80059cc:	493f      	ldr	r1, [pc, #252]	; (8005acc <HAL_RCC_OscConfig+0x680>)
 80059ce:	400a      	ands	r2, r1
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d100      	bne.n	80059dc <HAL_RCC_OscConfig+0x590>
 80059da:	e09a      	b.n	8005b12 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d064      	beq.n	8005aac <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d145      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	4b33      	ldr	r3, [pc, #204]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 80059f0:	4937      	ldr	r1, [pc, #220]	; (8005ad0 <HAL_RCC_OscConfig+0x684>)
 80059f2:	400a      	ands	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f6:	f7fc fd3f 	bl	8002478 <HAL_GetTick>
 80059fa:	0003      	movs	r3, r0
 80059fc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fc fd3a 	bl	8002478 <HAL_GetTick>
 8005a04:	0002      	movs	r2, r0
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e080      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	049b      	lsls	r3, r3, #18
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <HAL_RCC_OscConfig+0x688>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	431a      	orrs	r2, r3
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	0449      	lsls	r1, r1, #17
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fc fd14 	bl	8002478 <HAL_GetTick>
 8005a50:	0003      	movs	r3, r0
 8005a52:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a56:	f7fc fd0f 	bl	8002478 <HAL_GetTick>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e055      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a68:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	049b      	lsls	r3, r3, #18
 8005a70:	4013      	ands	r3, r2
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x60a>
 8005a74:	e04d      	b.n	8005b12 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005a7c:	4914      	ldr	r1, [pc, #80]	; (8005ad0 <HAL_RCC_OscConfig+0x684>)
 8005a7e:	400a      	ands	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fc fcf9 	bl	8002478 <HAL_GetTick>
 8005a86:	0003      	movs	r3, r0
 8005a88:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fc fcf4 	bl	8002478 <HAL_GetTick>
 8005a90:	0002      	movs	r2, r0
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e03a      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCC_OscConfig+0x66c>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	049b      	lsls	r3, r3, #18
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x640>
 8005aaa:	e032      	b.n	8005b12 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d111      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e02d      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	fffffeff 	.word	0xfffffeff
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	fffffbff 	.word	0xfffffbff
 8005ac8:	00001388 	.word	0x00001388
 8005acc:	efffffff 	.word	0xefffffff
 8005ad0:	feffffff 	.word	0xfeffffff
 8005ad4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ad8:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_RCC_OscConfig+0x6d0>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	025b      	lsls	r3, r3, #9
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10f      	bne.n	8005b0e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	23f0      	movs	r3, #240	; 0xf0
 8005af2:	039b      	lsls	r3, r3, #14
 8005af4:	401a      	ands	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	23c0      	movs	r3, #192	; 0xc0
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	401a      	ands	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d001      	beq.n	8005b12 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b00a      	add	sp, #40	; 0x28
 8005b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b1c:	40021000 	.word	0x40021000

08005b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e128      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b34:	4b96      	ldr	r3, [pc, #600]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d91e      	bls.n	8005b80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b93      	ldr	r3, [pc, #588]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2201      	movs	r2, #1
 8005b48:	4393      	bics	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	4b90      	ldr	r3, [pc, #576]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b54:	f7fc fc90 	bl	8002478 <HAL_GetTick>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5c:	e009      	b.n	8005b72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b5e:	f7fc fc8b 	bl	8002478 <HAL_GetTick>
 8005b62:	0002      	movs	r2, r0
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	4a8a      	ldr	r2, [pc, #552]	; (8005d94 <HAL_RCC_ClockConfig+0x274>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e109      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b87      	ldr	r3, [pc, #540]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2201      	movs	r2, #1
 8005b78:	4013      	ands	r3, r2
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d1ee      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2202      	movs	r2, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8a:	4b83      	ldr	r3, [pc, #524]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	22f0      	movs	r2, #240	; 0xf0
 8005b90:	4393      	bics	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	4b7f      	ldr	r3, [pc, #508]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d100      	bne.n	8005baa <HAL_RCC_ClockConfig+0x8a>
 8005ba8:	e089      	b.n	8005cbe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bb2:	4b79      	ldr	r3, [pc, #484]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	029b      	lsls	r3, r3, #10
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d120      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e0e1      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bca:	4b73      	ldr	r3, [pc, #460]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	049b      	lsls	r3, r3, #18
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d114      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0d5      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d106      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be2:	4b6d      	ldr	r3, [pc, #436]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2204      	movs	r2, #4
 8005be8:	4013      	ands	r3, r2
 8005bea:	d109      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0ca      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005bf0:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0c2      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c00:	4b65      	ldr	r3, [pc, #404]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2203      	movs	r2, #3
 8005c06:	4393      	bics	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	4b62      	ldr	r3, [pc, #392]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005c10:	430a      	orrs	r2, r1
 8005c12:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c14:	f7fc fc30 	bl	8002478 <HAL_GetTick>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d111      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c24:	e009      	b.n	8005c3a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c26:	f7fc fc27 	bl	8002478 <HAL_GetTick>
 8005c2a:	0002      	movs	r2, r0
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	4a58      	ldr	r2, [pc, #352]	; (8005d94 <HAL_RCC_ClockConfig+0x274>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0a5      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c3a:	4b57      	ldr	r3, [pc, #348]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	220c      	movs	r2, #12
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d1ef      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x106>
 8005c46:	e03a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d111      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c50:	e009      	b.n	8005c66 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c52:	f7fc fc11 	bl	8002478 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	4a4d      	ldr	r2, [pc, #308]	; (8005d94 <HAL_RCC_ClockConfig+0x274>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e08f      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c66:	4b4c      	ldr	r3, [pc, #304]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	220c      	movs	r2, #12
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d1ef      	bne.n	8005c52 <HAL_RCC_ClockConfig+0x132>
 8005c72:	e024      	b.n	8005cbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c7c:	e009      	b.n	8005c92 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7e:	f7fc fbfb 	bl	8002478 <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	4a42      	ldr	r2, [pc, #264]	; (8005d94 <HAL_RCC_ClockConfig+0x274>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e079      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c92:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	220c      	movs	r2, #12
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d1ef      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x15e>
 8005c9e:	e00e      	b.n	8005cbe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca0:	f7fc fbea 	bl	8002478 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	4a3a      	ldr	r2, [pc, #232]	; (8005d94 <HAL_RCC_ClockConfig+0x274>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e068      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cb4:	4b38      	ldr	r3, [pc, #224]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	220c      	movs	r2, #12
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cbe:	4b34      	ldr	r3, [pc, #208]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d21e      	bcs.n	8005d0a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ccc:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4393      	bics	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cde:	f7fc fbcb 	bl	8002478 <HAL_GetTick>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	e009      	b.n	8005cfc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce8:	f7fc fbc6 	bl	8002478 <HAL_GetTick>
 8005cec:	0002      	movs	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	4a28      	ldr	r2, [pc, #160]	; (8005d94 <HAL_RCC_ClockConfig+0x274>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e044      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfc:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <HAL_RCC_ClockConfig+0x270>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2201      	movs	r2, #1
 8005d02:	4013      	ands	r3, r2
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d1ee      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	4013      	ands	r3, r2
 8005d12:	d009      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <HAL_RCC_ClockConfig+0x27c>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005d24:	430a      	orrs	r2, r1
 8005d26:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d32:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_RCC_ClockConfig+0x280>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005d44:	430a      	orrs	r2, r1
 8005d46:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d48:	f000 f832 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d4c:	0001      	movs	r1, r0
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <HAL_RCC_ClockConfig+0x278>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	220f      	movs	r2, #15
 8005d56:	4013      	ands	r3, r2
 8005d58:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <HAL_RCC_ClockConfig+0x284>)
 8005d5a:	5cd3      	ldrb	r3, [r2, r3]
 8005d5c:	000a      	movs	r2, r1
 8005d5e:	40da      	lsrs	r2, r3
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <HAL_RCC_ClockConfig+0x288>)
 8005d62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <HAL_RCC_ClockConfig+0x28c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	250b      	movs	r5, #11
 8005d6a:	197c      	adds	r4, r7, r5
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f7fc fb3d 	bl	80023ec <HAL_InitTick>
 8005d72:	0003      	movs	r3, r0
 8005d74:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005d76:	197b      	adds	r3, r7, r5
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005d7e:	197b      	adds	r3, r7, r5
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	e000      	b.n	8005d86 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	0018      	movs	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b004      	add	sp, #16
 8005d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	40022000 	.word	0x40022000
 8005d94:	00001388 	.word	0x00001388
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	fffff8ff 	.word	0xfffff8ff
 8005da0:	ffffc7ff 	.word	0xffffc7ff
 8005da4:	08006260 	.word	0x08006260
 8005da8:	20000000 	.word	0x20000000
 8005dac:	20000004 	.word	0x20000004

08005db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	b5b0      	push	{r4, r5, r7, lr}
 8005db2:	b08e      	sub	sp, #56	; 0x38
 8005db4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005db6:	4b4c      	ldr	r3, [pc, #304]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d014      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x40>
 8005dc6:	d900      	bls.n	8005dca <HAL_RCC_GetSysClockFreq+0x1a>
 8005dc8:	e07b      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x112>
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d002      	beq.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x24>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d00b      	beq.n	8005dea <HAL_RCC_GetSysClockFreq+0x3a>
 8005dd2:	e076      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005dd4:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d002      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005dde:	4b43      	ldr	r3, [pc, #268]	; (8005eec <HAL_RCC_GetSysClockFreq+0x13c>)
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005de2:	e07c      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005de4:	4b42      	ldr	r3, [pc, #264]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005de8:	e079      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dea:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x144>)
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dee:	e076      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	0c9a      	lsrs	r2, r3, #18
 8005df4:	230f      	movs	r3, #15
 8005df6:	401a      	ands	r2, r3
 8005df8:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x148>)
 8005dfa:	5c9b      	ldrb	r3, [r3, r2]
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	0d9a      	lsrs	r2, r3, #22
 8005e02:	2303      	movs	r3, #3
 8005e04:	4013      	ands	r3, r2
 8005e06:	3301      	adds	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	025b      	lsls	r3, r3, #9
 8005e12:	4013      	ands	r3, r2
 8005e14:	d01a      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	4a35      	ldr	r2, [pc, #212]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x144>)
 8005e20:	2300      	movs	r3, #0
 8005e22:	69b8      	ldr	r0, [r7, #24]
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	f7fa fa1b 	bl	8000260 <__aeabi_lmul>
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	000b      	movs	r3, r1
 8005e2e:	0010      	movs	r0, r2
 8005e30:	0019      	movs	r1, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f7fa f9ef 	bl	8000220 <__aeabi_uldivmod>
 8005e42:	0002      	movs	r2, r0
 8005e44:	000b      	movs	r3, r1
 8005e46:	0013      	movs	r3, r2
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	e037      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e4c:	4b26      	ldr	r3, [pc, #152]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2210      	movs	r2, #16
 8005e52:	4013      	ands	r3, r2
 8005e54:	d01a      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4a23      	ldr	r2, [pc, #140]	; (8005eec <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e60:	2300      	movs	r3, #0
 8005e62:	68b8      	ldr	r0, [r7, #8]
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	f7fa f9fb 	bl	8000260 <__aeabi_lmul>
 8005e6a:	0002      	movs	r2, r0
 8005e6c:	000b      	movs	r3, r1
 8005e6e:	0010      	movs	r0, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f7fa f9cf 	bl	8000220 <__aeabi_uldivmod>
 8005e82:	0002      	movs	r2, r0
 8005e84:	000b      	movs	r3, r1
 8005e86:	0013      	movs	r3, r2
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8a:	e017      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	0018      	movs	r0, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	0019      	movs	r1, r3
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e96:	2300      	movs	r3, #0
 8005e98:	f7fa f9e2 	bl	8000260 <__aeabi_lmul>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	000b      	movs	r3, r1
 8005ea0:	0010      	movs	r0, r2
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	001c      	movs	r4, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	001d      	movs	r5, r3
 8005eac:	0022      	movs	r2, r4
 8005eae:	002b      	movs	r3, r5
 8005eb0:	f7fa f9b6 	bl	8000220 <__aeabi_uldivmod>
 8005eb4:	0002      	movs	r2, r0
 8005eb6:	000b      	movs	r3, r1
 8005eb8:	0013      	movs	r3, r2
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ec0:	e00d      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	0b5b      	lsrs	r3, r3, #13
 8005ec8:	2207      	movs	r2, #7
 8005eca:	4013      	ands	r3, r2
 8005ecc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	2280      	movs	r2, #128	; 0x80
 8005ed4:	0212      	lsls	r2, r2, #8
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	0013      	movs	r3, r2
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005edc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b00e      	add	sp, #56	; 0x38
 8005ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	003d0900 	.word	0x003d0900
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	007a1200 	.word	0x007a1200
 8005ef8:	08006270 	.word	0x08006270

08005efc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005f04:	2017      	movs	r0, #23
 8005f06:	183b      	adds	r3, r7, r0
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2220      	movs	r2, #32
 8005f12:	4013      	ands	r3, r2
 8005f14:	d100      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005f16:	e0c7      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f18:	4b8b      	ldr	r3, [pc, #556]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	055b      	lsls	r3, r3, #21
 8005f20:	4013      	ands	r3, r2
 8005f22:	d109      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f24:	4b88      	ldr	r3, [pc, #544]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f28:	4b87      	ldr	r3, [pc, #540]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	0549      	lsls	r1, r1, #21
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f32:	183b      	adds	r3, r7, r0
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f38:	4b84      	ldr	r3, [pc, #528]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4013      	ands	r3, r2
 8005f42:	d11a      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f44:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b80      	ldr	r3, [pc, #512]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	0049      	lsls	r1, r1, #1
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f52:	f7fc fa91 	bl	8002478 <HAL_GetTick>
 8005f56:	0003      	movs	r3, r0
 8005f58:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5c:	f7fc fa8c 	bl	8002478 <HAL_GetTick>
 8005f60:	0002      	movs	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0e8      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6e:	4b77      	ldr	r3, [pc, #476]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4013      	ands	r3, r2
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005f7a:	4b73      	ldr	r3, [pc, #460]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	23c0      	movs	r3, #192	; 0xc0
 8005f80:	039b      	lsls	r3, r3, #14
 8005f82:	4013      	ands	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	23c0      	movs	r3, #192	; 0xc0
 8005f8c:	039b      	lsls	r3, r3, #14
 8005f8e:	4013      	ands	r3, r2
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d013      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	23c0      	movs	r3, #192	; 0xc0
 8005f9c:	029b      	lsls	r3, r3, #10
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	23c0      	movs	r3, #192	; 0xc0
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d10a      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fa8:	4b67      	ldr	r3, [pc, #412]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	401a      	ands	r2, r3
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	029b      	lsls	r3, r3, #10
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d101      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0c0      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005fbe:	4b62      	ldr	r3, [pc, #392]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc2:	23c0      	movs	r3, #192	; 0xc0
 8005fc4:	029b      	lsls	r3, r3, #10
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d03b      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	23c0      	movs	r3, #192	; 0xc0
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	4013      	ands	r3, r2
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d033      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d02e      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005fea:	4b57      	ldr	r3, [pc, #348]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fee:	4a58      	ldr	r2, [pc, #352]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ff4:	4b54      	ldr	r3, [pc, #336]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ff8:	4b53      	ldr	r3, [pc, #332]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ffa:	2180      	movs	r1, #128	; 0x80
 8005ffc:	0309      	lsls	r1, r1, #12
 8005ffe:	430a      	orrs	r2, r1
 8006000:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006002:	4b51      	ldr	r3, [pc, #324]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006006:	4b50      	ldr	r3, [pc, #320]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006008:	4952      	ldr	r1, [pc, #328]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800600a:	400a      	ands	r2, r1
 800600c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800600e:	4b4e      	ldr	r3, [pc, #312]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4013      	ands	r3, r2
 800601c:	d014      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601e:	f7fc fa2b 	bl	8002478 <HAL_GetTick>
 8006022:	0003      	movs	r3, r0
 8006024:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006026:	e009      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006028:	f7fc fa26 	bl	8002478 <HAL_GetTick>
 800602c:	0002      	movs	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a49      	ldr	r2, [pc, #292]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e081      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800603c:	4b42      	ldr	r3, [pc, #264]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800603e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4013      	ands	r3, r2
 8006046:	d0ef      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2220      	movs	r2, #32
 800604e:	4013      	ands	r3, r2
 8006050:	d01f      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	23c0      	movs	r3, #192	; 0xc0
 8006058:	029b      	lsls	r3, r3, #10
 800605a:	401a      	ands	r2, r3
 800605c:	23c0      	movs	r3, #192	; 0xc0
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	429a      	cmp	r2, r3
 8006062:	d10c      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006064:	4b38      	ldr	r3, [pc, #224]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a3c      	ldr	r2, [pc, #240]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	23c0      	movs	r3, #192	; 0xc0
 8006074:	039b      	lsls	r3, r3, #14
 8006076:	401a      	ands	r2, r3
 8006078:	4b33      	ldr	r3, [pc, #204]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800607a:	430a      	orrs	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	4b32      	ldr	r3, [pc, #200]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006080:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	23c0      	movs	r3, #192	; 0xc0
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	401a      	ands	r2, r3
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800608e:	430a      	orrs	r2, r1
 8006090:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006092:	2317      	movs	r3, #23
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800609e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a0:	4b29      	ldr	r3, [pc, #164]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060a2:	492f      	ldr	r1, [pc, #188]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060a4:	400a      	ands	r2, r1
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d009      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060b2:	4b25      	ldr	r3, [pc, #148]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b6:	2203      	movs	r2, #3
 80060b8:	4393      	bics	r3, r2
 80060ba:	0019      	movs	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060c2:	430a      	orrs	r2, r1
 80060c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2202      	movs	r2, #2
 80060cc:	4013      	ands	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060d0:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d4:	220c      	movs	r2, #12
 80060d6:	4393      	bics	r3, r2
 80060d8:	0019      	movs	r1, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060e0:	430a      	orrs	r2, r1
 80060e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2204      	movs	r2, #4
 80060ea:	4013      	ands	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f2:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	0019      	movs	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060fe:	430a      	orrs	r2, r1
 8006100:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2208      	movs	r2, #8
 8006108:	4013      	ands	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800610e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006112:	4013      	ands	r3, r2
 8006114:	0019      	movs	r1, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800611c:	430a      	orrs	r2, r1
 800611e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2280      	movs	r2, #128	; 0x80
 8006126:	4013      	ands	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612e:	4a0f      	ldr	r2, [pc, #60]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006130:	4013      	ands	r3, r2
 8006132:	0019      	movs	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800613a:	430a      	orrs	r2, r1
 800613c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b006      	add	sp, #24
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40007000 	.word	0x40007000
 8006150:	fffcffff 	.word	0xfffcffff
 8006154:	fff7ffff 	.word	0xfff7ffff
 8006158:	00001388 	.word	0x00001388
 800615c:	ffcfffff 	.word	0xffcfffff
 8006160:	efffffff 	.word	0xefffffff
 8006164:	fffff3ff 	.word	0xfffff3ff
 8006168:	ffffcfff 	.word	0xffffcfff
 800616c:	fff3ffff 	.word	0xfff3ffff

08006170 <memset>:
 8006170:	0003      	movs	r3, r0
 8006172:	1882      	adds	r2, r0, r2
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	7019      	strb	r1, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <__libc_init_array>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	2600      	movs	r6, #0
 8006184:	4c0c      	ldr	r4, [pc, #48]	; (80061b8 <__libc_init_array+0x38>)
 8006186:	4d0d      	ldr	r5, [pc, #52]	; (80061bc <__libc_init_array+0x3c>)
 8006188:	1b64      	subs	r4, r4, r5
 800618a:	10a4      	asrs	r4, r4, #2
 800618c:	42a6      	cmp	r6, r4
 800618e:	d109      	bne.n	80061a4 <__libc_init_array+0x24>
 8006190:	2600      	movs	r6, #0
 8006192:	f000 f819 	bl	80061c8 <_init>
 8006196:	4c0a      	ldr	r4, [pc, #40]	; (80061c0 <__libc_init_array+0x40>)
 8006198:	4d0a      	ldr	r5, [pc, #40]	; (80061c4 <__libc_init_array+0x44>)
 800619a:	1b64      	subs	r4, r4, r5
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	42a6      	cmp	r6, r4
 80061a0:	d105      	bne.n	80061ae <__libc_init_array+0x2e>
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	00b3      	lsls	r3, r6, #2
 80061a6:	58eb      	ldr	r3, [r5, r3]
 80061a8:	4798      	blx	r3
 80061aa:	3601      	adds	r6, #1
 80061ac:	e7ee      	b.n	800618c <__libc_init_array+0xc>
 80061ae:	00b3      	lsls	r3, r6, #2
 80061b0:	58eb      	ldr	r3, [r5, r3]
 80061b2:	4798      	blx	r3
 80061b4:	3601      	adds	r6, #1
 80061b6:	e7f2      	b.n	800619e <__libc_init_array+0x1e>
 80061b8:	08006284 	.word	0x08006284
 80061bc:	08006284 	.word	0x08006284
 80061c0:	08006288 	.word	0x08006288
 80061c4:	08006284 	.word	0x08006284

080061c8 <_init>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr

080061d4 <_fini>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr
